/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fileoverview An event representing when a dependent dropdown field changes
 * state.
 */
import * as Blockly from 'blockly/core';
/** The structure of a serialized DependentDropdownOptionsChange. */
export interface DependentDropdownOptionsChangeJson extends Blockly.Events.BlockBaseJson {
    name: string;
    newValue: string;
    oldValue: string;
    oldOptions: Blockly.MenuOption[];
    newOptions: Blockly.MenuOption[];
}
/**
 * A change event representing a simultaneous change to a dropdown field's
 * options and value. The old value must be one of the old options, and the new
 * value must be one of the new options. Unlike a normal value change event,
 * it's possible for this event to change the value to something that wasn't
 * previously one of the valid options--in either direction--by also changing
 * the options at the same time.
 */
export declare class DependentDropdownOptionsChange extends Blockly.Events.BlockBase {
    /** The name to register with Blockly for the type of event. */
    static readonly EVENT_TYPE: string;
    /** The name of the change event type for registering with Blockly. */
    readonly type: string;
    /** The name of the field that changed. */
    name?: string;
    /** The original value of the field. */
    oldValue?: string;
    /** The new value of the field. */
    newValue?: string;
    /** The original available options for the dropdown field. */
    oldOptions?: Blockly.MenuOption[];
    /** The new available options for the dropdown field. */
    newOptions?: Blockly.MenuOption[];
    /**
     * Construct a new DependentDropdownOptionsChange.
     * @param block The changed block. Undefined for a blank event.
     * @param name Name of the field affected.
     * @param oldValue Previous value of field.
     * @param newValue New value of field.
     * @param oldOptions Previous options for the dropdown.
     * @param newOptions New options for the dropdown.
     */
    constructor(block?: Blockly.Block, name?: string, oldValue?: string, newValue?: string, oldOptions?: Blockly.MenuOption[], newOptions?: Blockly.MenuOption[]);
    /**
     * Encode the event as JSON.
     * @returns JSON representation.
     */
    toJson(): DependentDropdownOptionsChangeJson;
    /**
     * Decode the JSON event.
     * @param json JSON representation.
     * @returns The deserialized event.
     */
    static fromJson(json: DependentDropdownOptionsChangeJson, workspace: Blockly.Workspace, event?: any): DependentDropdownOptionsChange;
    /**
     * Does this event leave all state as it was before?
     * @returns False if something changed.
     */
    isNull(): boolean;
    /**
     * Run a change event.
     * @param forward True if run forward, false if run backward (undo).
     */
    run(forward: boolean): void;
}
//# sourceMappingURL=dependent_dropdown_options_change.d.ts.map