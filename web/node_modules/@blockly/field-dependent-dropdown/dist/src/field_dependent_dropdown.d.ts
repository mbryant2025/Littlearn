/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fileoverview A Blockly dropdown menu field where the options can change
 * depending on the value of another field.
 */
import * as Blockly from 'blockly/core';
/** The type of the mapping from parent value to child options. */
export interface ChildOptionMapping {
    [key: string]: Blockly.MenuOption[];
}
declare type FieldConfig = Exclude<ConstructorParameters<typeof Blockly.Field>[2], undefined>;
/** fromJson config for a dependent dropdown field. */
export interface FieldDependentDropdownFromJsonConfig extends FieldConfig {
    parentName: string;
    optionMapping: ChildOptionMapping;
    defaultOptions?: Blockly.MenuOption[];
}
/**
 * A structure for managing data needed by the menu generator of a
 * FieldDependentDropdown.
 */
interface DependencyData {
    /**
     * A reference to the parent field of an associated dependent dropdown. Absent
     * until the parent field is initialized. This field's value determines the
     * available options of the child field.
     */
    parentField?: Blockly.Field<string>;
    /**
     * The child field's currently available menu options based on the current
     * value of the parent field. Absent until the parent field is initialized.
     */
    derivedOptions?: Blockly.MenuOption[];
}
/**
 * A dropdown field that automatically updates its own options based on a
 * mapping from a parent field's value. The parent field must be attached to the
 * block before this child field.
 *
 * When this field is attached to a block, it will find the parent field and
 * attach a validator to the parent field that intercepts changes to its value
 * to update the options on this field. If the new validator is later removed\
 * or replaced, then this dependent field will no longer function.
 */
export declare class FieldDependentDropdown extends Blockly.FieldDropdown {
    /**
     * Contains data used by this dropdown field's menu generator.
     *
     * The menu generator cannot refer directly to this FieldDependentDropdown
     * instance, because it must be created before calling the super constructor
     * when the "this" reference is not yet valid. This helper structure is used
     * instead.
     *
     * This is public so that the DependentDropdownOptionsChangeJson event can
     * update it while undoing/redoing.
     */
    dependencyData: DependencyData;
    /** The name of the field that determines this field's options. */
    private parentName;
    /**
     * The mapping from the parent field's value to this field's intended
     * available options. The keys are strings representing the parent's possible
     * values, and the values are the corresponding options to use in this child
     * field.
     */
    private optionMapping;
    /**
     * An optional fallback set of options to use if the parent field's value does
     * not match any of the keys in optionMapping.
     */
    private defaultOptions?;
    /**
     * Constructs a new FieldDependentDropdown.
     * @param parentName The name of the parent field whose value determines this
     *    field's available options.
     * @param optionMapping A mapping from the possible values of the parent field
     *    to the corresponding available options of this child field. The keys are
     *    the possible values of the parent field, and the values are the
     *    corresponding arrays of options for this child field.
     * @param defaultOptions An optional fallback set of options to use if the
     *    parent field's value does not match any of the keys in optionMapping.
     * @param validator An optional function that is called to validate changes to
     *    this field's value.
     * @param config An optional map of general options used to configure the
     *    field, such as a tooltip.
     */
    constructor(parentName: string, optionMapping: ChildOptionMapping, defaultOptions?: Blockly.MenuOption[], validator?: Blockly.FieldValidator, config?: FieldConfig);
    /**
     * Constructs a FieldDependentDropdown from a JSON arg object.
     * @param options A JSON object providing "parentName" and "optionMapping".
     * @returns The new field instance.
     */
    static fromJson(options: FieldDependentDropdownFromJsonConfig): FieldDependentDropdown;
    /**
     * Attach this field to a block.
     *
     * @param block The block containing this field.
     */
    setSourceBlock(block: Blockly.Block): void;
    /**
     * Updates the options of this child dropdown field based on the new value of
     * the parent field.
     * @param newValue The newly assigned value.
     */
    private updateOptionsBasedOnNewValue;
}
export {};
//# sourceMappingURL=field_dependent_dropdown.d.ts.map