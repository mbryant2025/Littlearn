{"ast":null,"code":"import React,{useEffect}from'react';import*as Blockly from'blockly';import{load,save}from'../blockly/serialization';import{printBlock}from'../blockly/blocks/print';import{waitBlock}from'../blockly/blocks/wait';import{ifBlock}from'../blockly/blocks/if';import{binaryOpBlock}from'../blockly/blocks/binaryOp';import{whileBlock}from'../blockly/blocks/while';import{sevenseg}from'../blockly/blocks/sevenseg';import{readport}from\"../blockly/blocks/readport\";import{writeport}from\"../blockly/blocks/writeport\";import{intVarDeclarationBlock,useVariableBlockDef,assignVariableBlockDef}from'../blockly/blocks/intVars';import{floatVarDeclarationBlock}from'../blockly/blocks/floatVars';import{forBlock}from'../blockly/generators/codeGen';import{javascriptGenerator}from'blockly/javascript';import{toolbox}from'../blockly/toolbox';import'./styles/Blockly.css';import{useGeneratedCode}from'../GeneratedCodeContext';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BlocklyComponent=function BlocklyComponent(){var _useGeneratedCode=useGeneratedCode(),setGeneratedCode=_useGeneratedCode.setGeneratedCode;useEffect(function(){// Register the custom blocks and generator\nBlockly.common.defineBlocks(printBlock);Blockly.common.defineBlocks(waitBlock);Blockly.common.defineBlocks(ifBlock);Blockly.common.defineBlocks(binaryOpBlock);Blockly.common.defineBlocks(whileBlock);Blockly.common.defineBlocks(intVarDeclarationBlock);Blockly.common.defineBlocks(useVariableBlockDef);Blockly.common.defineBlocks(sevenseg);Blockly.common.defineBlocks(readport);Blockly.common.defineBlocks(writeport);Blockly.common.defineBlocks(floatVarDeclarationBlock);Blockly.common.defineBlocks(assignVariableBlockDef);Object.assign(javascriptGenerator.forBlock,forBlock);var workspace=Blockly.inject('blocklyDiv',{toolbox:toolbox});// Load the workspace from local storage\nload(workspace);// Every time the workspace changes state, save the changes to storage.\nworkspace.addChangeListener(function(e){if(e.isUiEvent)return;save(workspace);});// Whenever the workspace changes meaningfully, run the code again.\nworkspace.addChangeListener(function(e){// Don't run the code when the workspace finishes loading; we're\n// already running it once when the application starts.\n// Don't run the code during drags; we might have invalid state.\nif(e.isUiEvent||e.type===Blockly.Events.FINISHED_LOADING||workspace.isDragging()){return;}runCode();});// Add event listener for the 'CREATE_INT_VARIABLE' button\nworkspace.registerButtonCallback('CREATE_INT_VARIABLE',function(){console.log('Create int variable button clicked!');var variableName=prompt('Enter the variable name:');if(variableName){// Create a new variable using Blockly's createVariable function\nworkspace.createVariable(variableName,'Number');// 'Number' indicates the type of the variable\n}//print workspace variables\nconsole.log(workspace.getAllVariables());});var runCode=function runCode(){var code=javascriptGenerator.workspaceToCode(workspace);// Hacky workaround for the existing JS implementation\n// If there are any variables, delete the first two lines\nif(code.includes('var ')){code=code.split('\\n').slice(3).join('\\n');}//set the code in the generatedCode context\nsetGeneratedCode(code.replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\\n/g,'<br>'));};runCode();// Whenever the workspace changes meaningfully, run the code again.\nworkspace.addChangeListener(function(){runCode();});},[setGeneratedCode]);return/*#__PURE__*/_jsxs(\"div\",{className:\"block-chop\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"blocklyDiv\",style:{height:'100%',width:'100%'}}),/*#__PURE__*/_jsx(\"div\",{id:\"blocklyToolboxDiv\",style:{display:'none'}})]});};export default BlocklyComponent;","map":{"version":3,"names":["React","useEffect","Blockly","load","save","printBlock","waitBlock","ifBlock","binaryOpBlock","whileBlock","sevenseg","readport","writeport","intVarDeclarationBlock","useVariableBlockDef","assignVariableBlockDef","floatVarDeclarationBlock","forBlock","javascriptGenerator","toolbox","useGeneratedCode","jsx","_jsx","jsxs","_jsxs","BlocklyComponent","_useGeneratedCode","setGeneratedCode","common","defineBlocks","Object","assign","workspace","inject","addChangeListener","e","isUiEvent","type","Events","FINISHED_LOADING","isDragging","runCode","registerButtonCallback","console","log","variableName","prompt","createVariable","getAllVariables","code","workspaceToCode","includes","split","slice","join","replace","className","children","id","style","height","width","display"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { load, save } from '../blockly/serialization';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { sevenseg } from '../blockly/blocks/sevenseg';\nimport { readport } from \"../blockly/blocks/readport\";\nimport { writeport } from \"../blockly/blocks/writeport\";\nimport { intVarDeclarationBlock, useVariableBlockDef, assignVariableBlockDef } from '../blockly/blocks/intVars';\nimport { floatVarDeclarationBlock } from '../blockly/blocks/floatVars';\nimport { forBlock } from '../blockly/generators/codeGen';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport './styles/Blockly.css';\nimport { useGeneratedCode } from '../GeneratedCodeContext';\n\nconst BlocklyComponent: React.FC = () => {\n\n  const { setGeneratedCode } = useGeneratedCode();\n\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n    Blockly.common.defineBlocks(useVariableBlockDef);\n    Blockly.common.defineBlocks(sevenseg);\n    Blockly.common.defineBlocks(readport);\n    Blockly.common.defineBlocks(writeport);\n    Blockly.common.defineBlocks(floatVarDeclarationBlock);\n    Blockly.common.defineBlocks(assignVariableBlockDef);\n\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n\n    const workspace = Blockly.inject('blocklyDiv', { toolbox: toolbox });\n\n    // Load the workspace from local storage\n    load(workspace);\n\n    // Every time the workspace changes state, save the changes to storage.\n    workspace.addChangeListener((e) => {\n      if (e.isUiEvent) return;\n      save(workspace);\n    });\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener((e) => {\n      // Don't run the code when the workspace finishes loading; we're\n      // already running it once when the application starts.\n      // Don't run the code during drags; we might have invalid state.\n      if (e.isUiEvent || e.type === Blockly.Events.FINISHED_LOADING ||\n        workspace.isDragging()) {\n        return;\n      }\n      runCode();\n    });\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n\n    const runCode = () => {\n      let code = javascriptGenerator.workspaceToCode(workspace);\n\n      // Hacky workaround for the existing JS implementation\n      // If there are any variables, delete the first two lines\n\n      if (code.includes('var ')) {\n        code = code.split('\\n').slice(3).join('\\n');\n      }\n\n      //set the code in the generatedCode context\n      setGeneratedCode(code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>'));\n\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, [setGeneratedCode]);\n\n\n  return (\n    <div className=\"block-chop\">\n      <div id=\"blocklyDiv\" style={{ height: '100%', width: '100%' }}></div>\n      <div id=\"blocklyToolboxDiv\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}