{"ast":null,"code":"// import * as ContextMenu from '../core/contextmenu.js';\n// import * as Extensions from '../core/extensions.js';\n// import * as Variables from '../core/variables.js';\n// import type {Block} from '../core/block.js';\n// import type {\n//   ContextMenuOption,\n//   LegacyContextMenuOption,\n// } from '../core/contextmenu_registry.js';\n// import {FieldVariable} from '../core/field_variable.js';\n// import {Msg} from '../core/msg.js';\n// import type {WorkspaceSvg} from '../core/workspace_svg.js';\n// import '../core/field_label.js';\n\nimport * as Blockly from 'blockly/core';\nimport * as ContextMenu from 'blockly/core/contextmenu';\nimport * as Extensions from 'blockly/core/extensions.js';\nimport * as Variables from 'blockly/core/variables';\nimport { Msg } from 'blockly/core/msg';\nimport 'blockly/core/field_label';\n\n/**\n * A dictionary of the block definitions provided by this module.\n */\nexport const intVariables = Blockly.common.createBlockDefinitionsFromJsonArray([\n// Block for variable getter.\n{\n  'type': 'variables_get',\n  'message0': '%1',\n  'args0': [{\n    'type': 'field_variable',\n    'name': 'VAR',\n    'variable': '%{BKY_VARIABLES_DEFAULT_NAME}'\n  }],\n  'output': null,\n  'style': 'variable_blocks',\n  'helpUrl': '%{BKY_VARIABLES_GET_HELPURL}',\n  'tooltip': '%{BKY_VARIABLES_GET_TOOLTIP}',\n  'extensions': ['contextMenu_variableSetterGetter']\n},\n// Block for variable setter.\n{\n  'type': 'variables_set',\n  'message0': '%{BKY_VARIABLES_SET}',\n  'args0': [{\n    'type': 'field_variable',\n    'name': 'VAR',\n    'variable': '%{BKY_VARIABLES_DEFAULT_NAME}'\n  }, {\n    'type': 'input_value',\n    'name': 'VALUE'\n  }],\n  'previousStatement': null,\n  'nextStatement': null,\n  'style': 'variable_blocks',\n  'tooltip': '%{BKY_VARIABLES_SET_TOOLTIP}',\n  'helpUrl': '%{BKY_VARIABLES_SET_HELPURL}',\n  'extensions': ['contextMenu_variableSetterGetter']\n}]);\n\n/** Type of a block that has CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN */\n\n/**\n * Mixin to add context menu items to create getter/setter blocks for this\n * setter/getter.\n * Used by blocks 'variables_set' and 'variables_get'.\n */\nconst CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN = {\n  /**\n   * Add menu option to create getter/setter block for this setter/getter.\n   *\n   * @param options List of menu options to add to.\n   */\n  customContextMenu: function (options) {\n    if (!this.isInFlyout) {\n      let oppositeType;\n      let contextMenuMsg;\n      // Getter blocks have the option to create a setter block, and vice versa.\n      if (this.type === 'variables_get') {\n        oppositeType = 'variables_set';\n        contextMenuMsg = Msg['VARIABLES_GET_CREATE_SET'];\n      } else {\n        oppositeType = 'variables_get';\n        contextMenuMsg = Msg['VARIABLES_SET_CREATE_GET'];\n      }\n      const varField = this.getField('VAR');\n      const newVarBlockState = {\n        type: oppositeType,\n        fields: {\n          VAR: varField.saveState(true)\n        }\n      };\n      options.push({\n        enabled: this.workspace.remainingCapacity() > 0,\n        text: contextMenuMsg.replace('%1', varField.getText()),\n        callback: ContextMenu.callbackFactory(this, newVarBlockState)\n      });\n      // Getter blocks have the option to rename or delete that variable.\n    } else {\n      if (this.type === 'variables_get' || this.type === 'variables_get_reporter') {\n        const renameOption = {\n          text: Msg['RENAME_VARIABLE'],\n          enabled: true,\n          callback: renameOptionCallbackFactory(this)\n        };\n        const name = this.getField('VAR').getText();\n        const deleteOption = {\n          text: Msg['DELETE_VARIABLE'].replace('%1', name),\n          enabled: true,\n          callback: deleteOptionCallbackFactory(this)\n        };\n        options.unshift(renameOption);\n        options.unshift(deleteOption);\n      }\n    }\n  }\n};\n\n/**\n * Factory for callbacks for rename variable dropdown menu option\n * associated with a variable getter block.\n *\n * @param block The block with the variable to rename.\n * @returns A function that renames the variable.\n */\nconst renameOptionCallbackFactory = function (block) {\n  return function () {\n    const workspace = block.workspace;\n    const variableField = block.getField('VAR');\n    const variable = variableField.getVariable();\n    Variables.renameVariable(workspace, variable);\n  };\n};\n\n/**\n * Factory for callbacks for delete variable dropdown menu option\n * associated with a variable getter block.\n *\n * @param block The block with the variable to delete.\n * @returns A function that deletes the variable.\n */\nconst deleteOptionCallbackFactory = function (block) {\n  return function () {\n    const workspace = block.workspace;\n    const variableField = block.getField('VAR');\n    const variable = variableField.getVariable();\n    workspace.deleteVariableById(variable.getId());\n    workspace.refreshToolboxSelection();\n  };\n};\nExtensions.registerMixin('contextMenu_variableSetterGetter', CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN);","map":{"version":3,"names":["Blockly","ContextMenu","Extensions","Variables","Msg","intVariables","common","createBlockDefinitionsFromJsonArray","CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN","customContextMenu","options","isInFlyout","oppositeType","contextMenuMsg","type","varField","getField","newVarBlockState","fields","VAR","saveState","push","enabled","workspace","remainingCapacity","text","replace","getText","callback","callbackFactory","renameOption","renameOptionCallbackFactory","name","deleteOption","deleteOptionCallbackFactory","unshift","block","variableField","variable","getVariable","renameVariable","deleteVariableById","getId","refreshToolboxSelection","registerMixin"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/intVariables.ts"],"sourcesContent":["\n// import * as ContextMenu from '../core/contextmenu.js';\n// import * as Extensions from '../core/extensions.js';\n// import * as Variables from '../core/variables.js';\n// import type {Block} from '../core/block.js';\n// import type {\n//   ContextMenuOption,\n//   LegacyContextMenuOption,\n// } from '../core/contextmenu_registry.js';\n// import {FieldVariable} from '../core/field_variable.js';\n// import {Msg} from '../core/msg.js';\n// import type {WorkspaceSvg} from '../core/workspace_svg.js';\n// import '../core/field_label.js';\n\nimport * as Blockly from 'blockly/core';\nimport * as ContextMenu from 'blockly/core/contextmenu';\nimport * as Extensions from 'blockly/core/extensions.js';\nimport * as Variables from 'blockly/core/variables';\nimport type {Block} from 'blockly/core/block';\nimport type {\n  ContextMenuOption,\n  LegacyContextMenuOption,\n} from 'blockly/core/contextmenu_registry';\nimport {FieldVariable} from 'blockly/core/field_variable';\nimport {Msg} from 'blockly/core/msg';\nimport type {WorkspaceSvg} from 'blockly/core/workspace_svg';\nimport 'blockly/core/field_label';\n\n\n\n/**\n * A dictionary of the block definitions provided by this module.\n */\nexport const intVariables = Blockly.common.createBlockDefinitionsFromJsonArray([\n  // Block for variable getter.\n  {\n    'type': 'variables_get',\n    'message0': '%1',\n    'args0': [\n      {\n        'type': 'field_variable',\n        'name': 'VAR',\n        'variable': '%{BKY_VARIABLES_DEFAULT_NAME}',\n      },\n    ],\n    'output': null,\n    'style': 'variable_blocks',\n    'helpUrl': '%{BKY_VARIABLES_GET_HELPURL}',\n    'tooltip': '%{BKY_VARIABLES_GET_TOOLTIP}',\n    'extensions': ['contextMenu_variableSetterGetter'],\n  },\n  // Block for variable setter.\n  {\n    'type': 'variables_set',\n    'message0': '%{BKY_VARIABLES_SET}',\n    'args0': [\n      {\n        'type': 'field_variable',\n        'name': 'VAR',\n        'variable': '%{BKY_VARIABLES_DEFAULT_NAME}',\n      },\n      {\n        'type': 'input_value',\n        'name': 'VALUE',\n      },\n    ],\n    'previousStatement': null,\n    'nextStatement': null,\n    'style': 'variable_blocks',\n    'tooltip': '%{BKY_VARIABLES_SET_TOOLTIP}',\n    'helpUrl': '%{BKY_VARIABLES_SET_HELPURL}',\n    'extensions': ['contextMenu_variableSetterGetter'],\n  },\n]);\n\n/** Type of a block that has CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN */\ntype VariableBlock = Block & VariableMixin;\ninterface VariableMixin extends VariableMixinType {}\ntype VariableMixinType =\n  typeof CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN;\n\n/**\n * Mixin to add context menu items to create getter/setter blocks for this\n * setter/getter.\n * Used by blocks 'variables_set' and 'variables_get'.\n */\nconst CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN = {\n  /**\n   * Add menu option to create getter/setter block for this setter/getter.\n   *\n   * @param options List of menu options to add to.\n   */\n  customContextMenu: function (\n    this: VariableBlock,\n    options: Array<ContextMenuOption | LegacyContextMenuOption>,\n  ) {\n    if (!this.isInFlyout) {\n      let oppositeType;\n      let contextMenuMsg;\n      // Getter blocks have the option to create a setter block, and vice versa.\n      if (this.type === 'variables_get') {\n        oppositeType = 'variables_set';\n        contextMenuMsg = Msg['VARIABLES_GET_CREATE_SET'];\n      } else {\n        oppositeType = 'variables_get';\n        contextMenuMsg = Msg['VARIABLES_SET_CREATE_GET'];\n      }\n\n      const varField = this.getField('VAR')!;\n      const newVarBlockState = {\n        type: oppositeType,\n        fields: {VAR: varField.saveState(true)},\n      };\n\n      options.push({\n        enabled: this.workspace.remainingCapacity() > 0,\n        text: contextMenuMsg.replace('%1', varField.getText()),\n        callback: ContextMenu.callbackFactory(this, newVarBlockState),\n      });\n      // Getter blocks have the option to rename or delete that variable.\n    } else {\n      if (\n        this.type === 'variables_get' ||\n        this.type === 'variables_get_reporter'\n      ) {\n        const renameOption = {\n          text: Msg['RENAME_VARIABLE'],\n          enabled: true,\n          callback: renameOptionCallbackFactory(this),\n        };\n        const name = this.getField('VAR')!.getText();\n        const deleteOption = {\n          text: Msg['DELETE_VARIABLE'].replace('%1', name),\n          enabled: true,\n          callback: deleteOptionCallbackFactory(this),\n        };\n        options.unshift(renameOption);\n        options.unshift(deleteOption);\n      }\n    }\n  },\n};\n\n/**\n * Factory for callbacks for rename variable dropdown menu option\n * associated with a variable getter block.\n *\n * @param block The block with the variable to rename.\n * @returns A function that renames the variable.\n */\nconst renameOptionCallbackFactory = function (\n  block: VariableBlock,\n): () => void {\n  return function () {\n    const workspace = block.workspace;\n    const variableField = block.getField('VAR') as FieldVariable;\n    const variable = variableField.getVariable()!;\n    Variables.renameVariable(workspace, variable);\n  };\n};\n\n/**\n * Factory for callbacks for delete variable dropdown menu option\n * associated with a variable getter block.\n *\n * @param block The block with the variable to delete.\n * @returns A function that deletes the variable.\n */\nconst deleteOptionCallbackFactory = function (\n  block: VariableBlock,\n): () => void {\n  return function () {\n    const workspace = block.workspace;\n    const variableField = block.getField('VAR') as FieldVariable;\n    const variable = variableField.getVariable()!;\n    workspace.deleteVariableById(variable.getId());\n    (workspace as WorkspaceSvg).refreshToolboxSelection();\n  };\n};\n\nExtensions.registerMixin(\n  'contextMenu_variableSetterGetter',\n  CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN,\n);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}