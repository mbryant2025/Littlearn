{"ast":null,"code":"'use strict';\n\nvar toString = Object.prototype.toString;\n\n/**\n * Extract names from functions.\n *\n * @param {Function} fn The function who's name we need to extract.\n * @returns {String} The name of the function.\n * @public\n */\nmodule.exports = function name(fn) {\n  if ('string' === typeof fn.displayName && fn.constructor.name) {\n    return fn.displayName;\n  } else if ('string' === typeof fn.name && fn.name) {\n    return fn.name;\n  }\n\n  //\n  // Check to see if the constructor has a name.\n  //\n  if ('object' === typeof fn && fn.constructor && 'string' === typeof fn.constructor.name) return fn.constructor.name;\n\n  //\n  // toString the given function and attempt to parse it out of it, or determine\n  // the class.\n  //\n  var named = fn.toString(),\n    type = toString.call(fn).slice(8, -1);\n  if ('Function' === type) {\n    named = named.substring(named.indexOf('(') + 1, named.indexOf(')'));\n  } else {\n    named = type;\n  }\n  return named || 'anonymous';\n};","map":{"version":3,"names":["toString","Object","prototype","module","exports","name","fn","displayName","constructor","named","type","call","slice","substring","indexOf"],"sources":["/Users/michaelbryant/node_modules/fn.name/index.js"],"sourcesContent":["'use strict';\n\nvar toString = Object.prototype.toString;\n\n/**\n * Extract names from functions.\n *\n * @param {Function} fn The function who's name we need to extract.\n * @returns {String} The name of the function.\n * @public\n */\nmodule.exports = function name(fn) {\n  if ('string' === typeof fn.displayName && fn.constructor.name) {\n    return fn.displayName;\n  } else if ('string' === typeof fn.name && fn.name) {\n    return fn.name;\n  }\n\n  //\n  // Check to see if the constructor has a name.\n  //\n  if (\n       'object' === typeof fn\n    && fn.constructor\n    && 'string' === typeof fn.constructor.name\n  ) return fn.constructor.name;\n\n  //\n  // toString the given function and attempt to parse it out of it, or determine\n  // the class.\n  //\n  var named = fn.toString()\n    , type = toString.call(fn).slice(8, -1);\n\n  if ('Function' === type) {\n    named = named.substring(named.indexOf('(') + 1, named.indexOf(')'));\n  } else {\n    named = type;\n  }\n\n  return named || 'anonymous';\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACF,QAAQ;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,SAASC,IAAIA,CAACC,EAAE,EAAE;EACjC,IAAI,QAAQ,KAAK,OAAOA,EAAE,CAACC,WAAW,IAAID,EAAE,CAACE,WAAW,CAACH,IAAI,EAAE;IAC7D,OAAOC,EAAE,CAACC,WAAW;EACvB,CAAC,MAAM,IAAI,QAAQ,KAAK,OAAOD,EAAE,CAACD,IAAI,IAAIC,EAAE,CAACD,IAAI,EAAE;IACjD,OAAOC,EAAE,CAACD,IAAI;EAChB;;EAEA;EACA;EACA;EACA,IACK,QAAQ,KAAK,OAAOC,EAAE,IACtBA,EAAE,CAACE,WAAW,IACd,QAAQ,KAAK,OAAOF,EAAE,CAACE,WAAW,CAACH,IAAI,EAC1C,OAAOC,EAAE,CAACE,WAAW,CAACH,IAAI;;EAE5B;EACA;EACA;EACA;EACA,IAAII,KAAK,GAAGH,EAAE,CAACN,QAAQ,CAAC,CAAC;IACrBU,IAAI,GAAGV,QAAQ,CAACW,IAAI,CAACL,EAAE,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEzC,IAAI,UAAU,KAAKF,IAAI,EAAE;IACvBD,KAAK,GAAGA,KAAK,CAACI,SAAS,CAACJ,KAAK,CAACK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEL,KAAK,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC;EACrE,CAAC,MAAM;IACLL,KAAK,GAAGC,IAAI;EACd;EAEA,OAAOD,KAAK,IAAI,WAAW;AAC7B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}