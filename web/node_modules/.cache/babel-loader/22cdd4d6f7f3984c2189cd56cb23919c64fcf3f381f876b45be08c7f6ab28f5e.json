{"ast":null,"code":"import * as Blockly from 'blockly/core';\n\n// Create a custom block for declaring an integer variable in code.\nconst intVarDeclaration = {\n  'type': 'int_var_declaration',\n  'message0': 'Declare int variable %1 = %2',\n  'args0': [{\n    'type': 'field_variable',\n    'name': 'VAR',\n    'variable': 'my_variable'\n  }, {\n    'type': 'input_value',\n    'name': 'VALUE',\n    'check': 'Number'\n  }],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': ''\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const intVarDeclarationBlock = Blockly.common.createBlockDefinitionsFromJsonArray([intVarDeclaration]);\nconst useVariableBlock = {\n  'type': 'use_variable',\n  'message0': '%1',\n  'args0': [{\n    'type': 'field_variable',\n    'name': 'VAR',\n    'variable': 'my_variable' // Default variable name\n  }],\n\n  'output': 'Number',\n  // Set the output type to 'Number' or the appropriate data type\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': ''\n};\n\n// Create the block definition for the JSON-only block.\nexport const useVariableBlockDef = Blockly.common.createBlockDefinitionsFromJsonArray([useVariableBlock]);\nconst assignVariableBlock = {\n  'type': 'assign_variable',\n  'message0': '%1 = ',\n  'args0': [{\n    'type': 'field_variable',\n    'name': 'VAR',\n    'variable': 'my_variable' // Default variable name\n  }],\n\n  'output': 'Number',\n  // Set the output type to 'Number' or the appropriate data type\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': ''\n};\n\n// Create the block definition for the JSON-only block.\nexport const assignVariableBlockDef = Blockly.common.createBlockDefinitionsFromJsonArray([assignVariableBlock]);","map":{"version":3,"names":["Blockly","intVarDeclaration","intVarDeclarationBlock","common","createBlockDefinitionsFromJsonArray","useVariableBlock","useVariableBlockDef","assignVariableBlock","assignVariableBlockDef"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/intVars.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\n\n// Create a custom block for declaring an integer variable in code.\nconst intVarDeclaration = {\n  'type': 'int_var_declaration',\n  'message0': 'Declare int variable %1 = %2',\n  'args0': [\n    {\n      'type': 'field_variable',\n      'name': 'VAR',\n      'variable': 'my_variable',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const intVarDeclarationBlock = Blockly.common.createBlockDefinitionsFromJsonArray([intVarDeclaration]);\n\nconst useVariableBlock = {\n    'type': 'use_variable',\n    'message0': '%1',\n    'args0': [\n      {\n        'type': 'field_variable',\n        'name': 'VAR',\n        'variable': 'my_variable', // Default variable name\n      },\n    ],\n    'output': 'Number', // Set the output type to 'Number' or the appropriate data type\n    'colour': 160,\n    'tooltip': '',\n    'helpUrl': '',\n  };\n  \n  // Create the block definition for the JSON-only block.\n  export const useVariableBlockDef = Blockly.common.createBlockDefinitionsFromJsonArray([useVariableBlock]);\n\n  const assignVariableBlock = {\n    'type': 'assign_variable',\n    'message0': '%1 = ',\n    'args0': [\n      {\n        'type': 'field_variable',\n        'name': 'VAR',\n        'variable': 'my_variable', // Default variable name\n      },\n    ],\n    'output': 'Number', // Set the output type to 'Number' or the appropriate data type\n    'colour': 160,\n    'tooltip': '',\n    'helpUrl': '',\n  };\n  \n  // Create the block definition for the JSON-only block.\n  export const assignVariableBlockDef = Blockly.common.createBlockDefinitionsFromJsonArray([assignVariableBlock]);"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,cAAc;;AAEvC;AACA,MAAMC,iBAAiB,GAAG;EACxB,MAAM,EAAE,qBAAqB;EAC7B,UAAU,EAAE,8BAA8B;EAC1C,OAAO,EAAE,CACP;IACE,MAAM,EAAE,gBAAgB;IACxB,MAAM,EAAE,KAAK;IACb,UAAU,EAAE;EACd,CAAC,EACD;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,OAAO;IACf,OAAO,EAAE;EACX,CAAC,CACF;EACD,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE,IAAI;EACrB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,EAAE;EACb,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGF,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACH,iBAAiB,CAAC,CAAC;AAE7G,MAAMI,gBAAgB,GAAG;EACrB,MAAM,EAAE,cAAc;EACtB,UAAU,EAAE,IAAI;EAChB,OAAO,EAAE,CACP;IACE,MAAM,EAAE,gBAAgB;IACxB,MAAM,EAAE,KAAK;IACb,UAAU,EAAE,aAAa,CAAE;EAC7B,CAAC,CACF;;EACD,QAAQ,EAAE,QAAQ;EAAE;EACpB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,EAAE;EACb,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGN,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACC,gBAAgB,CAAC,CAAC;AAEzG,MAAME,mBAAmB,GAAG;EAC1B,MAAM,EAAE,iBAAiB;EACzB,UAAU,EAAE,OAAO;EACnB,OAAO,EAAE,CACP;IACE,MAAM,EAAE,gBAAgB;IACxB,MAAM,EAAE,KAAK;IACb,UAAU,EAAE,aAAa,CAAE;EAC7B,CAAC,CACF;;EACD,QAAQ,EAAE,QAAQ;EAAE;EACpB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,EAAE;EACb,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGR,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACG,mBAAmB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}