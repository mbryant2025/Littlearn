{"ast":null,"code":"/* eslint no-undefined: 0 */\n'use strict';\n\nvar format = require('./format');\nvar _require = require('triple-beam'),\n  MESSAGE = _require.MESSAGE;\nvar jsonStringify = require('safe-stable-stringify');\n\n/*\n * function simple (info)\n * Returns a new instance of the simple format TransformStream\n * which writes a simple representation of logs.\n *\n *    const { level, message, splat, ...rest } = info;\n *\n *    ${level}: ${message}                            if rest is empty\n *    ${level}: ${message} ${JSON.stringify(rest)}    otherwise\n */\nmodule.exports = format(function (info) {\n  var stringifiedRest = jsonStringify(Object.assign({}, info, {\n    level: undefined,\n    message: undefined,\n    splat: undefined\n  }));\n  var padding = info.padding && info.padding[info.level] || '';\n  if (stringifiedRest !== '{}') {\n    info[MESSAGE] = \"\".concat(info.level, \":\").concat(padding, \" \").concat(info.message, \" \").concat(stringifiedRest);\n  } else {\n    info[MESSAGE] = \"\".concat(info.level, \":\").concat(padding, \" \").concat(info.message);\n  }\n  return info;\n});","map":{"version":3,"names":["format","require","_require","MESSAGE","jsonStringify","module","exports","info","stringifiedRest","Object","assign","level","undefined","message","splat","padding","concat"],"sources":["/Users/michaelbryant/node_modules/logform/dist/simple.js"],"sourcesContent":["/* eslint no-undefined: 0 */\n'use strict';\n\nvar format = require('./format');\nvar _require = require('triple-beam'),\n  MESSAGE = _require.MESSAGE;\nvar jsonStringify = require('safe-stable-stringify');\n\n/*\n * function simple (info)\n * Returns a new instance of the simple format TransformStream\n * which writes a simple representation of logs.\n *\n *    const { level, message, splat, ...rest } = info;\n *\n *    ${level}: ${message}                            if rest is empty\n *    ${level}: ${message} ${JSON.stringify(rest)}    otherwise\n */\nmodule.exports = format(function (info) {\n  var stringifiedRest = jsonStringify(Object.assign({}, info, {\n    level: undefined,\n    message: undefined,\n    splat: undefined\n  }));\n  var padding = info.padding && info.padding[info.level] || '';\n  if (stringifiedRest !== '{}') {\n    info[MESSAGE] = \"\".concat(info.level, \":\").concat(padding, \" \").concat(info.message, \" \").concat(stringifiedRest);\n  } else {\n    info[MESSAGE] = \"\".concat(info.level, \":\").concat(padding, \" \").concat(info.message);\n  }\n  return info;\n});"],"mappings":"AAAA;AACA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAa,CAAC;EACnCE,OAAO,GAAGD,QAAQ,CAACC,OAAO;AAC5B,IAAIC,aAAa,GAAGH,OAAO,CAAC,uBAAuB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAGN,MAAM,CAAC,UAAUO,IAAI,EAAE;EACtC,IAAIC,eAAe,GAAGJ,aAAa,CAACK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,IAAI,EAAE;IAC1DI,KAAK,EAAEC,SAAS;IAChBC,OAAO,EAAED,SAAS;IAClBE,KAAK,EAAEF;EACT,CAAC,CAAC,CAAC;EACH,IAAIG,OAAO,GAAGR,IAAI,CAACQ,OAAO,IAAIR,IAAI,CAACQ,OAAO,CAACR,IAAI,CAACI,KAAK,CAAC,IAAI,EAAE;EAC5D,IAAIH,eAAe,KAAK,IAAI,EAAE;IAC5BD,IAAI,CAACJ,OAAO,CAAC,GAAG,EAAE,CAACa,MAAM,CAACT,IAAI,CAACI,KAAK,EAAE,GAAG,CAAC,CAACK,MAAM,CAACD,OAAO,EAAE,GAAG,CAAC,CAACC,MAAM,CAACT,IAAI,CAACM,OAAO,EAAE,GAAG,CAAC,CAACG,MAAM,CAACR,eAAe,CAAC;EACnH,CAAC,MAAM;IACLD,IAAI,CAACJ,OAAO,CAAC,GAAG,EAAE,CAACa,MAAM,CAACT,IAAI,CAACI,KAAK,EAAE,GAAG,CAAC,CAACK,MAAM,CAACD,OAAO,EAAE,GAAG,CAAC,CAACC,MAAM,CAACT,IAAI,CAACM,OAAO,CAAC;EACtF;EACA,OAAON,IAAI;AACb,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}