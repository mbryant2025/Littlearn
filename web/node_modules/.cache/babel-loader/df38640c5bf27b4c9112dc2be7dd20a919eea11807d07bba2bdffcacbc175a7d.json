{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/BluetoothContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BluetoothContext = /*#__PURE__*/createContext(undefined);\n\n// 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,\nconst SERVICE_UUID = '00001101-0000-1000-8000-00805f9b34fb';\nconst CHARACTERISTIC_UUID = '00001102-0000-1000-8000-00805f9b34fb';\nexport const BluetoothProvider = ({\n  children\n}) => {\n  _s();\n  const [bluetoothDevice, setBluetoothDevice] = useState(null);\n  const [outputText, setOutputText] = useState('');\n\n  // For writing to the output text\n  const writeToOutput = useCallback(data => {\n    setOutputText(prevOutput => prevOutput + '\\n' + data);\n  }, [setOutputText]);\n  const clearOutput = useCallback(() => {\n    setOutputText('');\n  }, [setOutputText]);\n  const connectToDevice = useCallback(async () => {\n    try {\n      var _device$gatt;\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: [SERVICE_UUID]\n        }]\n      });\n      console.log('Connected to:', device.name);\n      const server = await ((_device$gatt = device.gatt) === null || _device$gatt === void 0 ? void 0 : _device$gatt.connect());\n      console.log('Connected to GATT server');\n      const service = await (server === null || server === void 0 ? void 0 : server.getPrimaryService(UUID));\n      console.log('Service discovered');\n      const char = await (service === null || service === void 0 ? void 0 : service.getCharacteristic(UUID));\n      console.log('Characteristic discovered');\n      console.log(char);\n      if (char) {\n        // Enable notifications for the characteristic to receive data\n        await char.startNotifications();\n        console.log('Notifications started');\n\n        // Listen for data notifications\n        char.addEventListener('characteristicvaluechanged', event => {\n          var _event$target, _event$target2;\n          console.log('Received data:', (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value);\n          const value = (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n\n            // Decode the callbacks per callbacks.md\n\n            // __SCRIPTSENT__\n            if (decodedValue === '__SCRIPTSENT__') {\n              writeToOutput('Script uploaded.\\n');\n            }\n\n            // __PRINT__<TEXT>__PRINT__\n            else if (decodedValue.startsWith('__PRINT__') && decodedValue.endsWith('__PRINT__')) {\n              const text = decodedValue.slice(9, decodedValue.length - 9);\n              writeToOutput(text + '\\n');\n            }\n\n            // __ERROR__<TEXT>__ERROR__\n            else if (decodedValue.startsWith('__ERROR__') && decodedValue.endsWith('__ERROR__')) {\n              const text = decodedValue.slice(9, decodedValue.length - 9);\n              writeToOutput(text + '\\n');\n            }\n\n            // setOutputText((prevOutput) => prevOutput + '\\n' + decodedValue);\n            // setOutputText(decodedValue);\n          }\n        });\n\n        setBluetoothDevice(device);\n        writeToOutput('Connected to Bluetooth device.\\n');\n      } else {\n        // Handle the case when the characteristic is not found\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n  }, [writeToOutput]);\n  const disconnectDevice = useCallback(async () => {\n    var _bluetoothDevice$gatt;\n    if (bluetoothDevice && (_bluetoothDevice$gatt = bluetoothDevice.gatt) !== null && _bluetoothDevice$gatt !== void 0 && _bluetoothDevice$gatt.connected) {\n      var _bluetoothDevice$gatt2;\n      (_bluetoothDevice$gatt2 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt2 === void 0 ? void 0 : _bluetoothDevice$gatt2.disconnect();\n      console.log('Disconnected');\n    }\n    console.log('Disconnected from:', bluetoothDevice === null || bluetoothDevice === void 0 ? void 0 : bluetoothDevice.name);\n    setBluetoothDevice(null);\n    setOutputText('');\n  }, [bluetoothDevice]);\n  const sendBluetoothData = useCallback(async data => {\n    if (bluetoothDevice) {\n      var _bluetoothDevice$gatt3;\n      const textEncoder = new TextEncoder();\n      const encodedData = textEncoder.encode(data);\n      const service = await ((_bluetoothDevice$gatt3 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt3 === void 0 ? void 0 : _bluetoothDevice$gatt3.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb'));\n      const char = await (service === null || service === void 0 ? void 0 : service.getCharacteristic('00001102-0000-1000-8000-00805f9b34fb'));\n      console.log('Sending data:', data);\n      if (char) {\n        await char.writeValue(encodedData);\n      }\n    }\n  }, [bluetoothDevice]);\n  return /*#__PURE__*/_jsxDEV(BluetoothContext.Provider, {\n    value: {\n      bluetoothDevice,\n      outputText,\n      connectToDevice,\n      disconnectDevice,\n      sendBluetoothData,\n      writeToOutput,\n      clearOutput\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothProvider, \"Rt+uR7j6TEK8I1iUCE0GKXY1cr4=\");\n_c = BluetoothProvider;\nexport const useBluetooth = () => {\n  _s2();\n  const context = useContext(BluetoothContext);\n  if (context === undefined) {\n    throw new Error('useBluetooth must be used within a BluetoothProvider');\n  }\n  return context;\n};\n_s2(useBluetooth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BluetoothProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","BluetoothContext","undefined","SERVICE_UUID","CHARACTERISTIC_UUID","BluetoothProvider","children","_s","bluetoothDevice","setBluetoothDevice","outputText","setOutputText","writeToOutput","data","prevOutput","clearOutput","connectToDevice","_device$gatt","device","navigator","bluetooth","requestDevice","filters","services","console","log","name","server","gatt","connect","service","getPrimaryService","UUID","char","getCharacteristic","startNotifications","addEventListener","event","_event$target","_event$target2","target","value","textDecoder","TextDecoder","decodedValue","decode","startsWith","endsWith","text","slice","length","error","disconnectDevice","_bluetoothDevice$gatt","connected","_bluetoothDevice$gatt2","disconnect","sendBluetoothData","_bluetoothDevice$gatt3","textEncoder","TextEncoder","encodedData","encode","writeValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBluetooth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/BluetoothContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\n\ninterface BluetoothContextProps {\n  bluetoothDevice: BluetoothDevice | null;\n  outputText: string;\n  connectToDevice: () => Promise<void>;\n  disconnectDevice: () => Promise<void>;\n  sendBluetoothData: (data: string) => Promise<void>;\n  writeToOutput: (data: string) => void;\n  clearOutput: () => void;\n}\n\nconst BluetoothContext = createContext<BluetoothContextProps | undefined>(undefined);\n\n\n// 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,\nconst SERVICE_UUID = '00001101-0000-1000-8000-00805f9b34fb';\n\nconst CHARACTERISTIC_UUID = '00001102-0000-1000-8000-00805f9b34fb';\n\ninterface BluetoothProviderProps {\n  children: ReactNode;\n}\n\nexport const BluetoothProvider: React.FC<BluetoothProviderProps> = ({ children }) => {\n  const [bluetoothDevice, setBluetoothDevice] = useState<BluetoothDevice | null>(null);\n  const [outputText, setOutputText] = useState<string>('');\n\n  // For writing to the output text\n  const writeToOutput = useCallback((data: string) => {\n    setOutputText((prevOutput) => prevOutput + '\\n' + data);\n  }, [setOutputText]);\n\n  const clearOutput = useCallback(() => {\n    setOutputText('');\n  }, [setOutputText]);\n\n\n  const connectToDevice = useCallback(async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: [SERVICE_UUID] }],\n      });\n\n      console.log('Connected to:', device.name);\n\n      const server = await device.gatt?.connect();\n      console.log('Connected to GATT server');\n\n      const service = await server?.getPrimaryService(UUID);\n      console.log('Service discovered');\n\n      const char = await service?.getCharacteristic(UUID);\n      console.log('Characteristic discovered');\n\n      console.log(char);\n\n      if (char) {\n        // Enable notifications for the characteristic to receive data\n        await char.startNotifications();\n        console.log('Notifications started');\n\n        // Listen for data notifications\n        char.addEventListener('characteristicvaluechanged', (event: any) => {\n          console.log('Received data:', event.target?.value);\n          const value = event.target?.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n\n            // Decode the callbacks per callbacks.md\n\n            // __SCRIPTSENT__\n            if (decodedValue === '__SCRIPTSENT__') {\n              writeToOutput('Script uploaded.\\n');\n            }\n\n            // __PRINT__<TEXT>__PRINT__\n            else if (decodedValue.startsWith('__PRINT__') && decodedValue.endsWith('__PRINT__')) {\n              const text = decodedValue.slice(9, decodedValue.length - 9);\n              writeToOutput(text + '\\n');\n            }\n\n            // __ERROR__<TEXT>__ERROR__\n            else if (decodedValue.startsWith('__ERROR__') && decodedValue.endsWith('__ERROR__')) {\n              const text = decodedValue.slice(9, decodedValue.length - 9);\n              writeToOutput(text + '\\n');\n            }\n\n            // setOutputText((prevOutput) => prevOutput + '\\n' + decodedValue);\n            // setOutputText(decodedValue);\n          }\n        });\n\n        setBluetoothDevice(device);\n        writeToOutput('Connected to Bluetooth device.\\n');\n      } else {\n        // Handle the case when the characteristic is not found\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n\n\n  }, [writeToOutput]);\n\n  const disconnectDevice = useCallback(async () => {\n    if (bluetoothDevice && bluetoothDevice.gatt?.connected) {\n      bluetoothDevice.gatt?.disconnect();\n      console.log('Disconnected');\n    }\n\n    console.log('Disconnected from:', bluetoothDevice?.name);\n\n    setBluetoothDevice(null);\n    setOutputText('');\n  }, [bluetoothDevice]);\n\n  const sendBluetoothData = useCallback(async (data: string) => {\n    if (bluetoothDevice) {\n      const textEncoder = new TextEncoder();\n      const encodedData = textEncoder.encode(data);\n      const service = await bluetoothDevice.gatt?.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb');\n      const char = await service?.getCharacteristic('00001102-0000-1000-8000-00805f9b34fb');\n\n      console.log('Sending data:', data);\n\n      if (char) {\n        await char.writeValue(encodedData);\n      }\n    }\n  }, [bluetoothDevice]);\n\n  return (\n    <BluetoothContext.Provider\n      value={{\n        bluetoothDevice,\n        outputText,\n        connectToDevice,\n        disconnectDevice,\n        sendBluetoothData,\n        writeToOutput,\n        clearOutput,\n      }}\n    >\n      {children}\n    </BluetoothContext.Provider>\n  );\n};\n\nexport const useBluetooth = (): BluetoothContextProps => {\n  const context = useContext(BluetoothContext);\n  if (context === undefined) {\n    throw new Error('useBluetooth must be used within a BluetoothProvider');\n  }\n  return context;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}