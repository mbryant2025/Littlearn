{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport { toolbox } from '../toolbox.js';\nconst createVariableButton = {\n  'type': 'create_int_variable_button',\n  'message0': 'Create New Variable',\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 230\n};\nexport const createIntVariableButtonBlock = Blockly.common.createBlockDefinitionsFromJsonArray([createVariableButton]);\n\n// Create a custom block for declaring an integer variable.\nconst intVars = {\n  'type': 'int_var_declaration',\n  'message0': 'Declare int %1 %2',\n  'args0': [{\n    'type': 'field_input',\n    'name': 'VAR',\n    'text': ''\n  }, {\n    'type': 'input_value',\n    'name': 'VALUE',\n    'check': 'Number',\n    'align': 'RIGHT'\n  }],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': ''\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const intVarsBlock = Blockly.common.createBlockDefinitionsFromJsonArray([intVars]);\n\n// Create a Blockly workspace\nconst workspace = Blockly.inject('blocklyDiv', {\n  toolbox,\n  trashcan: true\n});\n// Add event listener for the 'CREATE_VARIABLE' button\nworkspace.registerButtonCallback('CREATE_VARIABLE', function () {\n  const variableName = prompt('Enter the variable name:');\n  if (variableName) {\n    // Create a new variable using Blockly's createVariable function\n    workspace.createVariable(variableName);\n  }\n});","map":{"version":3,"names":["Blockly","toolbox","createVariableButton","createIntVariableButtonBlock","common","createBlockDefinitionsFromJsonArray","intVars","intVarsBlock","workspace","inject","trashcan","registerButtonCallback","variableName","prompt","createVariable"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/intVars.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\nimport { toolbox } from '../toolbox.js';\n\nconst createVariableButton = {\n    'type': 'create_int_variable_button',\n    'message0': 'Create New Variable',\n    'previousStatement': null,\n    'nextStatement': null,\n    'colour': 230,\n  };\n\n  export const createIntVariableButtonBlock = Blockly.common.createBlockDefinitionsFromJsonArray(\n    [createVariableButton]\n  );\n\n\n// Create a custom block for declaring an integer variable.\nconst intVars = {\n  'type': 'int_var_declaration',\n  'message0': 'Declare int %1 %2',\n  'args0': [\n    {\n      'type': 'field_input',\n      'name': 'VAR',\n      'text': '',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n      'align': 'RIGHT',\n    },\n  ],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const intVarsBlock = Blockly.common.createBlockDefinitionsFromJsonArray([intVars]);\n\n// Create a Blockly workspace\nconst workspace = Blockly.inject('blocklyDiv', {\n  toolbox,\n  trashcan: true,\n});\n// Add event listener for the 'CREATE_VARIABLE' button\nworkspace.registerButtonCallback('CREATE_VARIABLE', function () {\n  const variableName = prompt('Enter the variable name:');\n  if (variableName) {\n    // Create a new variable using Blockly's createVariable function\n    workspace.createVariable(variableName);\n  }\n});\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,cAAc;AACvC,SAASC,OAAO,QAAQ,eAAe;AAEvC,MAAMC,oBAAoB,GAAG;EACzB,MAAM,EAAE,4BAA4B;EACpC,UAAU,EAAE,qBAAqB;EACjC,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE,IAAI;EACrB,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,4BAA4B,GAAGH,OAAO,CAACI,MAAM,CAACC,mCAAmC,CAC5F,CAACH,oBAAoB,CACvB,CAAC;;AAGH;AACA,MAAMI,OAAO,GAAG;EACd,MAAM,EAAE,qBAAqB;EAC7B,UAAU,EAAE,mBAAmB;EAC/B,OAAO,EAAE,CACP;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,KAAK;IACb,MAAM,EAAE;EACV,CAAC,EACD;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,OAAO;IACf,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE;EACX,CAAC,CACF;EACD,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE,IAAI;EACrB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,EAAE;EACb,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGP,OAAO,CAACI,MAAM,CAACC,mCAAmC,CAAC,CAACC,OAAO,CAAC,CAAC;;AAEzF;AACA,MAAME,SAAS,GAAGR,OAAO,CAACS,MAAM,CAAC,YAAY,EAAE;EAC7CR,OAAO;EACPS,QAAQ,EAAE;AACZ,CAAC,CAAC;AACF;AACAF,SAAS,CAACG,sBAAsB,CAAC,iBAAiB,EAAE,YAAY;EAC9D,MAAMC,YAAY,GAAGC,MAAM,CAAC,0BAA0B,CAAC;EACvD,IAAID,YAAY,EAAE;IAChB;IACAJ,SAAS,CAACM,cAAc,CAACF,YAAY,CAAC;EACxC;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}