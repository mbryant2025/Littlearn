{"ast":null,"code":"import * as Blockly from 'blockly/core';\n\n// Create a custom block for performing binary operations.\nconst binaryOp = {\n  'type': 'binaryOp',\n  'message0': '%1 %2 %3',\n  'args0': [{\n    'type': 'input_value',\n    'name': 'A',\n    'check': 'Number'\n  }, {\n    'type': 'field_dropdown',\n    'name': 'OPERATOR',\n    'options': [['+', '+'], ['-', '-'], ['*', '*'], ['/', '/'], ['%', '%'], ['>', '>'], ['<', '<']]\n  }, {\n    'type': 'input_value',\n    'name': 'B',\n    'check': 'Number'\n  }],\n  'inputsInline': true,\n  'output': 'Number',\n  //blockly math color\n  'colour': 230,\n  'tooltip': '',\n  'helpUrl': ''\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const binaryOpBlock = Blockly.common.createBlockDefinitionsFromJsonArray([binaryOp]);","map":{"version":3,"names":["Blockly","binaryOp","binaryOpBlock","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/web/src/blockly/blocks/binaryOp.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\n\n// Create a custom block for performing binary operations.\nconst binaryOp = {\n  'type': 'binaryOp',\n  'message0': '%1 %2 %3',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'A',\n      'check': 'Number',\n    },\n    {\n      'type': 'field_dropdown',\n      'name': 'OPERATOR',\n      'options': [\n        ['+', '+'],\n        ['-', '-'],\n        ['*', '*'],\n        ['/', '/'],\n        ['%', '%'],\n        ['>', '>'],\n        ['<', '<'],\n\n      ],\n    },\n    {\n      'type': 'input_value',\n      'name': 'B',\n      'check': 'Number',\n    },\n  ],\n  'inputsInline': true,\n  'output': 'Number',\n  //blockly math color\n  'colour': 230,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const binaryOpBlock = Blockly.common.createBlockDefinitionsFromJsonArray([binaryOp]);\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,cAAc;;AAEvC;AACA,MAAMC,QAAQ,GAAG;EACf,MAAM,EAAE,UAAU;EAClB,UAAU,EAAE,UAAU;EACtB,OAAO,EAAE,CACP;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,GAAG;IACX,OAAO,EAAE;EACX,CAAC,EACD;IACE,MAAM,EAAE,gBAAgB;IACxB,MAAM,EAAE,UAAU;IAClB,SAAS,EAAE,CACT,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC;EAGd,CAAC,EACD;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,GAAG;IACX,OAAO,EAAE;EACX,CAAC,CACF;EACD,cAAc,EAAE,IAAI;EACpB,QAAQ,EAAE,QAAQ;EAClB;EACA,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,EAAE;EACb,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGF,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACH,QAAQ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}