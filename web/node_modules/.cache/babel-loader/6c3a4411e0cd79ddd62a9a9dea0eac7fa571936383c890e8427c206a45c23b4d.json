{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\nconst storageKey = 'littlearn-workspace';\n\n/**\n * Saves the state of the workspace to browser's local storage.\n * @param {Blockly.Workspace} workspace Blockly workspace to save.\n */\nexport const save = function (workspace) {\n  var _window$localStorage;\n  const data = Blockly.serialization.workspaces.save(workspace);\n  (_window$localStorage = window.localStorage) === null || _window$localStorage === void 0 ? void 0 : _window$localStorage.setItem(storageKey, JSON.stringify(data));\n};\n\n/**\n * Loads saved state from local storage into the given workspace.\n * @param {Blockly.Workspace} workspace Blockly workspace to load into.\n */\nexport const load = function (workspace) {\n  var _window$localStorage2;\n  const data = (_window$localStorage2 = window.localStorage) === null || _window$localStorage2 === void 0 ? void 0 : _window$localStorage2.getItem(storageKey);\n  if (!data) return;\n\n  // Don't emit events during loading.\n  Blockly.Events.disable();\n  Blockly.serialization.workspaces.load(JSON.parse(data), workspace, false);\n  Blockly.Events.enable();\n};","map":{"version":3,"names":["Blockly","storageKey","save","workspace","_window$localStorage","data","serialization","workspaces","window","localStorage","setItem","JSON","stringify","load","_window$localStorage2","getItem","Events","disable","parse","enable"],"sources":["/Users/michaelbryant/Desktop/Littlearn/web/src/blockly/serialization.js"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\n\nconst storageKey = 'littlearn-workspace';\n\n/**\n * Saves the state of the workspace to browser's local storage.\n * @param {Blockly.Workspace} workspace Blockly workspace to save.\n */\nexport const save = function(workspace) {\n  const data = Blockly.serialization.workspaces.save(workspace);\n  window.localStorage?.setItem(storageKey, JSON.stringify(data));\n};\n\n/**\n * Loads saved state from local storage into the given workspace.\n * @param {Blockly.Workspace} workspace Blockly workspace to load into.\n */\nexport const load = function(workspace) {\n  const data = window.localStorage?.getItem(storageKey);\n  if (!data) return;\n\n  // Don't emit events during loading.\n  Blockly.Events.disable();\n  Blockly.serialization.workspaces.load(JSON.parse(data), workspace, false);\n  Blockly.Events.enable();\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,OAAO,MAAM,cAAc;AAEvC,MAAMC,UAAU,GAAG,qBAAqB;;AAExC;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAG,SAAAA,CAASC,SAAS,EAAE;EAAA,IAAAC,oBAAA;EACtC,MAAMC,IAAI,GAAGL,OAAO,CAACM,aAAa,CAACC,UAAU,CAACL,IAAI,CAACC,SAAS,CAAC;EAC7D,CAAAC,oBAAA,GAAAI,MAAM,CAACC,YAAY,cAAAL,oBAAA,uBAAnBA,oBAAA,CAAqBM,OAAO,CAACT,UAAU,EAAEU,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CAAC;AAChE,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,IAAI,GAAG,SAAAA,CAASV,SAAS,EAAE;EAAA,IAAAW,qBAAA;EACtC,MAAMT,IAAI,IAAAS,qBAAA,GAAGN,MAAM,CAACC,YAAY,cAAAK,qBAAA,uBAAnBA,qBAAA,CAAqBC,OAAO,CAACd,UAAU,CAAC;EACrD,IAAI,CAACI,IAAI,EAAE;;EAEX;EACAL,OAAO,CAACgB,MAAM,CAACC,OAAO,CAAC,CAAC;EACxBjB,OAAO,CAACM,aAAa,CAACC,UAAU,CAACM,IAAI,CAACF,IAAI,CAACO,KAAK,CAACb,IAAI,CAAC,EAAEF,SAAS,EAAE,KAAK,CAAC;EACzEH,OAAO,CAACgB,MAAM,CAACG,MAAM,CAAC,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}