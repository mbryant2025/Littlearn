{"ast":null,"code":"import * as Blockly from 'blockly/core';\n\n// Create a custom block called 'if' that has a body.\nconst ifStatement = {\n  'type': 'if',\n  'message0': 'if %1 do',\n  'args0': [{\n    'type': 'input_value',\n    'name': 'CONDITION',\n    'check': 'Boolean'\n  }],\n  'message1': 'do %1',\n  'args1': [{\n    'type': 'input_statement',\n    'name': 'DO'\n  }],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': ''\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const ifBlock = Blockly.common.createBlockDefinitionsFromJsonArray([ifStatement]);","map":{"version":3,"names":["Blockly","ifStatement","ifBlock","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/if.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\n\n// Create a custom block called 'if' that has a body.\nconst ifStatement = {\n  'type': 'if',\n  'message0': 'if %1 do',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'CONDITION',\n      'check': 'Boolean',\n    },\n  ],\n  'message1': 'do %1',\n  'args1': [\n    {\n      'type': 'input_statement',\n      'name': 'DO',\n    },\n  ],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const ifBlock = Blockly.common.createBlockDefinitionsFromJsonArray(\n  [ifStatement]\n);\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,cAAc;;AAEvC;AACA,MAAMC,WAAW,GAAG;EAClB,MAAM,EAAE,IAAI;EACZ,UAAU,EAAE,UAAU;EACtB,OAAO,EAAE,CACP;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,WAAW;IACnB,OAAO,EAAE;EACX,CAAC,CACF;EACD,UAAU,EAAE,OAAO;EACnB,OAAO,EAAE,CACP;IACE,MAAM,EAAE,iBAAiB;IACzB,MAAM,EAAE;EACV,CAAC,CACF;EACD,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE,IAAI;EACrB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,EAAE;EACb,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAGF,OAAO,CAACG,MAAM,CAACC,mCAAmC,CACvE,CAACH,WAAW,CACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}