{"ast":null,"code":"var colorspace = require('colorspace');\n\n/**\n * Prefix the messages with a colored namespace.\n *\n * @param {Array} messages The messages array that is getting written.\n * @param {Object} options Options for diagnostics.\n * @returns {Array} Altered messages array.\n * @public\n */\nmodule.exports = function colorNamespace(args, options) {\n  var namespace = options.namespace;\n  if (options.colors === false) {\n    args[0] = namespace + ': ' + args[0];\n    return args;\n  }\n  var color = colorspace(namespace);\n\n  //\n  // The console API supports a special %c formatter in browsers. This is used\n  // to style console messages with any CSS styling, in our case we want to\n  // use colorize the namespace for clarity. As these are formatters, and\n  // we need to inject our CSS string as second messages argument so it\n  // gets picked up correctly.\n  //\n  args[0] = '%c' + namespace + ':%c ' + args[0];\n  args.splice(1, 0, 'color:' + color, 'color:inherit');\n  return args;\n};","map":{"version":3,"names":["colorspace","require","module","exports","colorNamespace","args","options","namespace","colors","color","splice"],"sources":["/Users/michaelbryant/node_modules/@dabh/diagnostics/modifiers/namespace.js"],"sourcesContent":["var colorspace = require('colorspace');\n\n/**\n * Prefix the messages with a colored namespace.\n *\n * @param {Array} messages The messages array that is getting written.\n * @param {Object} options Options for diagnostics.\n * @returns {Array} Altered messages array.\n * @public\n */\nmodule.exports = function colorNamespace(args, options) {\n  var namespace = options.namespace;\n\n  if (options.colors === false) {\n    args[0] = namespace +': '+ args[0];\n    return args;\n  }\n\n  var color = colorspace(namespace);\n\n  //\n  // The console API supports a special %c formatter in browsers. This is used\n  // to style console messages with any CSS styling, in our case we want to\n  // use colorize the namespace for clarity. As these are formatters, and\n  // we need to inject our CSS string as second messages argument so it\n  // gets picked up correctly.\n  //\n  args[0] = '%c'+ namespace +':%c '+ args[0];\n  args.splice(1, 0, 'color:'+ color, 'color:inherit');\n\n  return args;\n};\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACtD,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAS;EAEjC,IAAID,OAAO,CAACE,MAAM,KAAK,KAAK,EAAE;IAC5BH,IAAI,CAAC,CAAC,CAAC,GAAGE,SAAS,GAAE,IAAI,GAAEF,IAAI,CAAC,CAAC,CAAC;IAClC,OAAOA,IAAI;EACb;EAEA,IAAII,KAAK,GAAGT,UAAU,CAACO,SAAS,CAAC;;EAEjC;EACA;EACA;EACA;EACA;EACA;EACA;EACAF,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAEE,SAAS,GAAE,MAAM,GAAEF,IAAI,CAAC,CAAC,CAAC;EAC1CA,IAAI,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,GAAED,KAAK,EAAE,eAAe,CAAC;EAEnD,OAAOJ,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}