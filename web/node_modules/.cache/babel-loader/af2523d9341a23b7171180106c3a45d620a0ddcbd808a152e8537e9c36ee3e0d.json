{"ast":null,"code":"import*as Blockly from'blockly/core';var button={'type':'button','message0':'get button on port %1','args0':[{'type':'input_value','name':'TEXT','check':'Number','value':0// default value\n}],'output':'Number','tooltip':'Outputs 1 if button is pressed, 0 otherwise','helpUrl':'','colour':127};var swtch={'type':'switch','message0':'get switch on port %1','args0':[{'type':'input_value','name':'TEXT','check':'Number'}],'output':'Number','tooltip':'Outputs 1 if switch is on, 0 otherwise','helpUrl':'','colour':127};var motion={'type':'motion','message0':'get motion sensor on port %1','args0':[{'type':'input_value','name':'TEXT','check':'Number'}],'output':'Number','tooltip':'Outputs 1 if motion is detected, 0 otherwise','helpUrl':'','colour':127};var beam={'type':'beam','message0':'get beam break sensor on port %1','args0':[{'type':'input_value','name':'TEXT','check':'Number'}],'output':'Number','tooltip':'Outputs 1 if motion is detected, 0 otherwise','helpUrl':'','colour':127};export var readport=Blockly.common.createBlockDefinitionsFromJsonArray([button,swtch,motion,beam]);","map":{"version":3,"names":["Blockly","button","swtch","motion","beam","readport","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/readport.js"],"sourcesContent":["\nimport * as Blockly from 'blockly/core';\n\nconst button = {\n  'type': 'button',\n  'message0': 'get button on port %1',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'TEXT',\n      'check': 'Number',\n      'value': 0, // default value\n    },\n  ],\n  'output': 'Number',\n  'tooltip': 'Outputs 1 if button is pressed, 0 otherwise',\n  'helpUrl': '',\n  'colour': 127,\n};\n\nconst swtch = {\n  'type': 'switch',\n  'message0': 'get switch on port %1',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'TEXT',\n      'check': 'Number',\n    },\n  ],\n  'output': 'Number',\n  'tooltip': 'Outputs 1 if switch is on, 0 otherwise',\n  'helpUrl': '',\n  'colour': 127,\n};\n\nconst motion = {\n  'type': 'motion',\n  'message0': 'get motion sensor on port %1',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'TEXT',\n      'check': 'Number',\n    },\n  ],\n  'output': 'Number',\n  'tooltip': 'Outputs 1 if motion is detected, 0 otherwise',\n  'helpUrl': '',\n  'colour': 127,\n};\n\nconst beam = {\n  'type': 'beam',\n  'message0': 'get beam break sensor on port %1',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'TEXT',\n      'check': 'Number',\n    },\n  ],\n  'output': 'Number',\n  'tooltip': 'Outputs 1 if motion is detected, 0 otherwise',\n  'helpUrl': '',\n  'colour': 127,\n};\n\nexport const readport = Blockly.common.createBlockDefinitionsFromJsonArray(\n    [button, swtch, motion, beam]);\n"],"mappings":"AACA,MAAO,GAAK,CAAAA,OAAO,KAAM,cAAc,CAEvC,GAAM,CAAAC,MAAM,CAAG,CACb,MAAM,CAAE,QAAQ,CAChB,UAAU,CAAE,uBAAuB,CACnC,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,QAAQ,CACjB,OAAO,CAAE,CAAG;AACd,CAAC,CACF,CACD,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,6CAA6C,CACxD,SAAS,CAAE,EAAE,CACb,QAAQ,CAAE,GACZ,CAAC,CAED,GAAM,CAAAC,KAAK,CAAG,CACZ,MAAM,CAAE,QAAQ,CAChB,UAAU,CAAE,uBAAuB,CACnC,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,QACX,CAAC,CACF,CACD,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,wCAAwC,CACnD,SAAS,CAAE,EAAE,CACb,QAAQ,CAAE,GACZ,CAAC,CAED,GAAM,CAAAC,MAAM,CAAG,CACb,MAAM,CAAE,QAAQ,CAChB,UAAU,CAAE,8BAA8B,CAC1C,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,QACX,CAAC,CACF,CACD,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,8CAA8C,CACzD,SAAS,CAAE,EAAE,CACb,QAAQ,CAAE,GACZ,CAAC,CAED,GAAM,CAAAC,IAAI,CAAG,CACX,MAAM,CAAE,MAAM,CACd,UAAU,CAAE,kCAAkC,CAC9C,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,QACX,CAAC,CACF,CACD,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,8CAA8C,CACzD,SAAS,CAAE,EAAE,CACb,QAAQ,CAAE,GACZ,CAAC,CAED,MAAO,IAAM,CAAAC,QAAQ,CAAGL,OAAO,CAACM,MAAM,CAACC,mCAAmC,CACtE,CAACN,MAAM,CAAEC,KAAK,CAAEC,MAAM,CAAEC,IAAI,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}