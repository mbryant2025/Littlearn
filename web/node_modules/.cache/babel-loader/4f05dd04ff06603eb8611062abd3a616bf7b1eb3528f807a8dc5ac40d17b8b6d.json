{"ast":null,"code":"import * as Blockly from 'blockly/core';\n\n// Create a custom block called 'add_text' that adds\n// text to the output div on the sample app.\n// This is just an example and you should replace this with your\n// own custom blocks.\nconst fan = {\n  'type': 'fan',\n  'message0': 'turn fan on port %1 to %2',\n  'args0': [{\n    'type': 'input_value',\n    'name': 'PORT',\n    'check': 'Number'\n  }, {\n    'type': 'input_value',\n    'name': 'VALUE',\n    'check': 'Number'\n  }],\n  'inputsInline': true,\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 127,\n  'tooltip': 'Turn a fan on or off',\n  'helpUrl': ''\n};\nconst led = {\n  'type': 'LED',\n  'message0': 'turn LED panel on port %1 to %2',\n  'args0': [{\n    'type': 'input_value',\n    'name': 'PORT',\n    'check': 'Number'\n  }, {\n    'type': 'input_value',\n    'name': 'VALUE',\n    'check': 'Number'\n  }],\n  'inputsInline': true,\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 127,\n  'tooltip': 'Turn a LED panel on or off',\n  'helpUrl': ''\n};\n\n// Create the block definitions for the JSON-only blocks.\n// This does not register their definitions with Blockly.\n// This file has no side effects!\nexport const writeport = Blockly.common.createBlockDefinitionsFromJsonArray([fan, led]);","map":{"version":3,"names":["Blockly","fan","led","writeport","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/writeport.js"],"sourcesContent":["\nimport * as Blockly from 'blockly/core';\n\n// Create a custom block called 'add_text' that adds\n// text to the output div on the sample app.\n// This is just an example and you should replace this with your\n// own custom blocks.\nconst fan = {\n  'type': 'fan',\n  'message0': 'turn fan on port %1 to %2',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'PORT',\n      'check': 'Number',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'inputsInline': true,\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 127,\n  'tooltip': 'Turn a fan on or off',\n  'helpUrl': '',\n};\n\nconst led = {\n  'type': 'LED',\n  'message0': 'turn LED panel on port %1 to %2',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'PORT',\n      'check': 'Number',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'inputsInline': true,\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 127,\n  'tooltip': 'Turn a LED panel on or off',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\n// This does not register their definitions with Blockly.\n// This file has no side effects!\nexport const writeport = Blockly.common.createBlockDefinitionsFromJsonArray(\n    [fan, led]);\n"],"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,cAAc;;AAEvC;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG;EACV,MAAM,EAAE,KAAK;EACb,UAAU,EAAE,2BAA2B;EACvC,OAAO,EAAE,CACP;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,MAAM;IACd,OAAO,EAAE;EACX,CAAC,EACD;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,OAAO;IACf,OAAO,EAAE;EACX,CAAC,CACF;EACD,cAAc,EAAE,IAAI;EACpB,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE,IAAI;EACrB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,sBAAsB;EACjC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,GAAG,GAAG;EACV,MAAM,EAAE,KAAK;EACb,UAAU,EAAE,iCAAiC;EAC7C,OAAO,EAAE,CACP;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,MAAM;IACd,OAAO,EAAE;EACX,CAAC,EACD;IACE,MAAM,EAAE,aAAa;IACrB,MAAM,EAAE,OAAO;IACf,OAAO,EAAE;EACX,CAAC,CACF;EACD,cAAc,EAAE,IAAI;EACpB,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE,IAAI;EACrB,QAAQ,EAAE,GAAG;EACb,SAAS,EAAE,4BAA4B;EACvC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGH,OAAO,CAACI,MAAM,CAACC,mCAAmC,CACvE,CAACJ,GAAG,EAAEC,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}