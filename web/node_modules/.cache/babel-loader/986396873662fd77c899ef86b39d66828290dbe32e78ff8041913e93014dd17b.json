{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { sevenseg } from '../blockly/blocks/sevenseg';\nimport { readport } from \"../blockly/blocks/readport\";\nimport { writeport } from \"../blockly/blocks/writeport\";\nimport { intVarDeclarationBlock, useVariableBlockDef, assignVariableBlockDef } from '../blockly/blocks/intVars';\nimport { floatVarDeclarationBlock } from '../blockly/blocks/floatVars';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport './styles/Blockly.css';\nimport { useGeneratedCode } from '../GeneratedCodeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlocklyComponent = () => {\n  _s();\n  const {\n    setGeneratedCode\n  } = useGeneratedCode();\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n    Blockly.common.defineBlocks(useVariableBlockDef);\n    Blockly.common.defineBlocks(sevenseg);\n    Blockly.common.defineBlocks(readport);\n    Blockly.common.defineBlocks(writeport);\n    Blockly.common.defineBlocks(floatVarDeclarationBlock);\n    Blockly.common.defineBlocks(assignVariableBlockDef);\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n    const categoryStyles = {\n      io_category: {\n        colour: '#5CA699'\n      },\n      control_category: {\n        colour: '#5C81A6'\n      },\n      math_category: {\n        colour: '#A65C81'\n      },\n      variables_category: {\n        colour: '#81A65C'\n      }\n    };\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolbox\n    });\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n    const runCode = () => {\n      let code = javascriptGenerator.workspaceToCode(workspace);\n\n      // Hacky workaround for the existing JS implementation\n      // If there are any variables, delete the first two lines\n\n      if (code.includes('var ')) {\n        code = code.split('\\n').slice(3).join('\\n');\n      }\n\n      //set the code in the generatedCode context\n      setGeneratedCode(code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>'));\n    };\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, [setGeneratedCode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"block-chop\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        height: '100%',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyToolboxDiv\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(BlocklyComponent, \"LR9A9hsRhbjl92iYm4ArWv1vRkU=\", false, function () {\n  return [useGeneratedCode];\n});\n_c = BlocklyComponent;\nexport default BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["React","useEffect","Blockly","printBlock","waitBlock","ifBlock","binaryOpBlock","whileBlock","sevenseg","readport","writeport","intVarDeclarationBlock","useVariableBlockDef","assignVariableBlockDef","floatVarDeclarationBlock","forBlock","javascriptGenerator","toolbox","useGeneratedCode","jsxDEV","_jsxDEV","BlocklyComponent","_s","setGeneratedCode","common","defineBlocks","Object","assign","categoryStyles","io_category","colour","control_category","math_category","variables_category","workspace","inject","registerButtonCallback","console","log","variableName","prompt","createVariable","getAllVariables","runCode","code","workspaceToCode","includes","split","slice","join","replace","addChangeListener","className","children","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","display","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { sevenseg } from '../blockly/blocks/sevenseg';\nimport { readport } from \"../blockly/blocks/readport\";\nimport { writeport } from \"../blockly/blocks/writeport\";\nimport { intVarDeclarationBlock, useVariableBlockDef, assignVariableBlockDef } from '../blockly/blocks/intVars';\nimport { floatVarDeclarationBlock } from '../blockly/blocks/floatVars';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport './styles/Blockly.css';\nimport { useGeneratedCode } from '../GeneratedCodeContext';\n\nconst BlocklyComponent: React.FC = () => {\n\n  const { setGeneratedCode } = useGeneratedCode();\n\n\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n    Blockly.common.defineBlocks(useVariableBlockDef);\n    Blockly.common.defineBlocks(sevenseg);\n    Blockly.common.defineBlocks(readport);\n    Blockly.common.defineBlocks(writeport);\n    Blockly.common.defineBlocks(floatVarDeclarationBlock);\n    Blockly.common.defineBlocks(assignVariableBlockDef);\n\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n\n    const categoryStyles = {\n      io_category: {\n        colour: '#5CA699',\n      },\n      control_category: {\n        colour: '#5C81A6',\n      },\n      math_category: {\n        colour: '#A65C81',\n      },\n      variables_category: {\n        colour: '#81A65C',\n      },\n    };\n\n    const workspace = Blockly.inject('blocklyDiv', { toolbox: toolbox});\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n\n    const runCode = () => {\n      let code = javascriptGenerator.workspaceToCode(workspace);\n\n      // Hacky workaround for the existing JS implementation\n      // If there are any variables, delete the first two lines\n\n      if (code.includes('var ')) {\n        code = code.split('\\n').slice(3).join('\\n');\n      }\n\n      //set the code in the generatedCode context\n      setGeneratedCode(code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>'));\n\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, [setGeneratedCode]);\n\n\n  return (\n    <div className=\"block-chop\">\n      <div id=\"blocklyDiv\" style={{ height: '100%', width: '100%' }}></div>\n      <div id=\"blocklyToolboxDiv\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}