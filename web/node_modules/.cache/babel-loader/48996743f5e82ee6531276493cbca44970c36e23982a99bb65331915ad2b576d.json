{"ast":null,"code":"'use strict';\n\nconst util = require('util');\nconst Writable = require('readable-stream/lib/_stream_writable.js');\nconst {\n  LEVEL\n} = require('triple-beam');\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\nconst TransportStream = module.exports = function TransportStream(options = {}) {\n  Writable.call(this, {\n    objectMode: true,\n    highWaterMark: options.highWaterMark\n  });\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', logger => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    this.levels = logger.levels;\n    this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', src => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === this.parent) {\n      this.parent = null;\n      if (this.close) {\n        this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || info.exception === true && !this.handleExceptions) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  const level = this.level || this.parent && this.parent.level;\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n    return this.log(transformed, callback);\n  }\n  this._writableState.sync = false;\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    const infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n  for (let i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  const info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  const level = this.level || this.parent && this.parent.level;\n\n  // Immediately check the average case: log level filtering.\n  if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};","map":{"version":3,"names":["util","require","Writable","LEVEL","TransportStream","module","exports","options","call","objectMode","highWaterMark","format","level","handleExceptions","handleRejections","silent","log","logv","close","once","logger","levels","parent","src","inherits","prototype","_write","info","enc","callback","exception","errState","transformed","transform","Object","assign","err","_writableState","sync","_writev","chunks","infos","filter","_accept","length","i","chunk","write","_nop","undefined"],"sources":["/Users/michaelbryant/node_modules/winston-transport/modern.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst Writable = require('readable-stream/lib/_stream_writable.js');\nconst { LEVEL } = require('triple-beam');\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\nconst TransportStream = module.exports = function TransportStream(options = {}) {\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\n\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', logger => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    this.levels = logger.levels;\n    this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', src => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === this.parent) {\n      this.parent = null;\n      if (this.close) {\n        this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n  this._writableState.sync = false;\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    const infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(\n        Object.assign({}, chunks[i].chunk),\n        this.format.options\n      );\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  const info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  // Immediately check the average case: log level filtering.\n  if (\n    info.exception === true ||\n    !level ||\n    this.levels[level] >= this.levels[info[LEVEL]]\n  ) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}