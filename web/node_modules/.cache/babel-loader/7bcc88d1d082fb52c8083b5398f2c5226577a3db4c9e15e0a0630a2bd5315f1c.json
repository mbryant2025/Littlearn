{"ast":null,"code":"import*as Blockly from'blockly/core';// Create a custom block called 'add_text' that adds\n// text to the output div on the sample app.\n// This is just an example and you should replace this with your\n// own custom blocks.\nvar fan={'type':'fan','message0':'turn fan on port %1 to %2','args0':[{'type':'input_value','name':'PORT','check':'Number'},{'type':'input_value','name':'VALUE','check':'Number'}],'inputsInline':true,'previousStatement':null,'nextStatement':null,'colour':127,'tooltip':'Turn a fan on or off','helpUrl':''};var led={'type':'LED','message0':'turn LED panel on port %1 to %2','args0':[{'type':'input_value','name':'PORT','check':'Number'},{'type':'input_value','name':'VALUE','check':'Number'}],'inputsInline':true,'previousStatement':null,'nextStatement':null,'colour':127,'tooltip':'Turn a LED panel on or off','helpUrl':''};// Create the block definitions for the JSON-only blocks.\n// This does not register their definitions with Blockly.\n// This file has no side effects!\nexport var writeport=Blockly.common.createBlockDefinitionsFromJsonArray([fan,led]);","map":{"version":3,"names":["Blockly","fan","led","writeport","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/writeport.js"],"sourcesContent":["\nimport * as Blockly from 'blockly/core';\n\n// Create a custom block called 'add_text' that adds\n// text to the output div on the sample app.\n// This is just an example and you should replace this with your\n// own custom blocks.\nconst fan = {\n  'type': 'fan',\n  'message0': 'turn fan on port %1 to %2',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'PORT',\n      'check': 'Number',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'inputsInline': true,\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 127,\n  'tooltip': 'Turn a fan on or off',\n  'helpUrl': '',\n};\n\nconst led = {\n  'type': 'LED',\n  'message0': 'turn LED panel on port %1 to %2',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'PORT',\n      'check': 'Number',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'inputsInline': true,\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 127,\n  'tooltip': 'Turn a LED panel on or off',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\n// This does not register their definitions with Blockly.\n// This file has no side effects!\nexport const writeport = Blockly.common.createBlockDefinitionsFromJsonArray(\n    [fan, led]);\n"],"mappings":"AACA,MAAO,GAAK,CAAAA,OAAO,KAAM,cAAc,CAEvC;AACA;AACA;AACA;AACA,GAAM,CAAAC,GAAG,CAAG,CACV,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,2BAA2B,CACvC,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,QACX,CAAC,CACD,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,QACX,CAAC,CACF,CACD,cAAc,CAAE,IAAI,CACpB,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,GAAG,CACb,SAAS,CAAE,sBAAsB,CACjC,SAAS,CAAE,EACb,CAAC,CAED,GAAM,CAAAC,GAAG,CAAG,CACV,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,iCAAiC,CAC7C,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,QACX,CAAC,CACD,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,QACX,CAAC,CACF,CACD,cAAc,CAAE,IAAI,CACpB,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,GAAG,CACb,SAAS,CAAE,4BAA4B,CACvC,SAAS,CAAE,EACb,CAAC,CAED;AACA;AACA;AACA,MAAO,IAAM,CAAAC,SAAS,CAAGH,OAAO,CAACI,MAAM,CAACC,mCAAmC,CACvE,CAACJ,GAAG,CAAEC,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}