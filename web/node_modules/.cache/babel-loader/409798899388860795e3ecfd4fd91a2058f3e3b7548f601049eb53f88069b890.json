{"ast":null,"code":"import*as Blockly from'blockly/core';// Create a custom block called 'if' that has a body.\nvar whileStatement={'type':'while','message0':'while %1','args0':[{'type':'input_value','name':'CONDITION','check':'Number'}],'message1':'%1','args1':[{'type':'input_statement','name':'DO'}],'previousStatement':null,'nextStatement':null,'colour':0,'tooltip':'','helpUrl':''};// Create the block definitions for the JSON-only blocks.\nexport var whileBlock=Blockly.common.createBlockDefinitionsFromJsonArray([whileStatement]);","map":{"version":3,"names":["Blockly","whileStatement","whileBlock","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/while.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\n\n// Create a custom block called 'if' that has a body.\nconst whileStatement = {\n  'type': 'while',\n  'message0': 'while %1',\n  'args0': [\n    {\n      'type': 'input_value',\n      'name': 'CONDITION',\n      'check': 'Number',\n    },\n  ],\n  'message1': '%1',\n  'args1': [\n    {\n      'type': 'input_statement',\n      'name': 'DO',\n    },\n  ],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 0,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const whileBlock = Blockly.common.createBlockDefinitionsFromJsonArray(\n  [whileStatement]\n);\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,OAAO,KAAM,cAAc,CAEvC;AACA,GAAM,CAAAC,cAAc,CAAG,CACrB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,CACP,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,WAAW,CACnB,OAAO,CAAE,QACX,CAAC,CACF,CACD,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CACP,CACE,MAAM,CAAE,iBAAiB,CACzB,MAAM,CAAE,IACV,CAAC,CACF,CACD,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,CAAC,CACX,SAAS,CAAE,EAAE,CACb,SAAS,CAAE,EACb,CAAC,CAED;AACA,MAAO,IAAM,CAAAC,UAAU,CAAGF,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAC1E,CAACH,cAAc,CACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}