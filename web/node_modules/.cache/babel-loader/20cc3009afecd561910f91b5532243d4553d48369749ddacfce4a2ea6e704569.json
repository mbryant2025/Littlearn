{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { sevenseg } from '../blockly/blocks/sevenseg';\nimport { readport } from \"../blockly/blocks/readport\";\nimport { writeport } from \"../blockly/blocks/writeport\";\nimport { intVarDeclarationBlock, useVariableBlockDef } from '../blockly/blocks/intVars';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport { SendScript } from '../SendScript';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlocklyComponent = () => {\n  _s();\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n    Blockly.common.defineBlocks(useVariableBlockDef);\n    Blockly.common.defineBlocks(sevenseg);\n    Blockly.common.defineBlocks(readport);\n    Blockly.common.defineBlocks(writeport);\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolbox\n    });\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      let code = javascriptGenerator.workspaceToCode(workspace);\n\n      // Hacky workaround for the existing JS implementation\n      // If there are any variables, delete the first two lines\n\n      if (code.includes('var ')) {\n        code = code.split('\\n').slice(3).join('\\n');\n      }\n      console.log(code);\n\n      //set the code in the code div\n      const element = document.getElementById('generatedCode');\n      if (element) {\n        //set innerHTML to code while maintaining formatting\n        element.innerHTML = code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n      }\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n  const sendScript = SendScript();\n  const handleClick = e => {\n    var _element$innerHTML;\n    const element = document.getElementById('generatedCode');\n    const script = \"{\" + (element === null || element === void 0 ? void 0 : (_element$innerHTML = element.innerHTML) === null || _element$innerHTML === void 0 ? void 0 : _element$innerHTML.replace(/<br>/g, '').replace(/&gt;/g, '>')) + \"}\";\n    e.preventDefault();\n    sendScript.sendData(script);\n    console.log(\"script:\" + script);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Upload Blockly\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        height: '480px',\n        width: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyToolboxDiv\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"generatedCode\",\n      style: {\n        position: 'absolute',\n        top: '0px',\n        left: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(BlocklyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BlocklyComponent;\nexport default BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["React","useEffect","Blockly","printBlock","waitBlock","ifBlock","binaryOpBlock","whileBlock","sevenseg","readport","writeport","intVarDeclarationBlock","useVariableBlockDef","forBlock","javascriptGenerator","toolbox","SendScript","jsxDEV","_jsxDEV","BlocklyComponent","_s","common","defineBlocks","Object","assign","workspace","inject","registerButtonCallback","console","log","variableName","prompt","createVariable","getAllVariables","runCode","code","workspaceToCode","includes","split","slice","join","element","document","getElementById","innerHTML","replace","addChangeListener","sendScript","handleClick","e","_element$innerHTML","script","preventDefault","sendData","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","width","display","position","top","left","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { sevenseg } from '../blockly/blocks/sevenseg';\nimport { readport } from \"../blockly/blocks/readport\";\nimport { writeport } from \"../blockly/blocks/writeport\";\nimport { intVarDeclarationBlock, useVariableBlockDef } from '../blockly/blocks/intVars';\nimport { floatVarDeclarationBlock } from '../blockly/blocks/intVars';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport { SendScript } from '../SendScript';\n\nconst BlocklyComponent: React.FC = () => {\n\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n    Blockly.common.defineBlocks(useVariableBlockDef);\n    Blockly.common.defineBlocks(sevenseg); \n    Blockly.common.defineBlocks(readport); \n    Blockly.common.defineBlocks(writeport); \n    Object.assign(javascriptGenerator.forBlock, forBlock);\n\n    const workspace = Blockly.inject('blocklyDiv', { toolbox: toolbox });\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      let code = javascriptGenerator.workspaceToCode(workspace);\n\n      // Hacky workaround for the existing JS implementation\n      // If there are any variables, delete the first two lines\n\n      if(code.includes('var ')) {\n        code = code.split('\\n').slice(3).join('\\n');\n      }\n\n\n\n      console.log(code);\n\n      //set the code in the code div\n      const element = document.getElementById('generatedCode');\n      if (element) {\n        //set innerHTML to code while maintaining formatting\n        element.innerHTML = code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n      }\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n\n    const sendScript = SendScript();\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      const element = document.getElementById('generatedCode');\n      const script = \"{\" + element?.innerHTML?.replace(/<br>/g, '').replace(/&gt;/g, '>') + \"}\";\n      e.preventDefault();\n      sendScript.sendData(script);\n      console.log(\"script:\" + script);\n    } \n\n  return (\n    <div>\n      <button onClick={handleClick}>\n        Upload Blockly\n      </button> \n      <div id=\"blocklyDiv\" style={{ height: '480px', width: '600px' }}></div>\n      <div id=\"blocklyToolboxDiv\" style={{ display: 'none' }}></div>\n      <div id=\"generatedCode\" style={{ position: 'absolute', top: '0px', left: '500px' }}></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}