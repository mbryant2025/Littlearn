{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { intVarDeclarationBlock } from '../blockly/blocks/intVars';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlocklyComponent = () => {\n  _s();\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolbox\n    });\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = javascriptGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      //set the code in the code div\n      const element = document.getElementById('generatedCode');\n      if (element) {\n        //set innerHTML to code while maintaining formatting\n        element.innerHTML = code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n      }\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        height: '480px',\n        width: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyToolboxDiv\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"generatedCode\",\n      style: {\n        position: 'absolute',\n        top: '0px',\n        left: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(BlocklyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BlocklyComponent;\nexport default BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["React","useEffect","Blockly","printBlock","waitBlock","ifBlock","binaryOpBlock","whileBlock","intVarDeclarationBlock","forBlock","javascriptGenerator","toolbox","jsxDEV","_jsxDEV","BlocklyComponent","_s","common","defineBlocks","Object","assign","workspace","inject","registerButtonCallback","console","log","variableName","prompt","createVariable","getAllVariables","runCode","code","workspaceToCode","element","document","getElementById","innerHTML","replace","addChangeListener","children","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","display","position","top","left","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { binaryOpBlock } from '../blockly/blocks/binaryOp';\nimport { whileBlock } from '../blockly/blocks/while';\nimport { intVarDeclarationBlock, useVariableBlockDef } from '../blockly/blocks/intVars';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\n\n\nconst BlocklyComponent: React.FC = () => {\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock);\n    Blockly.common.defineBlocks(waitBlock);\n    Blockly.common.defineBlocks(ifBlock);\n    Blockly.common.defineBlocks(binaryOpBlock);\n    Blockly.common.defineBlocks(whileBlock);\n    Blockly.common.defineBlocks(intVarDeclarationBlock);\n\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n\n\n    const workspace = Blockly.inject('blocklyDiv', { toolbox: toolbox });\n\n    // Add event listener for the 'CREATE_INT_VARIABLE' button\n    workspace.registerButtonCallback('CREATE_INT_VARIABLE', function () {\n      console.log('Create int variable button clicked!');\n      const variableName = prompt('Enter the variable name:');\n      if (variableName) {\n        // Create a new variable using Blockly's createVariable function\n        workspace.createVariable(variableName, 'Number'); // 'Number' indicates the type of the variable\n      }\n      //print workspace variables\n      console.log(workspace.getAllVariables());\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = javascriptGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      //set the code in the code div\n      const element = document.getElementById('generatedCode');\n      if (element) {\n        //set innerHTML to code while maintaining formatting\n        element.innerHTML = code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n      }\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n\n  return (\n    <div>\n      <div id=\"blocklyDiv\" style={{ height: '480px', width: '600px' }}></div>\n      <div id=\"blocklyToolboxDiv\" style={{ display: 'none' }}></div>\n      <div id=\"generatedCode\" style={{ position: 'absolute', top: '0px', left: '500px' }}></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}