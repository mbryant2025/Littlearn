{"ast":null,"code":"'use strict';\n\nconst {\n  hasOwnProperty\n} = Object.prototype;\nconst stringify = configure();\n\n// @ts-expect-error\nstringify.configure = configure;\n// @ts-expect-error\nstringify.stringify = stringify;\n\n// @ts-expect-error\nstringify.default = stringify;\n\n// @ts-expect-error used for named export\nexports.stringify = stringify;\n// @ts-expect-error used for named export\nexports.configure = configure;\nmodule.exports = stringify;\n\n// eslint-disable-next-line no-control-regex\nconst strEscapeSequencesRegExp = /[\\u0000-\\u001f\\u0022\\u005c\\ud800-\\udfff]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?:[^\\ud800-\\udbff]|^)[\\udc00-\\udfff]/;\n\n// Escape C0 control characters, double quotes, the backslash and every code\n// unit with a numeric value in the inclusive range 0xD800 to 0xDFFF.\nfunction strEscape(str) {\n  // Some magic numbers that worked out fine while benchmarking with v8 8.0\n  if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {\n    return `\"${str}\"`;\n  }\n  return JSON.stringify(str);\n}\nfunction insertSort(array) {\n  // Insertion sort is very efficient for small input sizes but it has a bad\n  // worst case complexity. Thus, use native array sort for bigger values.\n  if (array.length > 2e2) {\n    return array.sort();\n  }\n  for (let i = 1; i < array.length; i++) {\n    const currentValue = array[i];\n    let position = i;\n    while (position !== 0 && array[position - 1] > currentValue) {\n      array[position] = array[position - 1];\n      position--;\n    }\n    array[position] = currentValue;\n  }\n  return array;\n}\nconst typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Int8Array())), Symbol.toStringTag).get;\nfunction isTypedArrayWithEntries(value) {\n  return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0;\n}\nfunction stringifyTypedArray(array, separator, maximumBreadth) {\n  if (array.length < maximumBreadth) {\n    maximumBreadth = array.length;\n  }\n  const whitespace = separator === ',' ? '' : ' ';\n  let res = `\"0\":${whitespace}${array[0]}`;\n  for (let i = 1; i < maximumBreadth; i++) {\n    res += `${separator}\"${i}\":${whitespace}${array[i]}`;\n  }\n  return res;\n}\nfunction getCircularValueOption(options) {\n  if (hasOwnProperty.call(options, 'circularValue')) {\n    const circularValue = options.circularValue;\n    if (typeof circularValue === 'string') {\n      return `\"${circularValue}\"`;\n    }\n    if (circularValue == null) {\n      return circularValue;\n    }\n    if (circularValue === Error || circularValue === TypeError) {\n      return {\n        toString() {\n          throw new TypeError('Converting circular structure to JSON');\n        }\n      };\n    }\n    throw new TypeError('The \"circularValue\" argument must be of type string or the value null or undefined');\n  }\n  return '\"[Circular]\"';\n}\nfunction getBooleanOption(options, key) {\n  let value;\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key];\n    if (typeof value !== 'boolean') {\n      throw new TypeError(`The \"${key}\" argument must be of type boolean`);\n    }\n  }\n  return value === undefined ? true : value;\n}\nfunction getPositiveIntegerOption(options, key) {\n  let value;\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key];\n    if (typeof value !== 'number') {\n      throw new TypeError(`The \"${key}\" argument must be of type number`);\n    }\n    if (!Number.isInteger(value)) {\n      throw new TypeError(`The \"${key}\" argument must be an integer`);\n    }\n    if (value < 1) {\n      throw new RangeError(`The \"${key}\" argument must be >= 1`);\n    }\n  }\n  return value === undefined ? Infinity : value;\n}\nfunction getItemCount(number) {\n  if (number === 1) {\n    return '1 item';\n  }\n  return `${number} items`;\n}\nfunction getUniqueReplacerSet(replacerArray) {\n  const replacerSet = new Set();\n  for (const value of replacerArray) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      replacerSet.add(String(value));\n    }\n  }\n  return replacerSet;\n}\nfunction getStrictOption(options) {\n  if (hasOwnProperty.call(options, 'strict')) {\n    const value = options.strict;\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The \"strict\" argument must be of type boolean');\n    }\n    if (value) {\n      return value => {\n        let message = `Object can not safely be stringified. Received type ${typeof value}`;\n        if (typeof value !== 'function') message += ` (${value.toString()})`;\n        throw new Error(message);\n      };\n    }\n  }\n}\nfunction configure(options) {\n  options = {\n    ...options\n  };\n  const fail = getStrictOption(options);\n  if (fail) {\n    if (options.bigint === undefined) {\n      options.bigint = false;\n    }\n    if (!('circularValue' in options)) {\n      options.circularValue = Error;\n    }\n  }\n  const circularValue = getCircularValueOption(options);\n  const bigint = getBooleanOption(options, 'bigint');\n  const deterministic = getBooleanOption(options, 'deterministic');\n  const maximumDepth = getPositiveIntegerOption(options, 'maximumDepth');\n  const maximumBreadth = getPositiveIntegerOption(options, 'maximumBreadth');\n  function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {\n    let value = parent[key];\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key);\n    }\n    value = replacer.call(parent, key, value);\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value);\n      case 'object':\n        {\n          if (value === null) {\n            return 'null';\n          }\n          if (stack.indexOf(value) !== -1) {\n            return circularValue;\n          }\n          let res = '';\n          let join = ',';\n          const originalIndentation = indentation;\n          if (Array.isArray(value)) {\n            if (value.length === 0) {\n              return '[]';\n            }\n            if (maximumDepth < stack.length + 1) {\n              return '\"[Array]\"';\n            }\n            stack.push(value);\n            if (spacer !== '') {\n              indentation += spacer;\n              res += `\\n${indentation}`;\n              join = `,\\n${indentation}`;\n            }\n            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);\n            let i = 0;\n            for (; i < maximumValuesToStringify - 1; i++) {\n              const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);\n              res += tmp !== undefined ? tmp : 'null';\n              res += join;\n            }\n            const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);\n            res += tmp !== undefined ? tmp : 'null';\n            if (value.length - 1 > maximumBreadth) {\n              const removedKeys = value.length - maximumBreadth - 1;\n              res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`;\n            }\n            if (spacer !== '') {\n              res += `\\n${originalIndentation}`;\n            }\n            stack.pop();\n            return `[${res}]`;\n          }\n          let keys = Object.keys(value);\n          const keyLength = keys.length;\n          if (keyLength === 0) {\n            return '{}';\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Object]\"';\n          }\n          let whitespace = '';\n          let separator = '';\n          if (spacer !== '') {\n            indentation += spacer;\n            join = `,\\n${indentation}`;\n            whitespace = ' ';\n          }\n          const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);\n          if (deterministic && !isTypedArrayWithEntries(value)) {\n            keys = insertSort(keys);\n          }\n          stack.push(value);\n          for (let i = 0; i < maximumPropertiesToStringify; i++) {\n            const key = keys[i];\n            const tmp = stringifyFnReplacer(key, value, stack, replacer, spacer, indentation);\n            if (tmp !== undefined) {\n              res += `${separator}${strEscape(key)}:${whitespace}${tmp}`;\n              separator = join;\n            }\n          }\n          if (keyLength > maximumBreadth) {\n            const removedKeys = keyLength - maximumBreadth;\n            res += `${separator}\"...\":${whitespace}\"${getItemCount(removedKeys)} not stringified\"`;\n            separator = join;\n          }\n          if (spacer !== '' && separator.length > 1) {\n            res = `\\n${indentation}${res}\\n${originalIndentation}`;\n          }\n          stack.pop();\n          return `{${res}}`;\n        }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null';\n      case 'boolean':\n        return value === true ? 'true' : 'false';\n      case 'undefined':\n        return undefined;\n      case 'bigint':\n        if (bigint) {\n          return String(value);\n        }\n      // fallthrough\n      default:\n        return fail ? fail(value) : undefined;\n    }\n  }\n  function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key);\n    }\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value);\n      case 'object':\n        {\n          if (value === null) {\n            return 'null';\n          }\n          if (stack.indexOf(value) !== -1) {\n            return circularValue;\n          }\n          const originalIndentation = indentation;\n          let res = '';\n          let join = ',';\n          if (Array.isArray(value)) {\n            if (value.length === 0) {\n              return '[]';\n            }\n            if (maximumDepth < stack.length + 1) {\n              return '\"[Array]\"';\n            }\n            stack.push(value);\n            if (spacer !== '') {\n              indentation += spacer;\n              res += `\\n${indentation}`;\n              join = `,\\n${indentation}`;\n            }\n            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);\n            let i = 0;\n            for (; i < maximumValuesToStringify - 1; i++) {\n              const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);\n              res += tmp !== undefined ? tmp : 'null';\n              res += join;\n            }\n            const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);\n            res += tmp !== undefined ? tmp : 'null';\n            if (value.length - 1 > maximumBreadth) {\n              const removedKeys = value.length - maximumBreadth - 1;\n              res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`;\n            }\n            if (spacer !== '') {\n              res += `\\n${originalIndentation}`;\n            }\n            stack.pop();\n            return `[${res}]`;\n          }\n          stack.push(value);\n          let whitespace = '';\n          if (spacer !== '') {\n            indentation += spacer;\n            join = `,\\n${indentation}`;\n            whitespace = ' ';\n          }\n          let separator = '';\n          for (const key of replacer) {\n            const tmp = stringifyArrayReplacer(key, value[key], stack, replacer, spacer, indentation);\n            if (tmp !== undefined) {\n              res += `${separator}${strEscape(key)}:${whitespace}${tmp}`;\n              separator = join;\n            }\n          }\n          if (spacer !== '' && separator.length > 1) {\n            res = `\\n${indentation}${res}\\n${originalIndentation}`;\n          }\n          stack.pop();\n          return `{${res}}`;\n        }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null';\n      case 'boolean':\n        return value === true ? 'true' : 'false';\n      case 'undefined':\n        return undefined;\n      case 'bigint':\n        if (bigint) {\n          return String(value);\n        }\n      // fallthrough\n      default:\n        return fail ? fail(value) : undefined;\n    }\n  }\n  function stringifyIndent(key, value, stack, spacer, indentation) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value);\n      case 'object':\n        {\n          if (value === null) {\n            return 'null';\n          }\n          if (typeof value.toJSON === 'function') {\n            value = value.toJSON(key);\n            // Prevent calling `toJSON` again.\n            if (typeof value !== 'object') {\n              return stringifyIndent(key, value, stack, spacer, indentation);\n            }\n            if (value === null) {\n              return 'null';\n            }\n          }\n          if (stack.indexOf(value) !== -1) {\n            return circularValue;\n          }\n          const originalIndentation = indentation;\n          if (Array.isArray(value)) {\n            if (value.length === 0) {\n              return '[]';\n            }\n            if (maximumDepth < stack.length + 1) {\n              return '\"[Array]\"';\n            }\n            stack.push(value);\n            indentation += spacer;\n            let res = `\\n${indentation}`;\n            const join = `,\\n${indentation}`;\n            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);\n            let i = 0;\n            for (; i < maximumValuesToStringify - 1; i++) {\n              const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);\n              res += tmp !== undefined ? tmp : 'null';\n              res += join;\n            }\n            const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);\n            res += tmp !== undefined ? tmp : 'null';\n            if (value.length - 1 > maximumBreadth) {\n              const removedKeys = value.length - maximumBreadth - 1;\n              res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`;\n            }\n            res += `\\n${originalIndentation}`;\n            stack.pop();\n            return `[${res}]`;\n          }\n          let keys = Object.keys(value);\n          const keyLength = keys.length;\n          if (keyLength === 0) {\n            return '{}';\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Object]\"';\n          }\n          indentation += spacer;\n          const join = `,\\n${indentation}`;\n          let res = '';\n          let separator = '';\n          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);\n          if (isTypedArrayWithEntries(value)) {\n            res += stringifyTypedArray(value, join, maximumBreadth);\n            keys = keys.slice(value.length);\n            maximumPropertiesToStringify -= value.length;\n            separator = join;\n          }\n          if (deterministic) {\n            keys = insertSort(keys);\n          }\n          stack.push(value);\n          for (let i = 0; i < maximumPropertiesToStringify; i++) {\n            const key = keys[i];\n            const tmp = stringifyIndent(key, value[key], stack, spacer, indentation);\n            if (tmp !== undefined) {\n              res += `${separator}${strEscape(key)}: ${tmp}`;\n              separator = join;\n            }\n          }\n          if (keyLength > maximumBreadth) {\n            const removedKeys = keyLength - maximumBreadth;\n            res += `${separator}\"...\": \"${getItemCount(removedKeys)} not stringified\"`;\n            separator = join;\n          }\n          if (separator !== '') {\n            res = `\\n${indentation}${res}\\n${originalIndentation}`;\n          }\n          stack.pop();\n          return `{${res}}`;\n        }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null';\n      case 'boolean':\n        return value === true ? 'true' : 'false';\n      case 'undefined':\n        return undefined;\n      case 'bigint':\n        if (bigint) {\n          return String(value);\n        }\n      // fallthrough\n      default:\n        return fail ? fail(value) : undefined;\n    }\n  }\n  function stringifySimple(key, value, stack) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value);\n      case 'object':\n        {\n          if (value === null) {\n            return 'null';\n          }\n          if (typeof value.toJSON === 'function') {\n            value = value.toJSON(key);\n            // Prevent calling `toJSON` again\n            if (typeof value !== 'object') {\n              return stringifySimple(key, value, stack);\n            }\n            if (value === null) {\n              return 'null';\n            }\n          }\n          if (stack.indexOf(value) !== -1) {\n            return circularValue;\n          }\n          let res = '';\n          if (Array.isArray(value)) {\n            if (value.length === 0) {\n              return '[]';\n            }\n            if (maximumDepth < stack.length + 1) {\n              return '\"[Array]\"';\n            }\n            stack.push(value);\n            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);\n            let i = 0;\n            for (; i < maximumValuesToStringify - 1; i++) {\n              const tmp = stringifySimple(String(i), value[i], stack);\n              res += tmp !== undefined ? tmp : 'null';\n              res += ',';\n            }\n            const tmp = stringifySimple(String(i), value[i], stack);\n            res += tmp !== undefined ? tmp : 'null';\n            if (value.length - 1 > maximumBreadth) {\n              const removedKeys = value.length - maximumBreadth - 1;\n              res += `,\"... ${getItemCount(removedKeys)} not stringified\"`;\n            }\n            stack.pop();\n            return `[${res}]`;\n          }\n          let keys = Object.keys(value);\n          const keyLength = keys.length;\n          if (keyLength === 0) {\n            return '{}';\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Object]\"';\n          }\n          let separator = '';\n          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);\n          if (isTypedArrayWithEntries(value)) {\n            res += stringifyTypedArray(value, ',', maximumBreadth);\n            keys = keys.slice(value.length);\n            maximumPropertiesToStringify -= value.length;\n            separator = ',';\n          }\n          if (deterministic) {\n            keys = insertSort(keys);\n          }\n          stack.push(value);\n          for (let i = 0; i < maximumPropertiesToStringify; i++) {\n            const key = keys[i];\n            const tmp = stringifySimple(key, value[key], stack);\n            if (tmp !== undefined) {\n              res += `${separator}${strEscape(key)}:${tmp}`;\n              separator = ',';\n            }\n          }\n          if (keyLength > maximumBreadth) {\n            const removedKeys = keyLength - maximumBreadth;\n            res += `${separator}\"...\":\"${getItemCount(removedKeys)} not stringified\"`;\n          }\n          stack.pop();\n          return `{${res}}`;\n        }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null';\n      case 'boolean':\n        return value === true ? 'true' : 'false';\n      case 'undefined':\n        return undefined;\n      case 'bigint':\n        if (bigint) {\n          return String(value);\n        }\n      // fallthrough\n      default:\n        return fail ? fail(value) : undefined;\n    }\n  }\n  function stringify(value, replacer, space) {\n    if (arguments.length > 1) {\n      let spacer = '';\n      if (typeof space === 'number') {\n        spacer = ' '.repeat(Math.min(space, 10));\n      } else if (typeof space === 'string') {\n        spacer = space.slice(0, 10);\n      }\n      if (replacer != null) {\n        if (typeof replacer === 'function') {\n          return stringifyFnReplacer('', {\n            '': value\n          }, [], replacer, spacer, '');\n        }\n        if (Array.isArray(replacer)) {\n          return stringifyArrayReplacer('', value, [], getUniqueReplacerSet(replacer), spacer, '');\n        }\n      }\n      if (spacer.length !== 0) {\n        return stringifyIndent('', value, [], spacer, '');\n      }\n    }\n    return stringifySimple('', value, []);\n  }\n  return stringify;\n}","map":{"version":3,"names":["hasOwnProperty","Object","prototype","stringify","configure","default","exports","module","strEscapeSequencesRegExp","strEscape","str","length","test","JSON","insertSort","array","sort","i","currentValue","position","typedArrayPrototypeGetSymbolToStringTag","getOwnPropertyDescriptor","getPrototypeOf","Int8Array","Symbol","toStringTag","get","isTypedArrayWithEntries","value","call","undefined","stringifyTypedArray","separator","maximumBreadth","whitespace","res","getCircularValueOption","options","circularValue","Error","TypeError","toString","getBooleanOption","key","getPositiveIntegerOption","Number","isInteger","RangeError","Infinity","getItemCount","number","getUniqueReplacerSet","replacerArray","replacerSet","Set","add","String","getStrictOption","strict","message","fail","bigint","deterministic","maximumDepth","stringifyFnReplacer","parent","stack","replacer","spacer","indentation","toJSON","indexOf","join","originalIndentation","Array","isArray","push","maximumValuesToStringify","Math","min","tmp","removedKeys","pop","keys","keyLength","maximumPropertiesToStringify","isFinite","stringifyArrayReplacer","stringifyIndent","slice","stringifySimple","space","arguments","repeat"],"sources":["/Users/michaelbryant/node_modules/safe-stable-stringify/index.js"],"sourcesContent":["'use strict'\n\nconst { hasOwnProperty } = Object.prototype\n\nconst stringify = configure()\n\n// @ts-expect-error\nstringify.configure = configure\n// @ts-expect-error\nstringify.stringify = stringify\n\n// @ts-expect-error\nstringify.default = stringify\n\n// @ts-expect-error used for named export\nexports.stringify = stringify\n// @ts-expect-error used for named export\nexports.configure = configure\n\nmodule.exports = stringify\n\n// eslint-disable-next-line no-control-regex\nconst strEscapeSequencesRegExp = /[\\u0000-\\u001f\\u0022\\u005c\\ud800-\\udfff]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?:[^\\ud800-\\udbff]|^)[\\udc00-\\udfff]/\n\n// Escape C0 control characters, double quotes, the backslash and every code\n// unit with a numeric value in the inclusive range 0xD800 to 0xDFFF.\nfunction strEscape (str) {\n  // Some magic numbers that worked out fine while benchmarking with v8 8.0\n  if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {\n    return `\"${str}\"`\n  }\n  return JSON.stringify(str)\n}\n\nfunction insertSort (array) {\n  // Insertion sort is very efficient for small input sizes but it has a bad\n  // worst case complexity. Thus, use native array sort for bigger values.\n  if (array.length > 2e2) {\n    return array.sort()\n  }\n  for (let i = 1; i < array.length; i++) {\n    const currentValue = array[i]\n    let position = i\n    while (position !== 0 && array[position - 1] > currentValue) {\n      array[position] = array[position - 1]\n      position--\n    }\n    array[position] = currentValue\n  }\n  return array\n}\n\nconst typedArrayPrototypeGetSymbolToStringTag =\n  Object.getOwnPropertyDescriptor(\n    Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        new Int8Array()\n      )\n    ),\n    Symbol.toStringTag\n  ).get\n\nfunction isTypedArrayWithEntries (value) {\n  return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0\n}\n\nfunction stringifyTypedArray (array, separator, maximumBreadth) {\n  if (array.length < maximumBreadth) {\n    maximumBreadth = array.length\n  }\n  const whitespace = separator === ',' ? '' : ' '\n  let res = `\"0\":${whitespace}${array[0]}`\n  for (let i = 1; i < maximumBreadth; i++) {\n    res += `${separator}\"${i}\":${whitespace}${array[i]}`\n  }\n  return res\n}\n\nfunction getCircularValueOption (options) {\n  if (hasOwnProperty.call(options, 'circularValue')) {\n    const circularValue = options.circularValue\n    if (typeof circularValue === 'string') {\n      return `\"${circularValue}\"`\n    }\n    if (circularValue == null) {\n      return circularValue\n    }\n    if (circularValue === Error || circularValue === TypeError) {\n      return {\n        toString () {\n          throw new TypeError('Converting circular structure to JSON')\n        }\n      }\n    }\n    throw new TypeError('The \"circularValue\" argument must be of type string or the value null or undefined')\n  }\n  return '\"[Circular]\"'\n}\n\nfunction getBooleanOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'boolean') {\n      throw new TypeError(`The \"${key}\" argument must be of type boolean`)\n    }\n  }\n  return value === undefined ? true : value\n}\n\nfunction getPositiveIntegerOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'number') {\n      throw new TypeError(`The \"${key}\" argument must be of type number`)\n    }\n    if (!Number.isInteger(value)) {\n      throw new TypeError(`The \"${key}\" argument must be an integer`)\n    }\n    if (value < 1) {\n      throw new RangeError(`The \"${key}\" argument must be >= 1`)\n    }\n  }\n  return value === undefined ? Infinity : value\n}\n\nfunction getItemCount (number) {\n  if (number === 1) {\n    return '1 item'\n  }\n  return `${number} items`\n}\n\nfunction getUniqueReplacerSet (replacerArray) {\n  const replacerSet = new Set()\n  for (const value of replacerArray) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      replacerSet.add(String(value))\n    }\n  }\n  return replacerSet\n}\n\nfunction getStrictOption (options) {\n  if (hasOwnProperty.call(options, 'strict')) {\n    const value = options.strict\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The \"strict\" argument must be of type boolean')\n    }\n    if (value) {\n      return (value) => {\n        let message = `Object can not safely be stringified. Received type ${typeof value}`\n        if (typeof value !== 'function') message += ` (${value.toString()})`\n        throw new Error(message)\n      }\n    }\n  }\n}\n\nfunction configure (options) {\n  options = { ...options }\n  const fail = getStrictOption(options)\n  if (fail) {\n    if (options.bigint === undefined) {\n      options.bigint = false\n    }\n    if (!('circularValue' in options)) {\n      options.circularValue = Error\n    }\n  }\n  const circularValue = getCircularValueOption(options)\n  const bigint = getBooleanOption(options, 'bigint')\n  const deterministic = getBooleanOption(options, 'deterministic')\n  const maximumDepth = getPositiveIntegerOption(options, 'maximumDepth')\n  const maximumBreadth = getPositiveIntegerOption(options, 'maximumBreadth')\n\n  function stringifyFnReplacer (key, parent, stack, replacer, spacer, indentation) {\n    let value = parent[key]\n\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n    value = replacer.call(parent, key, value)\n\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n        let join = ','\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let whitespace = ''\n        let separator = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (deterministic && !isTypedArrayWithEntries(value)) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyFnReplacer(key, value, stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":${whitespace}\"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyArrayReplacer (key, value, stack, replacer, spacer, indentation) {\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        const originalIndentation = indentation\n        let res = ''\n        let join = ','\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n        stack.push(value)\n        let whitespace = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        let separator = ''\n        for (const key of replacer) {\n          const tmp = stringifyArrayReplacer(key, value[key], stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyIndent (key, value, stack, spacer, indentation) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again.\n          if (typeof value !== 'object') {\n            return stringifyIndent(key, value, stack, spacer, indentation)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          indentation += spacer\n          let res = `\\n${indentation}`\n          const join = `,\\n${indentation}`\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          res += `\\n${originalIndentation}`\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        indentation += spacer\n        const join = `,\\n${indentation}`\n        let res = ''\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, join, maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = join\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyIndent(key, value[key], stack, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}: ${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\": \"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (separator !== '') {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifySimple (key, value, stack) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again\n          if (typeof value !== 'object') {\n            return stringifySimple(key, value, stack)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifySimple(String(i), value[i], stack)\n            res += tmp !== undefined ? tmp : 'null'\n            res += ','\n          }\n          const tmp = stringifySimple(String(i), value[i], stack)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `,\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, ',', maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = ','\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifySimple(key, value[key], stack)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${tmp}`\n            separator = ','\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":\"${getItemCount(removedKeys)} not stringified\"`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringify (value, replacer, space) {\n    if (arguments.length > 1) {\n      let spacer = ''\n      if (typeof space === 'number') {\n        spacer = ' '.repeat(Math.min(space, 10))\n      } else if (typeof space === 'string') {\n        spacer = space.slice(0, 10)\n      }\n      if (replacer != null) {\n        if (typeof replacer === 'function') {\n          return stringifyFnReplacer('', { '': value }, [], replacer, spacer, '')\n        }\n        if (Array.isArray(replacer)) {\n          return stringifyArrayReplacer('', value, [], getUniqueReplacerSet(replacer), spacer, '')\n        }\n      }\n      if (spacer.length !== 0) {\n        return stringifyIndent('', value, [], spacer, '')\n      }\n    }\n    return stringifySimple('', value, [])\n  }\n\n  return stringify\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}