{"ast":null,"code":"import*as Blockly from'blockly/core';// Create a custom block for declaring an integer variable in code.\nvar intVarDeclaration={'type':'int_var_declaration','message0':'Declare int variable %1 = %2','args0':[{'type':'field_variable','name':'VAR','variable':'my_variable'},{'type':'input_value','name':'VALUE','check':'Number'}],'previousStatement':null,'nextStatement':null,//red color\n'colour':160,'tooltip':'','helpUrl':''};// Create the block definitions for the JSON-only blocks.\nexport var intVarDeclarationBlock=Blockly.common.createBlockDefinitionsFromJsonArray([intVarDeclaration]);var useVariableBlock={'type':'use_variable','message0':'%1','args0':[{'type':'field_variable','name':'VAR','variable':'my_variable'// Default variable name\n}],'output':'Number',// Set the output type to 'Number' or the appropriate data type\n'colour':160,'tooltip':'','helpUrl':''};// Create the block definition for the JSON-only block.\nexport var useVariableBlockDef=Blockly.common.createBlockDefinitionsFromJsonArray([useVariableBlock]);var assignVariableBlock={'type':'assign_variable','message0':'%1 = %2','args0':[{'type':'field_variable','name':'VAR','variable':'my_variable'},{'type':'input_value','name':'VALUE','check':'Number'}],'previousStatement':null,'nextStatement':null,'colour':160,'tooltip':'','helpUrl':''};// Create the block definitions for the JSON-only blocks.\nexport var assignVariableBlockDef=Blockly.common.createBlockDefinitionsFromJsonArray([assignVariableBlock]);","map":{"version":3,"names":["Blockly","intVarDeclaration","intVarDeclarationBlock","common","createBlockDefinitionsFromJsonArray","useVariableBlock","useVariableBlockDef","assignVariableBlock","assignVariableBlockDef"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/intVars.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\n\n// Create a custom block for declaring an integer variable in code.\nconst intVarDeclaration = {\n  'type': 'int_var_declaration',\n  'message0': 'Declare int variable %1 = %2',\n  'args0': [\n    {\n      'type': 'field_variable',\n      'name': 'VAR',\n      'variable': 'my_variable',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'previousStatement': null,\n  'nextStatement': null,\n  //red color\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const intVarDeclarationBlock = Blockly.common.createBlockDefinitionsFromJsonArray([intVarDeclaration]);\n\nconst useVariableBlock = {\n    'type': 'use_variable',\n    'message0': '%1',\n    'args0': [\n      {\n        'type': 'field_variable',\n        'name': 'VAR',\n        'variable': 'my_variable', // Default variable name\n      },\n    ],\n    'output': 'Number', // Set the output type to 'Number' or the appropriate data type\n    'colour': 160,\n    'tooltip': '',\n    'helpUrl': '',\n  };\n  \n  // Create the block definition for the JSON-only block.\n  export const useVariableBlockDef = Blockly.common.createBlockDefinitionsFromJsonArray([useVariableBlock]);\n\n  const assignVariableBlock = {\n    'type': 'assign_variable',\n    'message0': '%1 = %2',\n    'args0': [\n      {\n        'type': 'field_variable',\n        'name': 'VAR',\n        'variable': 'my_variable',\n      },\n      {\n        'type': 'input_value',\n        'name': 'VALUE',\n        'check': 'Number',\n      },\n    ],\n    'previousStatement': null,\n    'nextStatement': null,\n    'colour': 160,\n    'tooltip': '',\n    'helpUrl': '',\n  };\n  \n  // Create the block definitions for the JSON-only blocks.\n  export const assignVariableBlockDef = Blockly.common.createBlockDefinitionsFromJsonArray([assignVariableBlock]);\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,OAAO,KAAM,cAAc,CAEvC;AACA,GAAM,CAAAC,iBAAiB,CAAG,CACxB,MAAM,CAAE,qBAAqB,CAC7B,UAAU,CAAE,8BAA8B,CAC1C,OAAO,CAAE,CACP,CACE,MAAM,CAAE,gBAAgB,CACxB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,aACd,CAAC,CACD,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,QACX,CAAC,CACF,CACD,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB;AACA,QAAQ,CAAE,GAAG,CACb,SAAS,CAAE,EAAE,CACb,SAAS,CAAE,EACb,CAAC,CAED;AACA,MAAO,IAAM,CAAAC,sBAAsB,CAAGF,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACH,iBAAiB,CAAC,CAAC,CAE7G,GAAM,CAAAI,gBAAgB,CAAG,CACrB,MAAM,CAAE,cAAc,CACtB,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CACP,CACE,MAAM,CAAE,gBAAgB,CACxB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,aAAe;AAC7B,CAAC,CACF,CACD,QAAQ,CAAE,QAAQ,CAAE;AACpB,QAAQ,CAAE,GAAG,CACb,SAAS,CAAE,EAAE,CACb,SAAS,CAAE,EACb,CAAC,CAED;AACA,MAAO,IAAM,CAAAC,mBAAmB,CAAGN,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACC,gBAAgB,CAAC,CAAC,CAEzG,GAAM,CAAAE,mBAAmB,CAAG,CAC1B,MAAM,CAAE,iBAAiB,CACzB,UAAU,CAAE,SAAS,CACrB,OAAO,CAAE,CACP,CACE,MAAM,CAAE,gBAAgB,CACxB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,aACd,CAAC,CACD,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,QACX,CAAC,CACF,CACD,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,GAAG,CACb,SAAS,CAAE,EAAE,CACb,SAAS,CAAE,EACb,CAAC,CAED;AACA,MAAO,IAAM,CAAAC,sBAAsB,CAAGR,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACG,mBAAmB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}