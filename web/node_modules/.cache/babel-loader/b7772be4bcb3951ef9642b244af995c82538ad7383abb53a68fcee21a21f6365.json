{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/web/src/BluetoothContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BluetoothContext = /*#__PURE__*/createContext(undefined);\nconst PrintFlag = '__P__';\nconst PrintFlagLength = PrintFlag.length;\nconst ErrorFlag = '__ER__';\nconst ErrorFlagLength = ErrorFlag.length;\nconst ScriptSentFlag = '__SS__';\nfunction uuid_bytes_to_string(uuid) {\n  // Assumes LSB first\n  const uuid_str = uuid.reverse().map(byte => byte.toString(16).padStart(2, '0')).join('');\n  return [uuid_str.slice(0, 8), uuid_str.slice(8, 12), uuid_str.slice(12, 16), uuid_str.slice(16, 20), uuid_str.slice(20)].join('-');\n}\nconst SERVICE_UUID = uuid_bytes_to_string([0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00]);\nconst CHARACTERISTIC_UUID = '0000ff01-0000-1000-8000-00805f9b34fb';\nexport const BluetoothProvider = ({\n  children\n}) => {\n  _s();\n  const [bluetoothDevice, setBluetoothDevice] = useState(null);\n  const [outputText, setOutputText] = useState('');\n\n  // For writing to the output text\n  const writeToOutput = useCallback(data => {\n    setOutputText(prevOutput => prevOutput + '\\n' + data);\n    console.log('Output:', data);\n  }, [setOutputText]);\n  const clearOutput = useCallback(() => {\n    setOutputText('');\n  }, [setOutputText]);\n  const connectToDevice = useCallback(async () => {\n    try {\n      var _device$gatt;\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: [SERVICE_UUID]\n        }]\n      });\n      console.log('Connected to:', device.name);\n      const server = await ((_device$gatt = device.gatt) === null || _device$gatt === void 0 ? void 0 : _device$gatt.connect());\n      console.log('Connected to GATT server');\n\n      // Add event listener for disconnection\n      server === null || server === void 0 ? void 0 : server.addEventListener('gattserverdisconnected', () => {\n        console.log('Disconnected from GATT server');\n        setBluetoothDevice(null);\n        setOutputText('');\n      });\n      const service = await (server === null || server === void 0 ? void 0 : server.getPrimaryService(SERVICE_UUID));\n      console.log('Service discovered');\n\n      // const writeChar = await service?.getCharacteristic(WRITE_CHARACTERISTIC_UUID);\n      // console.log('Write Characteristic discovered');\n\n      const char = await (service === null || service === void 0 ? void 0 : service.getCharacteristic(CHARACTERISTIC_UUID));\n      console.log('Read Characteristic discovered');\n      console.log(char);\n      if (char) {\n        // Enable notifications for the characteristic to receive data\n        await char.startNotifications();\n        console.log('Notifications started for read characteristic');\n\n        // Listen for data notifications\n        char.addEventListener('characteristicvaluechanged', event => {\n          var _event$target, _event$target2;\n          console.log('Received data:', (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value);\n          const value = (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n\n            // Decode the callbacks per callbacks.md\n\n            // __SS__\n            if (decodedValue === ScriptSentFlag) {\n              writeToOutput('Script uploaded.\\n');\n            }\n\n            // __P__<TEXT>__P__\n            else if (decodedValue.startsWith(PrintFlag) && decodedValue.endsWith(PrintFlag)) {\n              const text = decodedValue.slice(PrintFlagLength, decodedValue.length - PrintFlagLength);\n              writeToOutput(text + '\\n');\n            }\n\n            // __ER__<TEXT>__ER__\n            else if (decodedValue.startsWith(ErrorFlag) && decodedValue.endsWith(ErrorFlag)) {\n              const text = decodedValue.slice(ErrorFlagLength, decodedValue.length - ErrorFlagLength);\n              writeToOutput('Error: ' + text + '\\n');\n            }\n\n            // setOutputText((prevOutput) => prevOutput + '\\n' + decodedValue);\n            // setOutputText(decodedValue);\n          }\n        });\n\n        setBluetoothDevice(device);\n        writeToOutput('Connected to Bluetooth device.\\n');\n      } else {\n        // Handle the case when the characteristic is not found\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n  }, [writeToOutput]);\n  const disconnectDevice = useCallback(async () => {\n    var _bluetoothDevice$gatt;\n    if (bluetoothDevice && (_bluetoothDevice$gatt = bluetoothDevice.gatt) !== null && _bluetoothDevice$gatt !== void 0 && _bluetoothDevice$gatt.connected) {\n      var _bluetoothDevice$gatt2;\n      (_bluetoothDevice$gatt2 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt2 === void 0 ? void 0 : _bluetoothDevice$gatt2.disconnect();\n      console.log('Disconnected');\n    }\n    console.log('Disconnected from:', bluetoothDevice === null || bluetoothDevice === void 0 ? void 0 : bluetoothDevice.name);\n    setBluetoothDevice(null);\n    setOutputText('');\n  }, [bluetoothDevice]);\n  const sendBluetoothData = useCallback(async data => {\n    if (bluetoothDevice) {\n      var _bluetoothDevice$gatt3;\n      const textEncoder = new TextEncoder();\n      const encodedData = textEncoder.encode(data);\n\n      // Update the characteristic UUID to match the one used in your ESP32 code\n      const service = await ((_bluetoothDevice$gatt3 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt3 === void 0 ? void 0 : _bluetoothDevice$gatt3.getPrimaryService(SERVICE_UUID));\n      const writeChar = await (service === null || service === void 0 ? void 0 : service.getCharacteristic(CHARACTERISTIC_UUID));\n      console.log('Sending data:', data);\n      if (writeChar) {\n        try {\n          await writeChar.writeValue(encodedData);\n          console.log('Write successful');\n        } catch (error) {\n          console.error('Write error:', error);\n        }\n      }\n    }\n  }, [bluetoothDevice]);\n  return /*#__PURE__*/_jsxDEV(BluetoothContext.Provider, {\n    value: {\n      bluetoothDevice,\n      outputText,\n      connectToDevice,\n      disconnectDevice,\n      sendBluetoothData,\n      writeToOutput,\n      clearOutput\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothProvider, \"Rt+uR7j6TEK8I1iUCE0GKXY1cr4=\");\n_c = BluetoothProvider;\nexport const useBluetooth = () => {\n  _s2();\n  const context = useContext(BluetoothContext);\n  if (context === undefined) {\n    throw new Error('useBluetooth must be used within a BluetoothProvider');\n  }\n  return context;\n};\n_s2(useBluetooth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BluetoothProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","BluetoothContext","undefined","PrintFlag","PrintFlagLength","length","ErrorFlag","ErrorFlagLength","ScriptSentFlag","uuid_bytes_to_string","uuid","uuid_str","reverse","map","byte","toString","padStart","join","slice","SERVICE_UUID","CHARACTERISTIC_UUID","BluetoothProvider","children","_s","bluetoothDevice","setBluetoothDevice","outputText","setOutputText","writeToOutput","data","prevOutput","console","log","clearOutput","connectToDevice","_device$gatt","device","navigator","bluetooth","requestDevice","filters","services","name","server","gatt","connect","addEventListener","service","getPrimaryService","char","getCharacteristic","startNotifications","event","_event$target","_event$target2","target","value","textDecoder","TextDecoder","decodedValue","decode","startsWith","endsWith","text","error","disconnectDevice","_bluetoothDevice$gatt","connected","_bluetoothDevice$gatt2","disconnect","sendBluetoothData","_bluetoothDevice$gatt3","textEncoder","TextEncoder","encodedData","encode","writeChar","writeValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBluetooth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/web/src/BluetoothContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\n\ninterface BluetoothContextProps {\n  bluetoothDevice: BluetoothDevice | null;\n  outputText: string;\n  connectToDevice: () => Promise<void>;\n  disconnectDevice: () => Promise<void>;\n  sendBluetoothData: (data: string) => Promise<void>;\n  writeToOutput: (data: string) => void;\n  clearOutput: () => void;\n}\n\nconst BluetoothContext = createContext<BluetoothContextProps | undefined>(undefined);\n\nconst PrintFlag = '__P__';\nconst PrintFlagLength = PrintFlag.length;\n\nconst ErrorFlag = '__ER__';\nconst ErrorFlagLength = ErrorFlag.length;\n\nconst ScriptSentFlag = '__SS__';\n\n\nfunction uuid_bytes_to_string(uuid: number[]): string {\n  // Assumes LSB first\n  const uuid_str = uuid.reverse().map(byte => byte.toString(16).padStart(2, '0')).join('');\n  return [\n    uuid_str.slice(0, 8),\n    uuid_str.slice(8, 12),\n    uuid_str.slice(12, 16),\n    uuid_str.slice(16, 20),\n    uuid_str.slice(20),\n  ].join('-');\n}\n\n\nconst SERVICE_UUID = uuid_bytes_to_string([\n  0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,\n  0x00, 0x10, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,\n]);\n\n\nconst CHARACTERISTIC_UUID = '0000ff01-0000-1000-8000-00805f9b34fb';\n\ninterface BluetoothProviderProps {\n  children: ReactNode;\n}\n\nexport const BluetoothProvider: React.FC<BluetoothProviderProps> = ({ children }) => {\n  const [bluetoothDevice, setBluetoothDevice] = useState<BluetoothDevice | null>(null);\n  const [outputText, setOutputText] = useState<string>('');\n\n  // For writing to the output text\n  const writeToOutput = useCallback((data: string) => {\n    setOutputText((prevOutput) => prevOutput + '\\n' + data);\n    console.log('Output:', data);\n  }, [setOutputText]);\n\n  const clearOutput = useCallback(() => {\n    setOutputText('');\n  }, [setOutputText]);\n\n\n  const connectToDevice = useCallback(async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: [SERVICE_UUID] }],\n      });\n\n      console.log('Connected to:', device.name);\n\n      const server = await device.gatt?.connect();\n      console.log('Connected to GATT server');\n\n      // Add event listener for disconnection\n    server?.addEventListener('gattserverdisconnected', () => {\n      console.log('Disconnected from GATT server');\n      setBluetoothDevice(null);\n      setOutputText('');\n    });\n\n      const service = await server?.getPrimaryService(SERVICE_UUID);\n      console.log('Service discovered');\n\n      // const writeChar = await service?.getCharacteristic(WRITE_CHARACTERISTIC_UUID);\n      // console.log('Write Characteristic discovered');\n\n      const char = await service?.getCharacteristic(CHARACTERISTIC_UUID);\n      console.log('Read Characteristic discovered');\n\n      console.log(char);\n\n      if (char) {\n        // Enable notifications for the characteristic to receive data\n        await char.startNotifications();\n        console.log('Notifications started for read characteristic');\n\n        // Listen for data notifications\n        char.addEventListener('characteristicvaluechanged', (event: any) => {\n          console.log('Received data:', event.target?.value);\n          const value = event.target?.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n\n            // Decode the callbacks per callbacks.md\n\n            // __SS__\n            if (decodedValue === ScriptSentFlag) {\n              writeToOutput('Script uploaded.\\n');\n            }\n\n            // __P__<TEXT>__P__\n            else if (decodedValue.startsWith(PrintFlag) && decodedValue.endsWith(PrintFlag)) {\n              const text = decodedValue.slice(PrintFlagLength, decodedValue.length - PrintFlagLength);\n              writeToOutput(text + '\\n');\n            }\n\n            // __ER__<TEXT>__ER__\n            else if (decodedValue.startsWith(ErrorFlag) && decodedValue.endsWith(ErrorFlag)) {\n              const text = decodedValue.slice(ErrorFlagLength, decodedValue.length - ErrorFlagLength);\n              writeToOutput('Error: ' + text + '\\n');\n            }\n\n            // setOutputText((prevOutput) => prevOutput + '\\n' + decodedValue);\n            // setOutputText(decodedValue);\n          }\n        });\n\n        setBluetoothDevice(device);\n        writeToOutput('Connected to Bluetooth device.\\n');\n      } else {\n        // Handle the case when the characteristic is not found\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n\n\n  }, [writeToOutput]);\n\n  const disconnectDevice = useCallback(async () => {\n    if (bluetoothDevice && bluetoothDevice.gatt?.connected) {\n      bluetoothDevice.gatt?.disconnect();\n      console.log('Disconnected');\n    }\n\n    console.log('Disconnected from:', bluetoothDevice?.name);\n\n    setBluetoothDevice(null);\n    setOutputText('');\n  }, [bluetoothDevice]);\n\n  const sendBluetoothData = useCallback(async (data: string) => {\n    if (bluetoothDevice) {\n        const textEncoder = new TextEncoder();\n        const encodedData = textEncoder.encode(data);\n        \n        // Update the characteristic UUID to match the one used in your ESP32 code\n        const service = await bluetoothDevice.gatt?.getPrimaryService(SERVICE_UUID);\n        const writeChar = await service?.getCharacteristic(CHARACTERISTIC_UUID);\n\n        console.log('Sending data:', data);\n\n        if (writeChar) {\n            try {\n                await writeChar.writeValue(encodedData);\n                console.log('Write successful');\n            } catch (error) {\n                console.error('Write error:', error);\n            }\n        }\n    }\n}, [bluetoothDevice]);\n\n  return (\n    <BluetoothContext.Provider\n      value={{\n        bluetoothDevice,\n        outputText,\n        connectToDevice,\n        disconnectDevice,\n        sendBluetoothData,\n        writeToOutput,\n        clearOutput,\n      }}\n    >\n      {children}\n    </BluetoothContext.Provider>\n  );\n};\n\nexport const useBluetooth = (): BluetoothContextProps => {\n  const context = useContext(BluetoothContext);\n  if (context === undefined) {\n    throw new Error('useBluetooth must be used within a BluetoothProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAY3F,MAAMC,gBAAgB,gBAAGN,aAAa,CAAoCO,SAAS,CAAC;AAEpF,MAAMC,SAAS,GAAG,OAAO;AACzB,MAAMC,eAAe,GAAGD,SAAS,CAACE,MAAM;AAExC,MAAMC,SAAS,GAAG,QAAQ;AAC1B,MAAMC,eAAe,GAAGD,SAAS,CAACD,MAAM;AAExC,MAAMG,cAAc,GAAG,QAAQ;AAG/B,SAASC,oBAAoBA,CAACC,IAAc,EAAU;EACpD;EACA,MAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACxF,OAAO,CACLN,QAAQ,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EACpBP,QAAQ,CAACO,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EACrBP,QAAQ,CAACO,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,EACtBP,QAAQ,CAACO,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,EACtBP,QAAQ,CAACO,KAAK,CAAC,EAAE,CAAC,CACnB,CAACD,IAAI,CAAC,GAAG,CAAC;AACb;AAGA,MAAME,YAAY,GAAGV,oBAAoB,CAAC,CACxC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAC/C,CAAC;AAGF,MAAMW,mBAAmB,GAAG,sCAAsC;AAMlE,OAAO,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAyB,IAAI,CAAC;EACpF,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAS,EAAE,CAAC;;EAExD;EACA,MAAM+B,aAAa,GAAG9B,WAAW,CAAE+B,IAAY,IAAK;IAClDF,aAAa,CAAEG,UAAU,IAAKA,UAAU,GAAG,IAAI,GAAGD,IAAI,CAAC;IACvDE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,IAAI,CAAC;EAC9B,CAAC,EAAE,CAACF,aAAa,CAAC,CAAC;EAEnB,MAAMM,WAAW,GAAGnC,WAAW,CAAC,MAAM;IACpC6B,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAGnB,MAAMO,eAAe,GAAGpC,WAAW,CAAC,YAAY;IAC9C,IAAI;MAAA,IAAAqC,YAAA;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,SAAS,CAACC,aAAa,CAAC;QACrDC,OAAO,EAAE,CAAC;UAAEC,QAAQ,EAAE,CAACtB,YAAY;QAAE,CAAC;MACxC,CAAC,CAAC;MAEFY,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEI,MAAM,CAACM,IAAI,CAAC;MAEzC,MAAMC,MAAM,GAAG,QAAAR,YAAA,GAAMC,MAAM,CAACQ,IAAI,cAAAT,YAAA,uBAAXA,YAAA,CAAaU,OAAO,CAAC,CAAC;MAC3Cd,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACFW,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,gBAAgB,CAAC,wBAAwB,EAAE,MAAM;QACvDf,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5CP,kBAAkB,CAAC,IAAI,CAAC;QACxBE,aAAa,CAAC,EAAE,CAAC;MACnB,CAAC,CAAC;MAEA,MAAMoB,OAAO,GAAG,OAAMJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,iBAAiB,CAAC7B,YAAY,CAAC;MAC7DY,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;MAEjC;MACA;;MAEA,MAAMiB,IAAI,GAAG,OAAMF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,iBAAiB,CAAC9B,mBAAmB,CAAC;MAClEW,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAE7CD,OAAO,CAACC,GAAG,CAACiB,IAAI,CAAC;MAEjB,IAAIA,IAAI,EAAE;QACR;QACA,MAAMA,IAAI,CAACE,kBAAkB,CAAC,CAAC;QAC/BpB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;;QAE5D;QACAiB,IAAI,CAACH,gBAAgB,CAAC,4BAA4B,EAAGM,KAAU,IAAK;UAAA,IAAAC,aAAA,EAAAC,cAAA;UAClEvB,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAAqB,aAAA,GAAED,KAAK,CAACG,MAAM,cAAAF,aAAA,uBAAZA,aAAA,CAAcG,KAAK,CAAC;UAClD,MAAMA,KAAK,IAAAF,cAAA,GAAGF,KAAK,CAACG,MAAM,cAAAD,cAAA,uBAAZA,cAAA,CAAcE,KAAK;UACjC,IAAIA,KAAK,EAAE;YACT,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;YAC5C,MAAMC,YAAY,GAAGF,WAAW,CAACG,MAAM,CAACJ,KAAK,CAAC;;YAE9C;;YAEA;YACA,IAAIG,YAAY,KAAKnD,cAAc,EAAE;cACnCoB,aAAa,CAAC,oBAAoB,CAAC;YACrC;;YAEA;YAAA,KACK,IAAI+B,YAAY,CAACE,UAAU,CAAC1D,SAAS,CAAC,IAAIwD,YAAY,CAACG,QAAQ,CAAC3D,SAAS,CAAC,EAAE;cAC/E,MAAM4D,IAAI,GAAGJ,YAAY,CAACzC,KAAK,CAACd,eAAe,EAAEuD,YAAY,CAACtD,MAAM,GAAGD,eAAe,CAAC;cACvFwB,aAAa,CAACmC,IAAI,GAAG,IAAI,CAAC;YAC5B;;YAEA;YAAA,KACK,IAAIJ,YAAY,CAACE,UAAU,CAACvD,SAAS,CAAC,IAAIqD,YAAY,CAACG,QAAQ,CAACxD,SAAS,CAAC,EAAE;cAC/E,MAAMyD,IAAI,GAAGJ,YAAY,CAACzC,KAAK,CAACX,eAAe,EAAEoD,YAAY,CAACtD,MAAM,GAAGE,eAAe,CAAC;cACvFqB,aAAa,CAAC,SAAS,GAAGmC,IAAI,GAAG,IAAI,CAAC;YACxC;;YAEA;YACA;UACF;QACF,CAAC,CAAC;;QAEFtC,kBAAkB,CAACW,MAAM,CAAC;QAC1BR,aAAa,CAAC,kCAAkC,CAAC;MACnD,CAAC,MAAM;QACL;QACAH,kBAAkB,CAAC,IAAI,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOuC,KAAK,EAAE;MACdjC,OAAO,CAACiC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C;EAGF,CAAC,EAAE,CAACpC,aAAa,CAAC,CAAC;EAEnB,MAAMqC,gBAAgB,GAAGnE,WAAW,CAAC,YAAY;IAAA,IAAAoE,qBAAA;IAC/C,IAAI1C,eAAe,KAAA0C,qBAAA,GAAI1C,eAAe,CAACoB,IAAI,cAAAsB,qBAAA,eAApBA,qBAAA,CAAsBC,SAAS,EAAE;MAAA,IAAAC,sBAAA;MACtD,CAAAA,sBAAA,GAAA5C,eAAe,CAACoB,IAAI,cAAAwB,sBAAA,uBAApBA,sBAAA,CAAsBC,UAAU,CAAC,CAAC;MAClCtC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B;IAEAD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEkB,IAAI,CAAC;IAExDjB,kBAAkB,CAAC,IAAI,CAAC;IACxBE,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,MAAM8C,iBAAiB,GAAGxE,WAAW,CAAC,MAAO+B,IAAY,IAAK;IAC5D,IAAIL,eAAe,EAAE;MAAA,IAAA+C,sBAAA;MACjB,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;MACrC,MAAMC,WAAW,GAAGF,WAAW,CAACG,MAAM,CAAC9C,IAAI,CAAC;;MAE5C;MACA,MAAMkB,OAAO,GAAG,QAAAwB,sBAAA,GAAM/C,eAAe,CAACoB,IAAI,cAAA2B,sBAAA,uBAApBA,sBAAA,CAAsBvB,iBAAiB,CAAC7B,YAAY,CAAC;MAC3E,MAAMyD,SAAS,GAAG,OAAM7B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,iBAAiB,CAAC9B,mBAAmB,CAAC;MAEvEW,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;MAElC,IAAI+C,SAAS,EAAE;QACX,IAAI;UACA,MAAMA,SAAS,CAACC,UAAU,CAACH,WAAW,CAAC;UACvC3C,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACnC,CAAC,CAAC,OAAOgC,KAAK,EAAE;UACZjC,OAAO,CAACiC,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACxC;MACJ;IACJ;EACJ,CAAC,EAAE,CAACxC,eAAe,CAAC,CAAC;EAEnB,oBACExB,OAAA,CAACC,gBAAgB,CAAC6E,QAAQ;IACxBtB,KAAK,EAAE;MACLhC,eAAe;MACfE,UAAU;MACVQ,eAAe;MACf+B,gBAAgB;MAChBK,iBAAiB;MACjB1C,aAAa;MACbK;IACF,CAAE;IAAAX,QAAA,EAEDA;EAAQ;IAAAyD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC3D,EAAA,CA/IWF,iBAAmD;AAAA8D,EAAA,GAAnD9D,iBAAmD;AAiJhE,OAAO,MAAM+D,YAAY,GAAGA,CAAA,KAA6B;EAAAC,GAAA;EACvD,MAAMC,OAAO,GAAG1F,UAAU,CAACK,gBAAgB,CAAC;EAC5C,IAAIqF,OAAO,KAAKpF,SAAS,EAAE;IACzB,MAAM,IAAIqF,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,YAAY;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}