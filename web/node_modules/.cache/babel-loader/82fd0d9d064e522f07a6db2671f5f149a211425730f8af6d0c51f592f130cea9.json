{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlocklyComponent = () => {\n  _s();\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock); // Use your blocks array\n    Blockly.common.defineBlocks(waitBlock); // Use your blocks array\n\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolbox\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = javascriptGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      //set the code in the code div\n      const element = document.getElementById('generatedCode');\n      if (element) {\n        //set innerHTML to code while maintaining formatting\n        element.innerHTML = code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n      }\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        height: '480px',\n        width: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyToolboxDiv\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"generatedCode\",\n      style: {\n        position: 'absolute',\n        top: '0px',\n        left: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(BlocklyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BlocklyComponent;\nexport default BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["React","useEffect","Blockly","printBlock","waitBlock","forBlock","javascriptGenerator","toolbox","jsxDEV","_jsxDEV","BlocklyComponent","_s","common","defineBlocks","Object","assign","workspace","inject","runCode","code","workspaceToCode","console","log","element","document","getElementById","innerHTML","replace","addChangeListener","children","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","display","position","top","left","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly';\nimport { printBlock } from '../blockly/blocks/print';\nimport { waitBlock } from '../blockly/blocks/wait';\nimport { ifBlock } from '../blockly/blocks/if';\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { toolbox } from '../blockly/toolbox';\n\n\nconst BlocklyComponent: React.FC = () => {\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(printBlock); // Use your blocks array\n    Blockly.common.defineBlocks(waitBlock); // Use your blocks array\n\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n\n\n    const workspace = Blockly.inject('blocklyDiv', {toolbox: toolbox});\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = javascriptGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      //set the code in the code div\n      const element = document.getElementById('generatedCode');\n        if (element) {\n            //set innerHTML to code while maintaining formatting\n            element.innerHTML = code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n        }\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n\n  return (\n    <div>\n      <div id=\"blocklyDiv\" style={{ height: '480px', width: '600px' }}></div>\n      <div id=\"blocklyToolboxDiv\" style={{ display: 'none' }}></div>\n      <div id=\"generatedCode\" style={{ position: 'absolute', top: '0px', left: '500px'}}></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,OAAO,MAAM,SAAS;AAClC,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,SAAS,QAAQ,wBAAwB;AAElD,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7C,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvCV,SAAS,CAAC,MAAM;IACd;IACAC,OAAO,CAACU,MAAM,CAACC,YAAY,CAACV,UAAU,CAAC,CAAC,CAAC;IACzCD,OAAO,CAACU,MAAM,CAACC,YAAY,CAACT,SAAS,CAAC,CAAC,CAAC;;IAExCU,MAAM,CAACC,MAAM,CAACT,mBAAmB,CAACD,QAAQ,EAAEA,QAAQ,CAAC;IAGrD,MAAMW,SAAS,GAAGd,OAAO,CAACe,MAAM,CAAC,YAAY,EAAE;MAACV,OAAO,EAAEA;IAAO,CAAC,CAAC;;IAElE;IACA;IACA;IACA,MAAMW,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,IAAI,GAAGb,mBAAmB,CAACc,eAAe,CAACJ,SAAS,CAAC;MAC3DK,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;;MAEjB;MACA,MAAMI,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;MACtD,IAAIF,OAAO,EAAE;QACT;QACAA,OAAO,CAACG,SAAS,GAAGP,IAAI,CAACQ,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;MAC/F;;MAEF;IACF,CAAC;;IAEDT,OAAO,CAAC,CAAC;;IAET;IACAF,SAAS,CAACY,iBAAiB,CAAC,MAAM;MAChCV,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAKqB,EAAE,EAAC,YAAY;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvE5B,OAAA;MAAKqB,EAAE,EAAC,mBAAmB;MAACC,KAAK,EAAE;QAAEO,OAAO,EAAE;MAAO;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9D5B,OAAA;MAAKqB,EAAE,EAAC,eAAe;MAACC,KAAK,EAAE;QAAEQ,QAAQ,EAAE,UAAU;QAAEC,GAAG,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAO;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtF,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA3CID,gBAA0B;AAAAgC,EAAA,GAA1BhC,gBAA0B;AA6ChC,eAAeA,gBAAgB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}