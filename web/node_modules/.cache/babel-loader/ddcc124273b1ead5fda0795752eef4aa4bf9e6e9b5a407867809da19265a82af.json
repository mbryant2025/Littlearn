{"ast":null,"code":"import{Order}from'blockly/javascript';import*as Blockly from'blockly/core';export var forBlock=Object.create(null);forBlock['add_text']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";var color=generator.valueToCode(block,'COLOR',Order.ATOMIC)||\"'#ffffff'\";var addText=generator.provideFunction_('addText',\"function \".concat(generator.FUNCTION_NAME_PLACEHOLDER_,\"(text, color) {\\n\\n  // Add text to the output area.\\n  const outputDiv = document.getElementById('output');\\n  const textEl = document.createElement('p');\\n  textEl.innerText = text;\\n  textEl.style.color = color;\\n  outputDiv.appendChild(textEl);\\n}\"));// Generate the function call for this block.\nvar code=\"\".concat(addText,\"(\").concat(text,\", \").concat(color,\");\\n\");return code;};forBlock['print']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"print(\".concat(text,\");\\n\");return code;};forBlock['wait']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"wait(\".concat(text,\");\\n\");return code;};forBlock['set_int']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";var num=generator.valueToCode(block,'NUM',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"int (\".concat(text,\") = (\").concat(num,\");\\n\");return code;};forBlock['sevenseg']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"print_seven_segment(\".concat(text,\");\\n\");return code;};forBlock['button']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"read_port(\".concat(text,\")\");return[code,0];};forBlock['beam']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"read_port(\".concat(text,\")\");return[code,0];};forBlock['switch']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"read_port(\".concat(text,\")\");return[code,0];};forBlock['motion']=function(block,generator){var text=generator.valueToCode(block,'TEXT',Order.NONE)||\"''\";// Generate the function call for this block.\nvar code=\"read_port(\".concat(text,\")\");return[code,0];};forBlock['fan']=function(block,generator){var port=generator.valueToCode(block,'PORT',Order.NONE);var value=generator.valueToCode(block,'VALUE',Order.NONE);// Generate the function call for this block.\nvar code=\"write_port(\".concat(port,\", \").concat(value,\");\\n\");return code;};forBlock['LED']=function(block,generator){var port=generator.valueToCode(block,'PORT',Order.NONE);var value=generator.valueToCode(block,'VALUE',Order.NONE);// Generate the function call for this block.\nvar code=\"write_port(\".concat(port,\", \").concat(value,\");\\n\");return code;};forBlock['if']=function(block,generator){// Generate code for the 'if' block\nvar condition=generator.valueToCode(block,'CONDITION',Order.NONE);// If condition is blank, set it to 0\nif(!condition){condition='0';}var doBody=generator.statementToCode(block,'DO');var code='if ('+condition+') {\\n'+doBody+'}';return code;};forBlock['binaryOp']=function(block,generator){var operator=block.getFieldValue('OPERATOR');var valueA=generator.valueToCode(block,'A',Order.NONE);var valueB=generator.valueToCode(block,'B',Order.NONE);// If either value is blank, set it to 0\nif(!valueA){valueA='0';}if(!valueB){valueB='0';}var code='';// Create the code based on the selected operator\nswitch(operator){case'+':code=\"\".concat(valueA,\" + \").concat(valueB);break;case'-':code=\"\".concat(valueA,\" - \").concat(valueB);break;case'*':code=\"\".concat(valueA,\" * \").concat(valueB);break;case'/':code=\"\".concat(valueA,\" / \").concat(valueB);break;case'%':code=\"\".concat(valueA,\" % \").concat(valueB);break;case'>':code=\"\".concat(valueA,\" > \").concat(valueB);break;case'<':code=\"\".concat(valueA,\" < \").concat(valueB);break;default:throw new Error('Unknown operator: '+operator);}return[code,Order.ATOMIC];};forBlock['while']=function(block,generator){// Generate code for the 'if' block\nvar condition=generator.valueToCode(block,'CONDITION',Order.NONE);// If condition is blank, set it to 0\nif(!condition){condition='0';}var doBody=generator.statementToCode(block,'DO');var code='while ('+condition+') {\\n'+doBody+'}';return code;};forBlock['int_var_declaration']=function(block,generator){// Get the variable name from the 'VAR' field\nvar variableName=generator.nameDB_.getName(block.getFieldValue('VAR'),Blockly.VARIABLE_CATEGORY_NAME);// Get the initial value (if provided)\nvar initialValue=generator.valueToCode(block,'VALUE',Order.ASSIGNMENT)||'0';// Generate the code to declare the integer variable\nvar code=\"int \".concat(variableName,\" = \").concat(initialValue,\";\\n\");return code;};forBlock['float_var_declaration']=function(block,generator){// Get the variable name from the 'VAR' field\nvar variableName=generator.nameDB_.getName(block.getFieldValue('VAR'),Blockly.VARIABLE_CATEGORY_NAME);// Get the initial value (if provided)\nvar initialValue=generator.valueToCode(block,'VALUE',Order.ASSIGNMENT)||'0';// Generate the code to declare the integer variable\nvar code=\"float \".concat(variableName,\" = \").concat(initialValue,\";\\n\");return code;};forBlock['use_variable']=function(block,generator){// Get the variable name from the 'VAR' field\nvar variableName=generator.nameDB_.getName(block.getFieldValue('VAR'),Blockly.VARIABLE_CATEGORY_NAME);// Generate the code to use the variable\nvar code=\"\".concat(variableName);return[code,Order.ATOMIC];};forBlock['assign_variable']=function(block,generator){// Get the variable name from the 'VAR' field\nvar variableName=generator.nameDB_.getName(block.getFieldValue('VAR'),Blockly.VARIABLE_CATEGORY_NAME);// Get the initial value (if provided)\nvar initialValue=generator.valueToCode(block,'VALUE',Order.ASSIGNMENT)||'0';// Generate the code to declare the integer variable\nvar code=\"\".concat(variableName,\" = \").concat(initialValue,\";\\n\");return code;};","map":{"version":3,"names":["Order","Blockly","forBlock","Object","create","block","generator","text","valueToCode","NONE","color","ATOMIC","addText","provideFunction_","concat","FUNCTION_NAME_PLACEHOLDER_","code","num","port","value","condition","doBody","statementToCode","operator","getFieldValue","valueA","valueB","Error","variableName","nameDB_","getName","VARIABLE_CATEGORY_NAME","initialValue","ASSIGNMENT"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/generators/codeGen.js"],"sourcesContent":["import {Order} from 'blockly/javascript';\nimport * as Blockly from 'blockly/core';\n\nexport const forBlock = Object.create(null);\n\nforBlock['add_text'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const color =\n    generator.valueToCode(block, 'COLOR', Order.ATOMIC) || \"'#ffffff'\";\n\n  const addText = generator.provideFunction_(\n      'addText',\n      `function ${generator.FUNCTION_NAME_PLACEHOLDER_}(text, color) {\n\n  // Add text to the output area.\n  const outputDiv = document.getElementById('output');\n  const textEl = document.createElement('p');\n  textEl.innerText = text;\n  textEl.style.color = color;\n  outputDiv.appendChild(textEl);\n}`\n  );\n  // Generate the function call for this block.\n  const code = `${addText}(${text}, ${color});\\n`;\n  return code;\n};\n\nforBlock['print'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `print(${text});\\n`;\n  return code;\n};\n\nforBlock['wait'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `wait(${text});\\n`;\n  return code;\n};\n\nforBlock['set_int'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const num = generator.valueToCode(block, 'NUM', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `int (${text}) = (${num});\\n`;\n  return code;\n};\n\nforBlock['sevenseg'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `print_seven_segment(${text});\\n`;\n  return code;\n};\n\nforBlock['button'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `read_port(${text})`;\n  return [code, 0];\n};\n\nforBlock['beam'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `read_port(${text})`;\n  return [code, 0];\n};\n\nforBlock['switch'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `read_port(${text})`;\n  return [code, 0];\n};\n\nforBlock['motion'] = function (block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // Generate the function call for this block.\n  const code = `read_port(${text})`;\n  return [code, 0];\n};\n\nforBlock['fan'] = function (block, generator) {\n  let port = generator.valueToCode(block, 'PORT', Order.NONE);\n  let value = generator.valueToCode(block, 'VALUE', Order.NONE);\n  // Generate the function call for this block.\n  const code = `write_port(${port}, ${value});\\n`;\n  return code;\n};\n\nforBlock['LED'] = function (block, generator) {\n  let port = generator.valueToCode(block, 'PORT', Order.NONE);\n  let value = generator.valueToCode(block, 'VALUE', Order.NONE);\n  // Generate the function call for this block.\n  const code = `write_port(${port}, ${value});\\n`;\n  return code;\n};\n\nforBlock['if'] = function (block, generator) {\n  // Generate code for the 'if' block\n  var condition = generator.valueToCode(block, 'CONDITION', Order.NONE);\n\n  // If condition is blank, set it to 0\n  if (!condition) {\n    condition = '0';\n  }\n\n  var doBody = generator.statementToCode(block, 'DO');\n\n  var code = 'if (' + condition + ') {\\n' + doBody + '}';\n  \n  return code;\n};\n\nforBlock['binaryOp'] = function (block, generator) {\n  const operator = block.getFieldValue('OPERATOR');\n  \n  let valueA = generator.valueToCode(block, 'A', Order.NONE);\n  let valueB = generator.valueToCode(block, 'B', Order.NONE);\n\n  // If either value is blank, set it to 0\n\n  if (!valueA) {\n    valueA = '0';\n  }\n\n  if (!valueB) {\n    valueB = '0';\n  }\n\n  let code = '';\n\n  // Create the code based on the selected operator\n  switch (operator) {\n    case '+':\n      code = `${valueA} + ${valueB}`;\n      break;\n    case '-':\n      code = `${valueA} - ${valueB}`;\n      break;\n    case '*':\n      code = `${valueA} * ${valueB}`;\n      break;\n    case '/':\n      code = `${valueA} / ${valueB}`;\n      break;\n    case '%':\n      code = `${valueA} % ${valueB}`;\n      break;\n    case '>':\n      code = `${valueA} > ${valueB}`;\n      break;\n    case '<':\n      code = `${valueA} < ${valueB}`;\n      break;\n    default:\n      throw new Error('Unknown operator: ' + operator);\n  }\n\n  return [code, Order.ATOMIC];\n};\n\nforBlock['while'] = function (block, generator) {\n  // Generate code for the 'if' block\n  var condition = generator.valueToCode(block, 'CONDITION', Order.NONE);\n\n  // If condition is blank, set it to 0\n  if (!condition) {\n    condition = '0';\n  }\n\n  var doBody = generator.statementToCode(block, 'DO');\n\n  var code = 'while (' + condition + ') {\\n' + doBody + '}';\n  \n  return code;\n};\n\nforBlock['int_var_declaration'] = function (block, generator) {\n  // Get the variable name from the 'VAR' field\n  const variableName = generator.nameDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n\n  // Get the initial value (if provided)\n  const initialValue = generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n\n  // Generate the code to declare the integer variable\n  const code = `int ${variableName} = ${initialValue};\\n`;\n\n  return code;\n};\n\nforBlock['float_var_declaration'] = function (block, generator) {\n  // Get the variable name from the 'VAR' field\n  const variableName = generator.nameDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n\n  // Get the initial value (if provided)\n  const initialValue = generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n\n  // Generate the code to declare the integer variable\n  const code = `float ${variableName} = ${initialValue};\\n`;\n\n  return code;\n};\n\nforBlock['use_variable'] = function (block, generator) {\n  // Get the variable name from the 'VAR' field\n  const variableName = generator.nameDB_.getName(\n    block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n\n  // Generate the code to use the variable\n  const code = `${variableName}`;\n\n  return [code, Order.ATOMIC];\n};\n\nforBlock['assign_variable'] = function (block, generator) {\n  // Get the variable name from the 'VAR' field\n  const variableName = generator.nameDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n\n  // Get the initial value (if provided)\n  const initialValue = generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n\n  // Generate the code to declare the integer variable\n  const code = `${variableName} = ${initialValue};\\n`;\n\n  return code;\n};\n"],"mappings":"AAAA,OAAQA,KAAK,KAAO,oBAAoB,CACxC,MAAO,GAAK,CAAAC,OAAO,KAAM,cAAc,CAEvC,MAAO,IAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAE3CF,QAAQ,CAAC,UAAU,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CACjD,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE,GAAM,CAAAC,KAAK,CACTJ,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEL,KAAK,CAACW,MAAM,CAAC,EAAI,WAAW,CAEpE,GAAM,CAAAC,OAAO,CAAGN,SAAS,CAACO,gBAAgB,CACtC,SAAS,aAAAC,MAAA,CACGR,SAAS,CAACS,0BAA0B,+PASpD,CAAC,CACD;AACA,GAAM,CAAAC,IAAI,IAAAF,MAAA,CAAMF,OAAO,MAAAE,MAAA,CAAIP,IAAI,OAAAO,MAAA,CAAKJ,KAAK,QAAM,CAC/C,MAAO,CAAAM,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,OAAO,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC9C,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,UAAAF,MAAA,CAAYP,IAAI,QAAM,CAChC,MAAO,CAAAS,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,MAAM,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC7C,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,SAAAF,MAAA,CAAWP,IAAI,QAAM,CAC/B,MAAO,CAAAS,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,SAAS,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAChD,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE,GAAM,CAAAQ,GAAG,CAAGX,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,KAAK,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACnE;AACA,GAAM,CAAAO,IAAI,SAAAF,MAAA,CAAWP,IAAI,UAAAO,MAAA,CAAQG,GAAG,QAAM,CAC1C,MAAO,CAAAD,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,UAAU,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CACjD,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,wBAAAF,MAAA,CAA0BP,IAAI,QAAM,CAC9C,MAAO,CAAAS,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,QAAQ,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC/C,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,cAAAF,MAAA,CAAgBP,IAAI,KAAG,CACjC,MAAO,CAACS,IAAI,CAAE,CAAC,CAAC,CAClB,CAAC,CAEDd,QAAQ,CAAC,MAAM,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC7C,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,cAAAF,MAAA,CAAgBP,IAAI,KAAG,CACjC,MAAO,CAACS,IAAI,CAAE,CAAC,CAAC,CAClB,CAAC,CAEDd,QAAQ,CAAC,QAAQ,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC/C,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,cAAAF,MAAA,CAAgBP,IAAI,KAAG,CACjC,MAAO,CAACS,IAAI,CAAE,CAAC,CAAC,CAClB,CAAC,CAEDd,QAAQ,CAAC,QAAQ,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC/C,GAAM,CAAAC,IAAI,CAAGD,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,EAAI,IAAI,CACrE;AACA,GAAM,CAAAO,IAAI,cAAAF,MAAA,CAAgBP,IAAI,KAAG,CACjC,MAAO,CAACS,IAAI,CAAE,CAAC,CAAC,CAClB,CAAC,CAEDd,QAAQ,CAAC,KAAK,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC5C,GAAI,CAAAY,IAAI,CAAGZ,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,CAC3D,GAAI,CAAAU,KAAK,CAAGb,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEL,KAAK,CAACS,IAAI,CAAC,CAC7D;AACA,GAAM,CAAAO,IAAI,eAAAF,MAAA,CAAiBI,IAAI,OAAAJ,MAAA,CAAKK,KAAK,QAAM,CAC/C,MAAO,CAAAH,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,KAAK,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC5C,GAAI,CAAAY,IAAI,CAAGZ,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,MAAM,CAAEL,KAAK,CAACS,IAAI,CAAC,CAC3D,GAAI,CAAAU,KAAK,CAAGb,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEL,KAAK,CAACS,IAAI,CAAC,CAC7D;AACA,GAAM,CAAAO,IAAI,eAAAF,MAAA,CAAiBI,IAAI,OAAAJ,MAAA,CAAKK,KAAK,QAAM,CAC/C,MAAO,CAAAH,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,IAAI,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC3C;AACA,GAAI,CAAAc,SAAS,CAAGd,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,WAAW,CAAEL,KAAK,CAACS,IAAI,CAAC,CAErE;AACA,GAAI,CAACW,SAAS,CAAE,CACdA,SAAS,CAAG,GAAG,CACjB,CAEA,GAAI,CAAAC,MAAM,CAAGf,SAAS,CAACgB,eAAe,CAACjB,KAAK,CAAE,IAAI,CAAC,CAEnD,GAAI,CAAAW,IAAI,CAAG,MAAM,CAAGI,SAAS,CAAG,OAAO,CAAGC,MAAM,CAAG,GAAG,CAEtD,MAAO,CAAAL,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,UAAU,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CACjD,GAAM,CAAAiB,QAAQ,CAAGlB,KAAK,CAACmB,aAAa,CAAC,UAAU,CAAC,CAEhD,GAAI,CAAAC,MAAM,CAAGnB,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,GAAG,CAAEL,KAAK,CAACS,IAAI,CAAC,CAC1D,GAAI,CAAAiB,MAAM,CAAGpB,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,GAAG,CAAEL,KAAK,CAACS,IAAI,CAAC,CAE1D;AAEA,GAAI,CAACgB,MAAM,CAAE,CACXA,MAAM,CAAG,GAAG,CACd,CAEA,GAAI,CAACC,MAAM,CAAE,CACXA,MAAM,CAAG,GAAG,CACd,CAEA,GAAI,CAAAV,IAAI,CAAG,EAAE,CAEb;AACA,OAAQO,QAAQ,EACd,IAAK,GAAG,CACNP,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,IAAK,GAAG,CACNV,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,IAAK,GAAG,CACNV,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,IAAK,GAAG,CACNV,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,IAAK,GAAG,CACNV,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,IAAK,GAAG,CACNV,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,IAAK,GAAG,CACNV,IAAI,IAAAF,MAAA,CAAMW,MAAM,QAAAX,MAAA,CAAMY,MAAM,CAAE,CAC9B,MACF,QACE,KAAM,IAAI,CAAAC,KAAK,CAAC,oBAAoB,CAAGJ,QAAQ,CAAC,CACpD,CAEA,MAAO,CAACP,IAAI,CAAEhB,KAAK,CAACW,MAAM,CAAC,CAC7B,CAAC,CAEDT,QAAQ,CAAC,OAAO,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC9C;AACA,GAAI,CAAAc,SAAS,CAAGd,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,WAAW,CAAEL,KAAK,CAACS,IAAI,CAAC,CAErE;AACA,GAAI,CAACW,SAAS,CAAE,CACdA,SAAS,CAAG,GAAG,CACjB,CAEA,GAAI,CAAAC,MAAM,CAAGf,SAAS,CAACgB,eAAe,CAACjB,KAAK,CAAE,IAAI,CAAC,CAEnD,GAAI,CAAAW,IAAI,CAAG,SAAS,CAAGI,SAAS,CAAG,OAAO,CAAGC,MAAM,CAAG,GAAG,CAEzD,MAAO,CAAAL,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,qBAAqB,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC5D;AACA,GAAM,CAAAsB,YAAY,CAAGtB,SAAS,CAACuB,OAAO,CAACC,OAAO,CAC1CzB,KAAK,CAACmB,aAAa,CAAC,KAAK,CAAC,CAAEvB,OAAO,CAAC8B,sBAAsB,CAAC,CAE/D;AACA,GAAM,CAAAC,YAAY,CAAG1B,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEL,KAAK,CAACiC,UAAU,CAAC,EAAI,GAAG,CAEnF;AACA,GAAM,CAAAjB,IAAI,QAAAF,MAAA,CAAUc,YAAY,QAAAd,MAAA,CAAMkB,YAAY,OAAK,CAEvD,MAAO,CAAAhB,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,uBAAuB,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CAC9D;AACA,GAAM,CAAAsB,YAAY,CAAGtB,SAAS,CAACuB,OAAO,CAACC,OAAO,CAC1CzB,KAAK,CAACmB,aAAa,CAAC,KAAK,CAAC,CAAEvB,OAAO,CAAC8B,sBAAsB,CAAC,CAE/D;AACA,GAAM,CAAAC,YAAY,CAAG1B,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEL,KAAK,CAACiC,UAAU,CAAC,EAAI,GAAG,CAEnF;AACA,GAAM,CAAAjB,IAAI,UAAAF,MAAA,CAAYc,YAAY,QAAAd,MAAA,CAAMkB,YAAY,OAAK,CAEzD,MAAO,CAAAhB,IAAI,CACb,CAAC,CAEDd,QAAQ,CAAC,cAAc,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CACrD;AACA,GAAM,CAAAsB,YAAY,CAAGtB,SAAS,CAACuB,OAAO,CAACC,OAAO,CAC5CzB,KAAK,CAACmB,aAAa,CAAC,KAAK,CAAC,CAAEvB,OAAO,CAAC8B,sBAAsB,CAAC,CAE7D;AACA,GAAM,CAAAf,IAAI,IAAAF,MAAA,CAAMc,YAAY,CAAE,CAE9B,MAAO,CAACZ,IAAI,CAAEhB,KAAK,CAACW,MAAM,CAAC,CAC7B,CAAC,CAEDT,QAAQ,CAAC,iBAAiB,CAAC,CAAG,SAAUG,KAAK,CAAEC,SAAS,CAAE,CACxD;AACA,GAAM,CAAAsB,YAAY,CAAGtB,SAAS,CAACuB,OAAO,CAACC,OAAO,CAC1CzB,KAAK,CAACmB,aAAa,CAAC,KAAK,CAAC,CAAEvB,OAAO,CAAC8B,sBAAsB,CAAC,CAE/D;AACA,GAAM,CAAAC,YAAY,CAAG1B,SAAS,CAACE,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEL,KAAK,CAACiC,UAAU,CAAC,EAAI,GAAG,CAEnF;AACA,GAAM,CAAAjB,IAAI,IAAAF,MAAA,CAAMc,YAAY,QAAAd,MAAA,CAAMkB,YAAY,OAAK,CAEnD,MAAO,CAAAhB,IAAI,CACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}