{"ast":null,"code":"// Do not edit this file; automatically generated.\n\n/* eslint-disable */\n;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([\"./blockly_compressed.js\"], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require(\"./blockly_compressed.js\"));\n  } else {\n    // Script\n    root.javascript = factory(root.Blockly);\n    root.Blockly.JavaScript = root.javascript.javascriptGenerator;\n  }\n})(this, function (__parent__) {\n  var $ = __parent__.__namespace__;\n  var colour_picker$$module$build$src$generators$javascript$colour = function (a, b) {\n      return [b.quote_(a.getFieldValue(\"COLOUR\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    colour_random$$module$build$src$generators$javascript$colour = function (a, b) {\n      return [b.provideFunction_(\"colourRandom\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`) + \"()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    colour_rgb$$module$build$src$generators$javascript$colour = function (a, b) {\n      const c = b.valueToCode(a, \"RED\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0,\n        d = b.valueToCode(a, \"GREEN\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0;\n      a = b.valueToCode(a, \"BLUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0;\n      return [b.provideFunction_(\"colourRgb\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    colour_blend$$module$build$src$generators$javascript$colour = function (a, b) {\n      const c = b.valueToCode(a, \"COLOUR1\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"'#000000'\",\n        d = b.valueToCode(a, \"COLOUR2\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"'#000000'\";\n      a = b.valueToCode(a, \"RATIO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || .5;\n      return [b.provideFunction_(\"colourBlend\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_create_empty$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [\"[]\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    lists_create_with$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = Array(a.itemCount_);\n      for (let d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      return [\"[\" + c.join(\", \") + \"]\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    lists_repeat$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = b.provideFunction_(\"listsRepeat\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`),\n        d = b.valueToCode(a, \"ITEM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [c + \"(\" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_length$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [(b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n    },\n    lists_isEmpty$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [\"!\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT];\n    },\n    lists_indexOf$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION] : [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_getIndex$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      var e = b.valueToCode(a, \"VALUE\", \"RANDOM\" === d ? Order$$module$build$src$generators$javascript$javascript_generator.NONE : Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      switch (d) {\n        case \"FIRST\":\n          if (\"GET\" === c) return [e + \"[0]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".shift()\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"REMOVE\" === c) return e + \".shift();\\n\";\n          break;\n        case \"LAST\":\n          if (\"GET\" === c) return [e + \".slice(-1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop()\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"REMOVE\" === c) return e + \".pop();\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjusted(a, \"AT\");\n          if (\"GET\" === c) return [e + \"[\" + a + \"]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".splice(\" + a + \", 1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".splice(\" + a + \", 1);\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjusted(a, \"AT\", 1, !0);\n          if (\"GET\" === c) return [e + \".slice(\" + a + \")[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"GET_REMOVE\" === c) return [e + \".splice(\" + a + \", 1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".splice(\" + a + \", 1);\";\n          break;\n        case \"RANDOM\":\n          e = b.provideFunction_(\"listsGetRandomItem\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`) + \"(\" + e + \", \" + (\"GET\" !== c) + \")\";\n          if (\"GET\" === c || \"GET_REMOVE\" === c) return [e, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \";\\n\";\n      }\n      throw Error(\"Unhandled combination (lists_getIndex).\");\n    },\n    lists_setIndex$$module$build$src$generators$javascript$lists = function (a, b) {\n      function c() {\n        if (d.match(/^\\w+$/)) return \"\";\n        const h = b.nameDB_.getDistinctName(\"tmpList\", $.NameType$$module$build$src$core$names.VARIABLE),\n          k = \"var \" + h + \" = \" + d + \";\\n\";\n        d = h;\n        return k;\n      }\n      let d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      const e = a.getFieldValue(\"MODE\") || \"GET\";\n      var f = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      const g = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"null\";\n      switch (f) {\n        case \"FIRST\":\n          if (\"SET\" === e) return d + \"[0] = \" + g + \";\\n\";\n          if (\"INSERT\" === e) return d + \".unshift(\" + g + \");\\n\";\n          break;\n        case \"LAST\":\n          if (\"SET\" === e) return c() + (d + \"[\" + d + \".length - 1] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return d + \".push(\" + g + \");\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjusted(a, \"AT\");\n          if (\"SET\" === e) return d + \"[\" + a + \"] = \" + g + \";\\n\";\n          if (\"INSERT\" === e) return d + \".splice(\" + a + \", 0, \" + g + \");\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjusted(a, \"AT\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n          f = c();\n          if (\"SET\" === e) return f + (d + \"[\" + d + \".length - \" + a + \"] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return f + (d + \".splice(\" + d + \".length - \" + a + \", 0, \" + g + \");\\n\");\n          break;\n        case \"RANDOM\":\n          a = c();\n          f = b.nameDB_.getDistinctName(\"tmpX\", $.NameType$$module$build$src$core$names.VARIABLE);\n          a += \"var \" + f + \" = Math.floor(Math.random() * \" + d + \".length);\\n\";\n          if (\"SET\" === e) return a + (d + \"[\" + f + \"] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return a + (d + \".splice(\" + f + \", 0, \" + g + \");\\n\");\n      }\n      throw Error(\"Unhandled combination (lists_setIndex).\");\n    },\n    lists_getSublist$$module$build$src$generators$javascript$lists = function (a, b) {\n      var c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\",\n        d = a.getFieldValue(\"WHERE1\");\n      const e = a.getFieldValue(\"WHERE2\");\n      if (\"FIRST\" === d && \"LAST\" === e) c += \".slice(0)\";else if (c.match(/^\\w+$/) || \"FROM_END\" !== d && \"FROM_START\" === e) {\n        switch (d) {\n          case \"FROM_START\":\n            d = b.getAdjusted(a, \"AT1\");\n            break;\n          case \"FROM_END\":\n            d = b.getAdjusted(a, \"AT1\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            d = c + \".length - \" + d;\n            break;\n          case \"FIRST\":\n            d = \"0\";\n            break;\n          default:\n            throw Error(\"Unhandled option (lists_getSublist).\");\n        }\n        switch (e) {\n          case \"FROM_START\":\n            b = b.getAdjusted(a, \"AT2\", 1);\n            break;\n          case \"FROM_END\":\n            b = b.getAdjusted(a, \"AT2\", 0, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            b = c + \".length - \" + b;\n            break;\n          case \"LAST\":\n            b = c + \".length\";\n            break;\n          default:\n            throw Error(\"Unhandled option (lists_getSublist).\");\n        }\n        c = c + \".slice(\" + d + \", \" + b + \")\";\n      } else {\n        const f = b.getAdjusted(a, \"AT1\");\n        a = b.getAdjusted(a, \"AT2\");\n        const g = {\n          FIRST: \"First\",\n          LAST: \"Last\",\n          FROM_START: \"FromStart\",\n          FROM_END: \"FromEnd\"\n        };\n        c = b.provideFunction_(\"subsequence\" + g[d] + g[e], `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(sequence${\"FROM_END\" === d || \"FROM_START\" === d ? \", at1\" : \"\"}${\"FROM_END\" === e || \"FROM_START\" === e ? \", at2\" : \"\"}) {\n  var start = ${getSubstringIndex$$module$build$src$generators$javascript$lists(\"sequence\", d, \"at1\")};\n  var end = ${getSubstringIndex$$module$build$src$generators$javascript$lists(\"sequence\", e, \"at2\")} + 1;\n  return sequence.slice(start, end);\n}\n`) + \"(\" + c + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + f : \"\") + (\"FROM_END\" === e || \"FROM_START\" === e ? \", \" + a : \"\") + \")\";\n      }\n      return [c, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_sort$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL) || \"[]\",\n        d = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n      a = a.getFieldValue(\"TYPE\");\n      b = b.provideFunction_(\"listsGetSortCompare\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n      return [c + \".slice().sort(\" + b + '(\"' + a + '\", ' + d + \"))\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_split$$module$build$src$generators$javascript$lists = function (a, b) {\n      let c = b.valueToCode(a, \"INPUT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER);\n      b = b.valueToCode(a, \"DELIM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = a.getFieldValue(\"MODE\");\n      if (\"SPLIT\" === a) c || (c = \"''\"), a = \"split\";else if (\"JOIN\" === a) c || (c = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n      return [c + \".\" + a + \"(\" + b + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_reverse$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [(b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL) || \"[]\") + \".slice().reverse()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    controls_if$$module$build$src$generators$javascript$logic = function (a, b) {\n      var c = 0;\n      let d = \"\";\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      do {\n        const e = b.valueToCode(a, \"IF\" + c, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\";\n        let f = b.statementToCode(a, \"DO\" + c);\n        b.STATEMENT_SUFFIX && (f = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + f);\n        d += (0 < c ? \" else \" : \"\") + \"if (\" + e + \") {\\n\" + f + \"}\";\n        c++;\n      } while (a.getInput(\"IF\" + c));\n      if (a.getInput(\"ELSE\") || b.STATEMENT_SUFFIX) c = b.statementToCode(a, \"ELSE\"), b.STATEMENT_SUFFIX && (c = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + c), d += \" else {\\n\" + c + \"}\";\n      return d + \"\\n\";\n    },\n    logic_compare$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = {\n          EQ: \"==\",\n          NEQ: \"!=\",\n          LT: \"<\",\n          LTE: \"<=\",\n          GT: \">\",\n          GTE: \">=\"\n        }[a.getFieldValue(\"OP\")],\n        d = \"==\" === c || \"!=\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY : Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL,\n        e = b.valueToCode(a, \"A\", d) || \"0\";\n      a = b.valueToCode(a, \"B\", d) || \"0\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_operation$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = \"AND\" === a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        d = \"&&\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND : Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR;\n      let e = b.valueToCode(a, \"A\", d);\n      a = b.valueToCode(a, \"B\", d);\n      e || a ? (b = \"&&\" === c ? \"true\" : \"false\", e || (e = b), a || (a = b)) : a = e = \"false\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_negate$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT;\n      return [\"!\" + (b.valueToCode(a, \"BOOL\", c) || \"true\"), c];\n    },\n    logic_boolean$$module$build$src$generators$javascript$logic = function (a, b) {\n      return [\"TRUE\" === a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    logic_null$$module$build$src$generators$javascript$logic = function (a, b) {\n      return [\"null\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    logic_ternary$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = b.valueToCode(a, \"IF\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"false\",\n        d = b.valueToCode(a, \"THEN\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"null\";\n      a = b.valueToCode(a, \"ELSE\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"null\";\n      return [c + \" ? \" + d + \" : \" + a, Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL];\n    },\n    controls_repeat_ext$$module$build$src$generators$javascript$loops = function (a, b) {\n      let c;\n      c = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : b.valueToCode(a, \"TIMES\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      let d = b.statementToCode(a, \"DO\");\n      d = b.addLoopTrap(d, a);\n      a = \"\";\n      const e = b.nameDB_.getDistinctName(\"count\", $.NameType$$module$build$src$core$names.VARIABLE);\n      let f = c;\n      c.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(c) || (f = b.nameDB_.getDistinctName(\"repeat_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + f + \" = \" + c + \";\\n\");\n      return a + (\"for (var \" + e + \" = 0; \" + e + \" < \" + f + \"; \" + e + \"++) {\\n\" + d + \"}\\n\");\n    },\n    controls_whileUntil$$module$build$src$generators$javascript$loops = function (a, b) {\n      const c = \"UNTIL\" === a.getFieldValue(\"MODE\");\n      let d = b.valueToCode(a, \"BOOL\", c ? Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\",\n        e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a);\n      c && (d = \"!\" + d);\n      return \"while (\" + d + \") {\\n\" + e + \"}\\n\";\n    },\n    controls_for$$module$build$src$generators$javascript$loops = function (a, b) {\n      var c = b.getVariableName(a.getFieldValue(\"VAR\")),\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\",\n        e = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      const f = b.valueToCode(a, \"BY\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"1\";\n      let g = b.statementToCode(a, \"DO\");\n      g = b.addLoopTrap(g, a);\n      if ($.isNumber$$module$build$src$core$utils$string(d) && $.isNumber$$module$build$src$core$utils$string(e) && $.isNumber$$module$build$src$core$utils$string(f)) b = Number(d) <= Number(e), a = \"for (\" + c + \" = \" + d + \"; \" + c + (b ? \" <= \" : \" >= \") + e + \"; \" + c, c = Math.abs(Number(f)), a = 1 === c ? a + (b ? \"++\" : \"--\") : a + ((b ? \" += \" : \" -= \") + c), a += \") {\\n\" + g + \"}\\n\";else {\n        a = \"\";\n        let h = d;\n        d.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(d) || (h = b.nameDB_.getDistinctName(c + \"_start\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + h + \" = \" + d + \";\\n\");\n        d = e;\n        e.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(e) || (d = b.nameDB_.getDistinctName(c + \"_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + d + \" = \" + e + \";\\n\");\n        e = b.nameDB_.getDistinctName(c + \"_inc\", $.NameType$$module$build$src$core$names.VARIABLE);\n        a += \"var \" + e + \" = \";\n        a = $.isNumber$$module$build$src$core$utils$string(f) ? a + (Math.abs(f) + \";\\n\") : a + (\"Math.abs(\" + f + \");\\n\");\n        a += \"if (\" + h + \" > \" + d + \") {\\n\";\n        a += b.INDENT + e + \" = -\" + e + \";\\n\";\n        a = a + \"}\\nfor (\" + (c + \" = \" + h + \"; \" + e + \" >= 0 ? \" + c + \" <= \" + d + \" : \" + c + \" >= \" + d + \"; \" + c + \" += \" + e + \") {\\n\" + g + \"}\\n\");\n      }\n      return a;\n    },\n    controls_forEach$$module$build$src$generators$javascript$loops = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      var d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"[]\";\n      let e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a);\n      a = \"\";\n      let f = d;\n      d.match(/^\\w+$/) || (f = b.nameDB_.getDistinctName(c + \"_list\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + f + \" = \" + d + \";\\n\");\n      d = b.nameDB_.getDistinctName(c + \"_index\", $.NameType$$module$build$src$core$names.VARIABLE);\n      e = b.INDENT + c + \" = \" + f + \"[\" + d + \"];\\n\" + e;\n      return a + (\"for (var \" + d + \" in \" + f + \") {\\n\" + e + \"}\\n\");\n    },\n    controls_flow_statements$$module$build$src$generators$javascript$loops = function (a, b) {\n      let c = \"\";\n      b.STATEMENT_PREFIX && (c += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (c += b.injectId(b.STATEMENT_SUFFIX, a));\n      if (b.STATEMENT_PREFIX) {\n        const d = a.getSurroundLoop();\n        d && !d.suppressPrefixSuffix && (c += b.injectId(b.STATEMENT_PREFIX, d));\n      }\n      switch (a.getFieldValue(\"FLOW\")) {\n        case \"BREAK\":\n          return c + \"break;\\n\";\n        case \"CONTINUE\":\n          return c + \"continue;\\n\";\n      }\n      throw Error(\"Unknown flow statement.\");\n    },\n    math_number$$module$build$src$generators$javascript$math = function (a, b) {\n      a = Number(a.getFieldValue(\"NUM\"));\n      return [a, 0 <= a ? Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC : Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION];\n    },\n    math_arithmetic$$module$build$src$generators$javascript$math = function (a, b) {\n      var c = {\n        ADD: [\" + \", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION],\n        MINUS: [\" - \", Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION],\n        MULTIPLY: [\" * \", Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION],\n        DIVIDE: [\" / \", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION],\n        POWER: [null, Order$$module$build$src$generators$javascript$javascript_generator.NONE]\n      }[a.getFieldValue(\"OP\")];\n      const d = c[0];\n      c = c[1];\n      const e = b.valueToCode(a, \"A\", c) || \"0\";\n      a = b.valueToCode(a, \"B\", c) || \"0\";\n      return d ? [e + d + a, c] : [\"Math.pow(\" + e + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_single$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = a.getFieldValue(\"OP\");\n      let d;\n      if (\"NEG\" === c) return a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION) || \"0\", \"-\" === a[0] && (a = \" \" + a), [\"-\" + a, Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION];\n      a = \"SIN\" === c || \"COS\" === c || \"TAN\" === c ? b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION) || \"0\" : b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      switch (c) {\n        case \"ABS\":\n          d = \"Math.abs(\" + a + \")\";\n          break;\n        case \"ROOT\":\n          d = \"Math.sqrt(\" + a + \")\";\n          break;\n        case \"LN\":\n          d = \"Math.log(\" + a + \")\";\n          break;\n        case \"EXP\":\n          d = \"Math.exp(\" + a + \")\";\n          break;\n        case \"POW10\":\n          d = \"Math.pow(10,\" + a + \")\";\n          break;\n        case \"ROUND\":\n          d = \"Math.round(\" + a + \")\";\n          break;\n        case \"ROUNDUP\":\n          d = \"Math.ceil(\" + a + \")\";\n          break;\n        case \"ROUNDDOWN\":\n          d = \"Math.floor(\" + a + \")\";\n          break;\n        case \"SIN\":\n          d = \"Math.sin(\" + a + \" / 180 * Math.PI)\";\n          break;\n        case \"COS\":\n          d = \"Math.cos(\" + a + \" / 180 * Math.PI)\";\n          break;\n        case \"TAN\":\n          d = \"Math.tan(\" + a + \" / 180 * Math.PI)\";\n      }\n      if (d) return [d, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      switch (c) {\n        case \"LOG10\":\n          d = \"Math.log(\" + a + \") / Math.log(10)\";\n          break;\n        case \"ASIN\":\n          d = \"Math.asin(\" + a + \") / Math.PI * 180\";\n          break;\n        case \"ACOS\":\n          d = \"Math.acos(\" + a + \") / Math.PI * 180\";\n          break;\n        case \"ATAN\":\n          d = \"Math.atan(\" + a + \") / Math.PI * 180\";\n          break;\n        default:\n          throw Error(\"Unknown math operator: \" + c);\n      }\n      return [d, Order$$module$build$src$generators$javascript$javascript_generator.DIVISION];\n    },\n    math_constant$$module$build$src$generators$javascript$math = function (a, b) {\n      return {\n        PI: [\"Math.PI\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        E: [\"Math.E\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION],\n        SQRT2: [\"Math.SQRT2\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        SQRT1_2: [\"Math.SQRT1_2\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        INFINITY: [\"Infinity\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC]\n      }[a.getFieldValue(\"CONSTANT\")];\n    },\n    math_number_property$$module$build$src$generators$javascript$math = function (a, b) {\n      var c = {\n        EVEN: [\" % 2 === 0\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        ODD: [\" % 2 === 1\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        WHOLE: [\" % 1 === 0\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        POSITIVE: [\" > 0\", Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL, Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL],\n        NEGATIVE: [\" < 0\", Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL, Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL],\n        DIVISIBLE_BY: [null, Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        PRIME: [null, Order$$module$build$src$generators$javascript$javascript_generator.NONE, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL]\n      };\n      const d = a.getFieldValue(\"PROPERTY\"),\n        [e, f, g] = c[d];\n      c = b.valueToCode(a, \"NUMBER_TO_CHECK\", f) || \"0\";\n      \"PRIME\" === d ? a = b.provideFunction_(\"mathIsPrime\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`) + \"(\" + c + \")\" : \"DIVISIBLE_BY\" === d ? (a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\", a = c + \" % \" + a + \" === 0\") : a = c + e;\n      return [a, g];\n    },\n    math_change$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"DELTA\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION) || \"0\";\n      a = b.getVariableName(a.getFieldValue(\"VAR\"));\n      return a + \" = (typeof \" + a + \" === 'number' ? \" + a + \" : 0) + \" + c + \";\\n\";\n    },\n    math_on_list$$module$build$src$generators$javascript$math = function (a, b) {\n      var c = a.getFieldValue(\"OP\");\n      switch (c) {\n        case \"SUM\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n          a += \".reduce(function(x, y) {return x + y;}, 0)\";\n          break;\n        case \"MIN\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = \"Math.min.apply(null, \" + a + \")\";\n          break;\n        case \"MAX\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = \"Math.max.apply(null, \" + a + \")\";\n          break;\n        case \"AVERAGE\":\n          c = b.provideFunction_(\"mathMean\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"MEDIAN\":\n          c = b.provideFunction_(\"mathMedian\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"MODE\":\n          c = b.provideFunction_(\"mathModes\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"STD_DEV\":\n          c = b.provideFunction_(\"mathStandardDeviation\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"RANDOM\":\n          c = b.provideFunction_(\"mathRandomList\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        default:\n          throw Error(\"Unknown operator: \" + c);\n      }\n      return [a, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_modulo$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"DIVIDEND\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\";\n      a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\";\n      return [c + \" % \" + a, Order$$module$build$src$generators$javascript$javascript_generator.MODULUS];\n    },\n    math_constrain$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\",\n        d = b.valueToCode(a, \"LOW\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"HIGH\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"Infinity\";\n      return [\"Math.min(Math.max(\" + c + \", \" + d + \"), \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_random_int$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [b.provideFunction_(\"mathRandomInt\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`) + \"(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_random_float$$module$build$src$generators$javascript$math = function (a, b) {\n      return [\"Math.random()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_atan2$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"X\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [\"Math.atan2(\" + (b.valueToCode(a, \"Y\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\") + \", \" + c + \") / Math.PI * 180\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION];\n    },\n    procedures_defreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      const c = b.getProcedureName(a.getFieldValue(\"NAME\"));\n      var d = \"\";\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (d += b.injectId(b.STATEMENT_SUFFIX, a));\n      d && (d = b.prefixLines(d, b.INDENT));\n      let e = \"\";\n      b.INFINITE_LOOP_TRAP && (e = b.prefixLines(b.injectId(b.INFINITE_LOOP_TRAP, a), b.INDENT));\n      const f = b.statementToCode(a, \"STACK\");\n      let g = b.valueToCode(a, \"RETURN\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"\",\n        h = \"\";\n      f && g && (h = d);\n      g && (g = b.INDENT + \"return \" + g + \";\\n\");\n      const k = [],\n        l = a.getVars();\n      for (let m = 0; m < l.length; m++) k[m] = b.getVariableName(l[m]);\n      d = \"function \" + c + \"(\" + k.join(\", \") + \") {\\n\" + d + e + f + h + g + \"}\";\n      d = b.scrub_(a, d);\n      b.definitions_[\"%\" + c] = d;\n      return null;\n    },\n    procedures_callreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      const c = b.getProcedureName(a.getFieldValue(\"NAME\")),\n        d = [],\n        e = a.getVars();\n      for (let f = 0; f < e.length; f++) d[f] = b.valueToCode(a, \"ARG\" + f, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      return [c + \"(\" + d.join(\", \") + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    procedures_callnoreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      return b.forBlock.procedures_callreturn(a, b)[0] + \";\\n\";\n    },\n    procedures_ifreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      let c = \"if (\" + (b.valueToCode(a, \"CONDITION\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\") + \") {\\n\";\n      b.STATEMENT_SUFFIX && (c += b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT));\n      a.hasReturnValue_ ? (a = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\", c += b.INDENT + \"return \" + a + \";\\n\") : c += b.INDENT + \"return;\\n\";\n      return c + \"}\\n\";\n    },\n    text$$module$build$src$generators$javascript$text = function (a, b) {\n      return [b.quote_(a.getFieldValue(\"TEXT\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    text_multiline$$module$build$src$generators$javascript$text = function (a, b) {\n      a = b.multiline_quote_(a.getFieldValue(\"TEXT\"));\n      b = -1 !== a.indexOf(\"+\") ? Order$$module$build$src$generators$javascript$javascript_generator.ADDITION : Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC;\n      return [a, b];\n    },\n    text_join$$module$build$src$generators$javascript$text = function (a, b) {\n      switch (a.itemCount_) {\n        case 0:\n          return [\"''\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n        case 1:\n          return a = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\", forceString$$module$build$src$generators$javascript$text(a);\n        case 2:\n          var c = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          a = b.valueToCode(a, \"ADD1\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          return [forceString$$module$build$src$generators$javascript$text(c)[0] + \" + \" + forceString$$module$build$src$generators$javascript$text(a)[0], Order$$module$build$src$generators$javascript$javascript_generator.ADDITION];\n        default:\n          c = Array(a.itemCount_);\n          for (let d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          return [\"[\" + c.join(\",\") + \"].join('')\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      }\n    },\n    text_append$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      a = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return c + \" += \" + forceString$$module$build$src$generators$javascript$text(a)[0] + \";\\n\";\n    },\n    text_length$$module$build$src$generators$javascript$text = function (a, b) {\n      return [(b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n    },\n    text_isEmpty$$module$build$src$generators$javascript$text = function (a, b) {\n      return [\"!\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT];\n    },\n    text_indexOf$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION] : [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_charAt$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = b.valueToCode(a, \"VALUE\", \"RANDOM\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.NONE : Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\";\n      switch (c) {\n        case \"FIRST\":\n          return [d + \".charAt(0)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"LAST\":\n          return [d + \".slice(-1)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"FROM_START\":\n          return a = b.getAdjusted(a, \"AT\"), [d + \".charAt(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"FROM_END\":\n          return a = b.getAdjusted(a, \"AT\", 1, !0), [d + \".slice(\" + a + \").charAt(0)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"RANDOM\":\n          return [b.provideFunction_(\"textRandomLetter\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`) + \"(\" + d + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      }\n      throw Error(\"Unhandled option (text_charAt).\");\n    },\n    text_getSubstring$$module$build$src$generators$javascript$text = function (a, b) {\n      var c = a.getFieldValue(\"WHERE1\");\n      const d = a.getFieldValue(\"WHERE2\");\n      var e = \"FROM_END\" !== c && \"LAST\" !== c && \"FROM_END\" !== d && \"LAST\" !== d,\n        f = b.valueToCode(a, \"STRING\", e ? Order$$module$build$src$generators$javascript$javascript_generator.MEMBER : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      if (\"FIRST\" === c && \"LAST\" === d) return [f, Order$$module$build$src$generators$javascript$javascript_generator.NONE];\n      if (f.match(/^'?\\w+'?$/) || e) {\n        switch (c) {\n          case \"FROM_START\":\n            c = b.getAdjusted(a, \"AT1\");\n            break;\n          case \"FROM_END\":\n            c = b.getAdjusted(a, \"AT1\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            c = f + \".length - \" + c;\n            break;\n          case \"FIRST\":\n            c = \"0\";\n            break;\n          default:\n            throw Error(\"Unhandled option (text_getSubstring).\");\n        }\n        switch (d) {\n          case \"FROM_START\":\n            b = b.getAdjusted(a, \"AT2\", 1);\n            break;\n          case \"FROM_END\":\n            b = b.getAdjusted(a, \"AT2\", 0, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            b = f + \".length - \" + b;\n            break;\n          case \"LAST\":\n            b = f + \".length\";\n            break;\n          default:\n            throw Error(\"Unhandled option (text_getSubstring).\");\n        }\n        f = f + \".slice(\" + c + \", \" + b + \")\";\n      } else {\n        e = b.getAdjusted(a, \"AT1\");\n        a = b.getAdjusted(a, \"AT2\");\n        const g = {\n          FIRST: \"First\",\n          LAST: \"Last\",\n          FROM_START: \"FromStart\",\n          FROM_END: \"FromEnd\"\n        };\n        f = b.provideFunction_(\"subsequence\" + g[c] + g[d], `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(sequence${\"FROM_END\" === c || \"FROM_START\" === c ? \", at1\" : \"\"}${\"FROM_END\" === d || \"FROM_START\" === d ? \", at2\" : \"\"}) {\n  var start = ${getSubstringIndex$$module$build$src$generators$javascript$text(\"sequence\", c, \"at1\")};\n  var end = ${getSubstringIndex$$module$build$src$generators$javascript$text(\"sequence\", d, \"at2\")} + 1;\n  return sequence.slice(start, end);\n}\n`) + \"(\" + f + (\"FROM_END\" === c || \"FROM_START\" === c ? \", \" + e : \"\") + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + a : \"\") + \")\";\n      }\n      return [f, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_changeCase$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = {\n        UPPERCASE: \".toUpperCase()\",\n        LOWERCASE: \".toLowerCase()\",\n        TITLECASE: null\n      }[a.getFieldValue(\"CASE\")];\n      a = b.valueToCode(a, \"TEXT\", c ? Order$$module$build$src$generators$javascript$javascript_generator.MEMBER : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [c ? a + c : b.provideFunction_(\"textToTitleCase\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`) + \"(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_trim$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = {\n        LEFT: \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n        RIGHT: \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n        BOTH: \".trim()\"\n      }[a.getFieldValue(\"MODE\")];\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + c, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_print$$module$build$src$generators$javascript$text = function (a, b) {\n      return \"window.alert(\" + (b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\") + \");\\n\";\n    },\n    text_prompt_ext$$module$build$src$generators$javascript$text = function (a, b) {\n      b = \"window.prompt(\" + (a.getField(\"TEXT\") ? b.quote_(a.getFieldValue(\"TEXT\")) : b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\") + \")\";\n      \"NUMBER\" === a.getFieldValue(\"TYPE\") && (b = \"Number(\" + b + \")\");\n      return [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_count$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"SUB\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [b.provideFunction_(\"textCount\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`) + \"(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_replace$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\",\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [b.provideFunction_(\"textReplace\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_reverse$$module$build$src$generators$javascript$text = function (a, b) {\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".split('').reverse().join('')\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    variables_get$$module$build$src$generators$javascript$variables = function (a, b) {\n      return [b.getVariableName(a.getFieldValue(\"VAR\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    variables_set$$module$build$src$generators$javascript$variables = function (a, b) {\n      const c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      return b.getVariableName(a.getFieldValue(\"VAR\")) + \" = \" + c + \";\\n\";\n    },\n    Order$$module$build$src$generators$javascript$javascript_generator = {\n      ATOMIC: 0,\n      NEW: 1.1,\n      MEMBER: 1.2,\n      FUNCTION_CALL: 2,\n      INCREMENT: 3,\n      DECREMENT: 3,\n      BITWISE_NOT: 4.1,\n      UNARY_PLUS: 4.2,\n      UNARY_NEGATION: 4.3,\n      LOGICAL_NOT: 4.4,\n      TYPEOF: 4.5,\n      VOID: 4.6,\n      DELETE: 4.7,\n      AWAIT: 4.8,\n      EXPONENTIATION: 5,\n      MULTIPLICATION: 5.1,\n      DIVISION: 5.2,\n      MODULUS: 5.3,\n      SUBTRACTION: 6.1,\n      ADDITION: 6.2,\n      BITWISE_SHIFT: 7,\n      RELATIONAL: 8,\n      IN: 8,\n      INSTANCEOF: 8,\n      EQUALITY: 9,\n      BITWISE_AND: 10,\n      BITWISE_XOR: 11,\n      BITWISE_OR: 12,\n      LOGICAL_AND: 13,\n      LOGICAL_OR: 14,\n      CONDITIONAL: 15,\n      ASSIGNMENT: 16,\n      YIELD: 17,\n      COMMA: 18,\n      NONE: 99\n    },\n    JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator = class extends $.CodeGenerator$$module$build$src$core$generator {\n      constructor(a) {\n        super(null != a ? a : \"JavaScript\");\n        this.ORDER_OVERRIDES = [[Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL, Order$$module$build$src$generators$javascript$javascript_generator.MEMBER], [Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL], [Order$$module$build$src$generators$javascript$javascript_generator.MEMBER, Order$$module$build$src$generators$javascript$javascript_generator.MEMBER], [Order$$module$build$src$generators$javascript$javascript_generator.MEMBER, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT], [Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION, Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION], [Order$$module$build$src$generators$javascript$javascript_generator.ADDITION, Order$$module$build$src$generators$javascript$javascript_generator.ADDITION], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR]];\n        this.isInitialized = !1;\n        for (const b in Order$$module$build$src$generators$javascript$javascript_generator) this[\"ORDER_\" + b] = Order$$module$build$src$generators$javascript$javascript_generator[b];\n        this.addReservedWords(\"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments,\" + Object.getOwnPropertyNames(globalThis).join(\",\"));\n      }\n      init(a) {\n        super.init(a);\n        this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new $.Names$$module$build$src$core$names(this.RESERVED_WORDS_);\n        this.nameDB_.setVariableMap(a.getVariableMap());\n        this.nameDB_.populateVariables(a);\n        this.nameDB_.populateProcedures(a);\n        const b = [];\n        var c = $.allDeveloperVariables$$module$build$src$core$variables(a);\n        for (let d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], $.NameType$$module$build$src$core$names.DEVELOPER_VARIABLE));\n        a = $.allUsedVarModels$$module$build$src$core$variables(a);\n        for (c = 0; c < a.length; c++) b.push(this.nameDB_.getName(a[c].getId(), $.NameType$$module$build$src$core$names.VARIABLE));\n        b.length && (this.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n        this.isInitialized = !0;\n      }\n      finish(a) {\n        const b = Object.values(this.definitions_);\n        super.finish(a);\n        this.isInitialized = !1;\n        this.nameDB_.reset();\n        return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n      }\n      scrubNakedValue(a) {\n        return a + \";\\n\";\n      }\n      quote_(a) {\n        a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n        return \"'\" + a + \"'\";\n      }\n      multiline_quote_(a) {\n        return a.split(/\\n/g).map(this.quote_).join(\" + '\\\\n' +\\n\");\n      }\n      scrub_(a, b, c) {\n        let d = \"\";\n        if (!a.outputConnection || !a.outputConnection.targetConnection) {\n          var e = a.getCommentText();\n          e && (e = $.wrap$$module$build$src$core$utils$string(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + \"\\n\", \"// \"));\n          for (let f = 0; f < a.inputList.length; f++) a.inputList[f].type === $.inputTypes$$module$build$src$core$inputs$input_types.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, \"// \"));\n        }\n        a = a.nextConnection && a.nextConnection.targetBlock();\n        c = c ? \"\" : this.blockToCode(a);\n        return d + b + c;\n      }\n      getAdjusted(a, b, c, d, e) {\n        c = c || 0;\n        e = e || this.ORDER_NONE;\n        a.workspace.options.oneBasedIndex && c--;\n        const f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n        let g,\n          h = e;\n        0 < c ? g = h = this.ORDER_ADDITION : 0 > c ? g = h = this.ORDER_SUBTRACTION : d && (g = h = this.ORDER_UNARY_NEGATION);\n        a = this.valueToCode(a, b, h) || f;\n        $.isNumber$$module$build$src$core$utils$string(a) ? (a = Number(a) + c, d && (a = -a)) : (0 < c ? a = a + \" + \" + c : 0 > c && (a = a + \" - \" + -c), d && (a = c ? \"-(\" + a + \")\" : \"-\" + a), g = Math.floor(g), e = Math.floor(e), g && e >= g && (a = \"(\" + a + \")\"));\n        return a;\n      }\n    },\n    module$build$src$generators$javascript$javascript_generator = {};\n  module$build$src$generators$javascript$javascript_generator.JavascriptGenerator = JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript$javascript_generator.Order = Order$$module$build$src$generators$javascript$javascript_generator;\n  var module$build$src$generators$javascript$colour = {};\n  module$build$src$generators$javascript$colour.colour_blend = colour_blend$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_picker = colour_picker$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_random = colour_random$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_rgb = colour_rgb$$module$build$src$generators$javascript$colour;\n  var getSubstringIndex$$module$build$src$generators$javascript$lists = function (a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    },\n    module$build$src$generators$javascript$lists = {};\n  module$build$src$generators$javascript$lists.lists_create_empty = lists_create_empty$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_create_with = lists_create_with$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_getIndex = lists_getIndex$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_getSublist = lists_getSublist$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_indexOf = lists_indexOf$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_isEmpty = lists_isEmpty$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_length = lists_length$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_repeat = lists_repeat$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_reverse = lists_reverse$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_setIndex = lists_setIndex$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_sort = lists_sort$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_split = lists_split$$module$build$src$generators$javascript$lists;\n  var controls_ifelse$$module$build$src$generators$javascript$logic = controls_if$$module$build$src$generators$javascript$logic,\n    module$build$src$generators$javascript$logic = {};\n  module$build$src$generators$javascript$logic.controls_if = controls_if$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.controls_ifelse = controls_if$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_boolean = logic_boolean$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_compare = logic_compare$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_negate = logic_negate$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_null = logic_null$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_operation = logic_operation$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_ternary = logic_ternary$$module$build$src$generators$javascript$logic;\n  var controls_repeat$$module$build$src$generators$javascript$loops = controls_repeat_ext$$module$build$src$generators$javascript$loops,\n    module$build$src$generators$javascript$loops = {};\n  module$build$src$generators$javascript$loops.controls_flow_statements = controls_flow_statements$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_for = controls_for$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_forEach = controls_forEach$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_repeat = controls_repeat_ext$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_repeat_ext = controls_repeat_ext$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_whileUntil = controls_whileUntil$$module$build$src$generators$javascript$loops;\n  var math_round$$module$build$src$generators$javascript$math = math_single$$module$build$src$generators$javascript$math,\n    math_trig$$module$build$src$generators$javascript$math = math_single$$module$build$src$generators$javascript$math,\n    module$build$src$generators$javascript$math = {};\n  module$build$src$generators$javascript$math.math_arithmetic = math_arithmetic$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_atan2 = math_atan2$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_change = math_change$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_constant = math_constant$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_constrain = math_constrain$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_modulo = math_modulo$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_number = math_number$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_number_property = math_number_property$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_on_list = math_on_list$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_random_float = math_random_float$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_random_int = math_random_int$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_round = math_single$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_single = math_single$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_trig = math_single$$module$build$src$generators$javascript$math;\n  var procedures_defnoreturn$$module$build$src$generators$javascript$procedures = procedures_defreturn$$module$build$src$generators$javascript$procedures,\n    module$build$src$generators$javascript$procedures = {};\n  module$build$src$generators$javascript$procedures.procedures_callnoreturn = procedures_callnoreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_callreturn = procedures_callreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_defnoreturn = procedures_defreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_defreturn = procedures_defreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_ifreturn = procedures_ifreturn$$module$build$src$generators$javascript$procedures;\n  var strRegExp$$module$build$src$generators$javascript$text = /^\\s*'([^']|\\\\')*'\\s*$/,\n    forceString$$module$build$src$generators$javascript$text = function (a) {\n      return strRegExp$$module$build$src$generators$javascript$text.test(a) ? [a, Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC] : [\"String(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    getSubstringIndex$$module$build$src$generators$javascript$text = function (a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    },\n    text_prompt$$module$build$src$generators$javascript$text = text_prompt_ext$$module$build$src$generators$javascript$text,\n    module$build$src$generators$javascript$text = {};\n  module$build$src$generators$javascript$text.text = text$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_append = text_append$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_changeCase = text_changeCase$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_charAt = text_charAt$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_count = text_count$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_getSubstring = text_getSubstring$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_indexOf = text_indexOf$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_isEmpty = text_isEmpty$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_join = text_join$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_length = text_length$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_multiline = text_multiline$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_print = text_print$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_prompt = text_prompt_ext$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_prompt_ext = text_prompt_ext$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_replace = text_replace$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_reverse = text_reverse$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_trim = text_trim$$module$build$src$generators$javascript$text;\n  var module$build$src$generators$javascript$variables = {};\n  module$build$src$generators$javascript$variables.variables_get = variables_get$$module$build$src$generators$javascript$variables;\n  module$build$src$generators$javascript$variables.variables_set = variables_set$$module$build$src$generators$javascript$variables;\n  var module$build$src$generators$javascript$variables_dynamic = {};\n  module$build$src$generators$javascript$variables_dynamic.variables_get_dynamic = variables_get$$module$build$src$generators$javascript$variables;\n  module$build$src$generators$javascript$variables_dynamic.variables_set_dynamic = variables_set$$module$build$src$generators$javascript$variables;\n  var javascriptGenerator$$module$build$src$generators$javascript = new JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator();\n  Object.assign(javascriptGenerator$$module$build$src$generators$javascript.forBlock, module$build$src$generators$javascript$colour, module$build$src$generators$javascript$lists, module$build$src$generators$javascript$logic, module$build$src$generators$javascript$loops, module$build$src$generators$javascript$math, module$build$src$generators$javascript$procedures, module$build$src$generators$javascript$text, module$build$src$generators$javascript$variables, module$build$src$generators$javascript$variables_dynamic);\n  var module$build$src$generators$javascript = {};\n  module$build$src$generators$javascript.JavascriptGenerator = JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript.Order = Order$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript.javascriptGenerator = javascriptGenerator$$module$build$src$generators$javascript;\n  module$build$src$generators$javascript.__namespace__ = $;\n  return module$build$src$generators$javascript;\n});","map":{"version":3,"names":["colour_picker$$module$build$src$generators$javascript$colour","a","b","quote_","getFieldValue","Order$$module$build$src$generators$javascript$javascript_generator","ATOMIC","colour_random$$module$build$src$generators$javascript$colour","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb$$module$build$src$generators$javascript$colour","c","valueToCode","NONE","d","colour_blend$$module$build$src$generators$javascript$colour","lists_create_empty$$module$build$src$generators$javascript$lists","lists_create_with$$module$build$src$generators$javascript$lists","Array","itemCount_","join","lists_repeat$$module$build$src$generators$javascript$lists","lists_length$$module$build$src$generators$javascript$lists","MEMBER","lists_isEmpty$$module$build$src$generators$javascript$lists","LOGICAL_NOT","lists_indexOf$$module$build$src$generators$javascript$lists","workspace","options","oneBasedIndex","ADDITION","lists_getIndex$$module$build$src$generators$javascript$lists","e","getAdjusted","Error","lists_setIndex$$module$build$src$generators$javascript$lists","match","h","nameDB_","getDistinctName","$","NameType$$module$build$src$core$names","VARIABLE","k","f","g","ASSIGNMENT","SUBTRACTION","lists_getSublist$$module$build$src$generators$javascript$lists","FIRST","LAST","FROM_START","FROM_END","getSubstringIndex$$module$build$src$generators$javascript$lists","lists_sort$$module$build$src$generators$javascript$lists","lists_split$$module$build$src$generators$javascript$lists","lists_reverse$$module$build$src$generators$javascript$lists","controls_if$$module$build$src$generators$javascript$logic","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare$$module$build$src$generators$javascript$logic","EQ","NEQ","LT","LTE","GT","GTE","EQUALITY","RELATIONAL","logic_operation$$module$build$src$generators$javascript$logic","LOGICAL_AND","LOGICAL_OR","logic_negate$$module$build$src$generators$javascript$logic","logic_boolean$$module$build$src$generators$javascript$logic","logic_null$$module$build$src$generators$javascript$logic","logic_ternary$$module$build$src$generators$javascript$logic","CONDITIONAL","controls_repeat_ext$$module$build$src$generators$javascript$loops","getField","String","Number","addLoopTrap","isNumber$$module$build$src$core$utils$string","controls_whileUntil$$module$build$src$generators$javascript$loops","controls_for$$module$build$src$generators$javascript$loops","getVariableName","Math","abs","controls_forEach$$module$build$src$generators$javascript$loops","controls_flow_statements$$module$build$src$generators$javascript$loops","getSurroundLoop","suppressPrefixSuffix","math_number$$module$build$src$generators$javascript$math","UNARY_NEGATION","math_arithmetic$$module$build$src$generators$javascript$math","ADD","MINUS","MULTIPLY","MULTIPLICATION","DIVIDE","DIVISION","POWER","math_single$$module$build$src$generators$javascript$math","math_constant$$module$build$src$generators$javascript$math","PI","E","GOLDEN_RATIO","SQRT2","SQRT1_2","INFINITY","math_number_property$$module$build$src$generators$javascript$math","EVEN","MODULUS","ODD","WHOLE","POSITIVE","NEGATIVE","DIVISIBLE_BY","PRIME","math_change$$module$build$src$generators$javascript$math","math_on_list$$module$build$src$generators$javascript$math","math_modulo$$module$build$src$generators$javascript$math","math_constrain$$module$build$src$generators$javascript$math","math_random_int$$module$build$src$generators$javascript$math","math_random_float$$module$build$src$generators$javascript$math","math_atan2$$module$build$src$generators$javascript$math","procedures_defreturn$$module$build$src$generators$javascript$procedures","getProcedureName","INFINITE_LOOP_TRAP","l","getVars","m","length","scrub_","definitions_","procedures_callreturn$$module$build$src$generators$javascript$procedures","procedures_callnoreturn$$module$build$src$generators$javascript$procedures","forBlock","procedures_callreturn","procedures_ifreturn$$module$build$src$generators$javascript$procedures","hasReturnValue_","text$$module$build$src$generators$javascript$text","text_multiline$$module$build$src$generators$javascript$text","multiline_quote_","indexOf","text_join$$module$build$src$generators$javascript$text","forceString$$module$build$src$generators$javascript$text","text_append$$module$build$src$generators$javascript$text","text_length$$module$build$src$generators$javascript$text","text_isEmpty$$module$build$src$generators$javascript$text","text_indexOf$$module$build$src$generators$javascript$text","text_charAt$$module$build$src$generators$javascript$text","text_getSubstring$$module$build$src$generators$javascript$text","getSubstringIndex$$module$build$src$generators$javascript$text","text_changeCase$$module$build$src$generators$javascript$text","UPPERCASE","LOWERCASE","TITLECASE","text_trim$$module$build$src$generators$javascript$text","LEFT","RIGHT","BOTH","text_print$$module$build$src$generators$javascript$text","text_prompt_ext$$module$build$src$generators$javascript$text","text_count$$module$build$src$generators$javascript$text","text_replace$$module$build$src$generators$javascript$text","text_reverse$$module$build$src$generators$javascript$text","variables_get$$module$build$src$generators$javascript$variables","variables_set$$module$build$src$generators$javascript$variables","NEW","INCREMENT","DECREMENT","BITWISE_NOT","UNARY_PLUS","TYPEOF","VOID","DELETE","AWAIT","EXPONENTIATION","BITWISE_SHIFT","IN","INSTANCEOF","BITWISE_AND","BITWISE_XOR","BITWISE_OR","YIELD","COMMA","JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator","CodeGenerator$$module$build$src$core$generator","constructor","ORDER_OVERRIDES","isInitialized","addReservedWords","Object","getOwnPropertyNames","globalThis","init","reset","Names$$module$build$src$core$names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","allDeveloperVariables$$module$build$src$core$variables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels$$module$build$src$core$variables","getId","variables","finish","values","scrubNakedValue","replace","split","map","outputConnection","targetConnection","getCommentText","wrap$$module$build$src$core$utils$string","COMMENT_WRAP","inputList","type","inputTypes$$module$build$src$core$inputs$input_types","VALUE","connection","targetBlock","allNestedComments","nextConnection","blockToCode","ORDER_NONE","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_UNARY_NEGATION","floor","module$build$src$generators$javascript$javascript_generator","JavascriptGenerator","Order","module$build$src$generators$javascript$colour","colour_blend","colour_picker","colour_random","colour_rgb","module$build$src$generators$javascript$lists","lists_create_empty","lists_create_with","lists_getIndex","lists_getSublist","lists_indexOf","lists_isEmpty","lists_length","lists_repeat","lists_reverse","lists_setIndex","lists_sort","lists_split","controls_ifelse$$module$build$src$generators$javascript$logic","module$build$src$generators$javascript$logic","controls_if","controls_ifelse","logic_boolean","logic_compare","logic_negate","logic_null","logic_operation","logic_ternary","controls_repeat$$module$build$src$generators$javascript$loops","module$build$src$generators$javascript$loops","controls_flow_statements","controls_for","controls_forEach","controls_repeat","controls_repeat_ext","controls_whileUntil","math_round$$module$build$src$generators$javascript$math","math_trig$$module$build$src$generators$javascript$math","module$build$src$generators$javascript$math","math_arithmetic","math_atan2","math_change","math_constant","math_constrain","math_modulo","math_number","math_number_property","math_on_list","math_random_float","math_random_int","math_round","math_single","math_trig","procedures_defnoreturn$$module$build$src$generators$javascript$procedures","module$build$src$generators$javascript$procedures","procedures_callnoreturn","procedures_defnoreturn","procedures_defreturn","procedures_ifreturn","strRegExp$$module$build$src$generators$javascript$text","test","text_prompt$$module$build$src$generators$javascript$text","module$build$src$generators$javascript$text","text","text_append","text_changeCase","text_charAt","text_count","text_getSubstring","text_indexOf","text_isEmpty","text_join","text_length","text_multiline","text_print","text_prompt","text_prompt_ext","text_replace","text_reverse","text_trim","module$build$src$generators$javascript$variables","variables_get","variables_set","module$build$src$generators$javascript$variables_dynamic","variables_get_dynamic","variables_set_dynamic","javascriptGenerator$$module$build$src$generators$javascript","assign","module$build$src$generators$javascript","javascriptGenerator"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/colour.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/lists.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/logic.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/loops.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/math.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/procedures.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/text.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/variables.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/javascript_generator.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/variables_dynamic.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript.js"],"sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for colour blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.colour\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_('colourRandom', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green =\n      generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue =\n      generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_('colourRgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) ||\n      \"'#000000'\";\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) ||\n      \"'#000000'\";\n  const ratio =\n      generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_('colourBlend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for list blocks.\n * @suppress {missingRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.lists\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) ||\n        'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('listsRepeat', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`);\n  const element =\n      generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount =\n      generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return [list + '.length', Order.MEMBER];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return ['!' + list + '.length', Order.LOGICAL_NOT];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const list =\n      generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      const functionName =\n          generator.provideFunction_('listsGetRandomItem', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`);\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list =\n      generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) ||\n      'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName(\n          'tmpList', NameType.VARIABLE);\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = generator.getAdjusted(\n          block, 'AT', 1, false, Order.SUBTRACTION);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName(\n            'tmpX', NameType.VARIABLE);\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n      list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(\n            block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(\n            block, 'AT2', 0, false, Order.SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const wherePascalCase = {\n      'FIRST': 'First',\n      'LAST': 'Last',\n      'FROM_START': 'FromStart',\n      'FROM_END': 'FromEnd',\n    };\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) ||\n      '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName =\n      generator.provideFunction_('listsGetSortCompare', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n  return [\n    list + '.slice().sort(' + getCompareFunctionName + '(\"' + type + '\", ' +\n        direction + '))',\n    Order.FUNCTION_CALL\n  ];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) ||\n      '[]';\n  const code = list + '.slice().reverse()';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for logic blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.logic\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) ||\n        'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(\n            generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(\n            generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      Order.EQUALITY :\n      Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order = (operator === '&&') ? Order.LOGICAL_AND :\n                                      Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const order = Order.LOGICAL_NOT;\n  const argument0 =\n      generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) ||\n      'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) ||\n      'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) ||\n      'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\n\nexport function controls_repeat_ext(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) ||\n        '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName(\n          'repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL',\n          until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.getVariableName(\n        block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n      generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = generator.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = generator.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = generator.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) ||\n      '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = generator.nameDB_.getDistinctName(\n        variable0 + '_list', NameType.VARIABLE);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = generator.nameDB_.getDistinctName(\n      variable0 + '_index', NameType.VARIABLE);\n  branch = generator.INDENT + variable0 + ' = ' + listVar +\n      '[' + indexVar + '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(\n        generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(\n          generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @suppress {missingRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.math\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? Order.ATOMIC :\n              Order.UNARY_NEGATION;\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.SUBTRACTION],\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.DIVISION],\n    'POWER': [null, Order.NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM',\n        Order.UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM',\n        Order.DIVISION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM',\n        Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.DIVISION];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.PI', Order.MEMBER],\n    'E': ['Math.E', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.DIVISION],\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\n    'INFINITY': ['Infinity', Order.ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nexport function math_number_property(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 === 0', Order.MODULUS, Order.EQUALITY],\n    'ODD': [' % 2 === 1', Order.MODULUS, Order.EQUALITY],\n    'WHOLE': [' % 1 === 0', Order.MODULUS,\n        Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL,\n        Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL,\n        Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MODULUS, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n      generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) ||\n      '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('mathIsPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MODULUS) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  const argument0 = generator.valueToCode(block, 'DELTA',\n      Order.ADDITION) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = (typeof ' + varName + ' === \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = generator.valueToCode(block, 'LIST',\n          Order.MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_('mathMean', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_('mathMedian', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_('mathModes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName =\n          generator.provideFunction_('mathStandardDeviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName =\n          generator.provideFunction_('mathRandomList', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 = generator.valueToCode(block, 'DIVIDEND',\n      Order.MODULUS) || '0';\n  const argument1 = generator.valueToCode(block, 'DIVISOR',\n      Order.MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MODULUS];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW',\n      Order.NONE) || '0';\n  const argument2 = generator.valueToCode(block, 'HIGH',\n      Order.NONE) || 'Infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO',\n      Order.NONE) || '0';\n  const functionName = generator.provideFunction_('mathRandomInt', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Order.FUNCTION_CALL];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y',\n      Order.NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      Order.DIVISION];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.procedures\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(\n        generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(\n          generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] =\n        generator.getVariableName(variables[i]);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) ||\n        'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) ||\n      'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block),\n        generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for text blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.texts\n\nimport {Order} from './javascript_generator.js';\n\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['String(' + value + ')', Order.FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(stringName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code =\n      generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? Order.ADDITION :\n      Order.ATOMIC;\n  return [code, order];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element = generator.valueToCode(block, 'ADD0',\n          Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = generator.valueToCode(block, 'ADD0',\n          Order.NONE) || \"''\";\n      const element1 = generator.valueToCode(block, 'ADD1',\n          Order.NONE) || \"''\";\n      const code = forceString(element0)[0] +\n          ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITION];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] = generator.valueToCode(block, 'ADD' + i,\n            Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const code = varName + ' += ' +\n      forceString(value)[0] + ';\\n';\n  return code;\n};\n\nexport function text_length(block, generator) {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  return [text + '.length', Order.MEMBER];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  return ['!' + text + '.length', Order.LOGICAL_NOT];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  const operator = block.getFieldValue('END') === 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  const substring = generator.valueToCode(block, 'FIND',\n      Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? Order.NONE :\n      Order.MEMBER;\n  const text =\n      generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName =\n          generator.provideFunction_('textRandomLetter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where1 !== 'LAST' &&\n      where2 !== 'FROM_END' && where2 !== 'LAST');\n  const textOrder = requiresLengthCall ? Order.MEMBER :\n      Order.NONE;\n  const text =\n      generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false,\n            Order.SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false,\n            Order.SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\n  const text =\n      generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName =\n        generator.provideFunction_('textToTitleCase', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.MEMBER) || \"''\";\n  return [text + operator, Order.FUNCTION_CALL];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  return 'window.alert(' + msg + ');\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB',\n      Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('textCount', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_replace(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM',\n      Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = generator.provideFunction_('textReplace', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_reverse(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variables\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(\n                        block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\n// Former goog.module ID: Blockly.JavaScript\n\nimport * as Variables from '../../core/variables.js';\nimport * as stringUtils from '../../core/utils/string.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names, NameType} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,            // 0 \"\" ...\n  NEW: 1.1,             // new\n  MEMBER: 1.2,          // . []\n  FUNCTION_CALL: 2,     // ()\n  INCREMENT: 3,         // ++\n  DECREMENT: 3,         // --\n  BITWISE_NOT: 4.1,     // ~\n  UNARY_PLUS: 4.2,      // +\n  UNARY_NEGATION: 4.3,  // -\n  LOGICAL_NOT: 4.4,     // !\n  TYPEOF: 4.5,          // typeof\n  VOID: 4.6,            // void\n  DELETE: 4.7,          // delete\n  AWAIT: 4.8,           // await\n  EXPONENTIATION: 5.0,  // **\n  MULTIPLICATION: 5.1,  // *\n  DIVISION: 5.2,        // /\n  MODULUS: 5.3,         // %\n  SUBTRACTION: 6.1,     // -\n  ADDITION: 6.2,        // +\n  BITWISE_SHIFT: 7,     // << >> >>>\n  RELATIONAL: 8,        // < <= > >=\n  IN: 8,                // in\n  INSTANCEOF: 8,        // instanceof\n  EQUALITY: 9,          // == != === !==\n  BITWISE_AND: 10,      // &\n  BITWISE_XOR: 11,      // ^\n  BITWISE_OR: 12,       // |\n  LOGICAL_AND: 13,      // &&\n  LOGICAL_OR: 14,       // ||\n  CONDITIONAL: 15,      // ?:\n  ASSIGNMENT: 16,       //: += -= **= *= /= %= <<= >>= ...\n  YIELD: 17,            // yield\n  COMMA: 18,            // ,\n  NONE: 99,             // (...)\n};\n\n/**\n * JavaScript code generator class.\n */\nexport class JavascriptGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // !(!foo) -> !!foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a * (b * c) -> a * b * c\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\n    // a + (b + c) -> a + b + c\n    [Order.ADDITION, Order.ADDITION],\n    // a && (b && c) -> a && b && c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a || (b || c) -> a || b || c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n\n  constructor(name) {\n    super(name ?? 'JavaScript');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n        'break,case,catch,class,const,continue,debugger,default,delete,do,' +\n        'else,export,extends,finally,for,function,if,import,in,instanceof,' +\n        'new,return,super,switch,this,throw,try,typeof,var,void,' +\n        'while,with,yield,' +\n        'enum,' +\n        'implements,interface,let,package,private,protected,public,static,' +\n        'await,' +\n        'null,true,false,' +\n        // Magic variable.\n        'arguments,' +\n        // Everything in the current environment (835 items in Chrome,\n        // 104 in Node).\n        Object.getOwnPropertyNames(globalThis).join(',')\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE));\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE));\n    }\n\n    // Declare all of the variables.\n    if (defvars.length) {\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped JavaScript string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} JavaScript string.\n   */\n  quote_(string) {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline JavaScript string, complete\n   * with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} JavaScript string.\n   */\n  multiline_quote_(string) {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    const lines = string.split(/\\n/g).map(this.quote_);\n    return lines.join(' + \\'\\\\n\\' +\\n');\n  }\n\n  /**\n   * Common tasks for generating JavaScript from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The JavaScript code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} JavaScript code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '// ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n    let innerOrder;\n    let outerOrder = order;\n    if (delta > 0) {\n      outerOrder = this.ORDER_ADDITION;\n      innerOrder = this.ORDER_ADDITION;\n    } else if (delta < 0) {\n      outerOrder = this.ORDER_SUBTRACTION;\n      innerOrder = this.ORDER_SUBTRACTION;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_NEGATION;\n      innerOrder = this.ORDER_UNARY_NEGATION;\n    }\n\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = Number(at) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\n\n\n// JavaScript is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating JavaScript for\n *     blocks.  This is the entrypoint for javascript_compressed.js.\n * @suppress {extraRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.all\n\nimport {JavascriptGenerator} from './javascript/javascript_generator.js';\nimport * as colour from './javascript/colour.js';\nimport * as lists from './javascript/lists.js';\nimport * as logic from './javascript/logic.js';\nimport * as loops from './javascript/loops.js';\nimport * as math from './javascript/math.js';\nimport * as procedures from './javascript/procedures.js';\nimport * as text from './javascript/text.js';\nimport * as variables from './javascript/variables.js';\nimport * as variablesDynamic from './javascript/variables_dynamic.js';\n\nexport * from './javascript/javascript_generator.js';\n\n/**\n * JavaScript code generator instance.\n * @type {!JavascriptGenerator}\n */\nexport const javascriptGenerator = new JavascriptGenerator();\n\n// Install per-block-type generator functions:\nObject.assign(\n  javascriptGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}