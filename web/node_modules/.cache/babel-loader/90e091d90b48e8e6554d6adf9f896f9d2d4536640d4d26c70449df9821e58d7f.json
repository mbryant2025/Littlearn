{"ast":null,"code":"import*as Blockly from'blockly/core';// Create a custom block for declaring an integer variable in code.\nvar floatVarDeclaration={'type':'float_var_declaration','message0':'Declare float variable %1 = %2','args0':[{'type':'field_variable','name':'VAR','variable':'my_variable'},{'type':'input_value','name':'VALUE','check':'Number'}],'previousStatement':null,'nextStatement':null,'colour':160,'tooltip':'','helpUrl':''};// Create the block definitions for the JSON-only blocks.\nexport var floatVarDeclarationBlock=Blockly.common.createBlockDefinitionsFromJsonArray([floatVarDeclaration]);","map":{"version":3,"names":["Blockly","floatVarDeclaration","floatVarDeclarationBlock","common","createBlockDefinitionsFromJsonArray"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/blockly/blocks/floatVars.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\n\n// Create a custom block for declaring an integer variable in code.\nconst floatVarDeclaration = {\n  'type': 'float_var_declaration',\n  'message0': 'Declare float variable %1 = %2',\n  'args0': [\n    {\n      'type': 'field_variable',\n      'name': 'VAR',\n      'variable': 'my_variable',\n    },\n    {\n      'type': 'input_value',\n      'name': 'VALUE',\n      'check': 'Number',\n    },\n  ],\n  'previousStatement': null,\n  'nextStatement': null,\n  'colour': 160,\n  'tooltip': '',\n  'helpUrl': '',\n};\n\n// Create the block definitions for the JSON-only blocks.\nexport const floatVarDeclarationBlock = Blockly.common.createBlockDefinitionsFromJsonArray([floatVarDeclaration]);\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,OAAO,KAAM,cAAc,CAEvC;AACA,GAAM,CAAAC,mBAAmB,CAAG,CAC1B,MAAM,CAAE,uBAAuB,CAC/B,UAAU,CAAE,gCAAgC,CAC5C,OAAO,CAAE,CACP,CACE,MAAM,CAAE,gBAAgB,CACxB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,aACd,CAAC,CACD,CACE,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,QACX,CAAC,CACF,CACD,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,GAAG,CACb,SAAS,CAAE,EAAE,CACb,SAAS,CAAE,EACb,CAAC,CAED;AACA,MAAO,IAAM,CAAAC,wBAAwB,CAAGF,OAAO,CAACG,MAAM,CAACC,mCAAmC,CAAC,CAACH,mBAAmB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}