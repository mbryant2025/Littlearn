{"ast":null,"code":"/**\n * Contains all configured adapters for the given environment.\n *\n * @type {Array}\n * @public\n */\nvar adapters = [];\n\n/**\n * Contains all modifier functions.\n *\n * @typs {Array}\n * @public\n */\nvar modifiers = [];\n\n/**\n * Our default logger.\n *\n * @public\n */\nvar logger = function devnull() {};\n\n/**\n * Register a new adapter that will used to find environments.\n *\n * @param {Function} adapter A function that will return the possible env.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n  adapters.push(adapter);\n  return true;\n}\n\n/**\n * Assign a new log method.\n *\n * @param {Function} custom The log method.\n * @public\n */\nfunction set(custom) {\n  logger = custom;\n}\n\n/**\n * Check if the namespace is allowed by any of our adapters.\n *\n * @param {String} namespace The namespace that needs to be enabled\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\n * @public\n */\nfunction enabled(namespace) {\n  var async = [];\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n    if (adapters[i](namespace)) return true;\n  }\n  if (!async.length) return false;\n\n  //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n  return new Promise(function pinky(resolve) {\n    Promise.all(async.map(function prebind(fn) {\n      return fn(namespace);\n    })).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n\n/**\n * Add a new message modifier to the debugger.\n *\n * @param {Function} fn Modification function.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n  modifiers.push(fn);\n  return true;\n}\n\n/**\n * Write data to the supplied logger.\n *\n * @param {Object} meta Meta information about the log.\n * @param {Array} args Arguments for console.log.\n * @public\n */\nfunction write() {\n  logger.apply(logger, arguments);\n}\n\n/**\n * Process the message with the modifiers.\n *\n * @param {Mixed} message The message to be transformed by modifers.\n * @returns {String} Transformed message.\n * @public\n */\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n  return message;\n}\n\n/**\n * Introduce options to the logger function.\n *\n * @param {Function} fn Calback function.\n * @param {Object} options Properties to introduce on fn.\n * @returns {Function} The passed function\n * @public\n */\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n  return fn;\n}\n\n/**\n * Nope, we're not allowed to write messages.\n *\n * @returns {Boolean} false\n * @public\n */\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n\n/**\n * Yep, we're allowed to write debug messages.\n *\n * @param {Object} options The options for the process.\n * @returns {Function} The function that does the logging.\n * @public\n */\nfunction yep(options) {\n  /**\n   * The function that receives the actual debug information.\n   *\n   * @returns {Boolean} indication that we're logging.\n   * @public\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    write.call(write, options, process(args, options));\n    return true;\n  }\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n  return introduce(diagnostics, options);\n}\n\n/**\n * Simple helper function to introduce various of helper methods to our given\n * diagnostics function.\n *\n * @param {Function} diagnostics The diagnostics function.\n * @returns {Function} diagnostics\n * @public\n */\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n  return diagnostics;\n};","map":{"version":3,"names":["adapters","modifiers","logger","devnull","use","adapter","indexOf","push","set","custom","enabled","namespace","async","i","length","Promise","pinky","resolve","all","map","prebind","fn","then","resolved","values","some","Boolean","modify","write","apply","arguments","process","message","introduce","options","has","Object","prototype","hasOwnProperty","key","call","nope","diagnopes","yep","diagnostics","args","Array","slice","module","exports","create"],"sources":["/Users/michaelbryant/node_modules/@dabh/diagnostics/diagnostics.js"],"sourcesContent":["/**\n * Contains all configured adapters for the given environment.\n *\n * @type {Array}\n * @public\n */\nvar adapters = [];\n\n/**\n * Contains all modifier functions.\n *\n * @typs {Array}\n * @public\n */\nvar modifiers = [];\n\n/**\n * Our default logger.\n *\n * @public\n */\nvar logger = function devnull() {};\n\n/**\n * Register a new adapter that will used to find environments.\n *\n * @param {Function} adapter A function that will return the possible env.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n\n  adapters.push(adapter);\n  return true;\n}\n\n/**\n * Assign a new log method.\n *\n * @param {Function} custom The log method.\n * @public\n */\nfunction set(custom) {\n  logger = custom;\n}\n\n/**\n * Check if the namespace is allowed by any of our adapters.\n *\n * @param {String} namespace The namespace that needs to be enabled\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\n * @public\n */\nfunction enabled(namespace) {\n  var async = [];\n\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n\n    if (adapters[i](namespace)) return true;\n  }\n\n  if (!async.length) return false;\n\n  //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n  return new Promise(function pinky(resolve) {\n    Promise.all(\n      async.map(function prebind(fn) {\n        return fn(namespace);\n      })\n    ).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n\n/**\n * Add a new message modifier to the debugger.\n *\n * @param {Function} fn Modification function.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n\n  modifiers.push(fn);\n  return true;\n}\n\n/**\n * Write data to the supplied logger.\n *\n * @param {Object} meta Meta information about the log.\n * @param {Array} args Arguments for console.log.\n * @public\n */\nfunction write() {\n  logger.apply(logger, arguments);\n}\n\n/**\n * Process the message with the modifiers.\n *\n * @param {Mixed} message The message to be transformed by modifers.\n * @returns {String} Transformed message.\n * @public\n */\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n\n  return message;\n}\n\n/**\n * Introduce options to the logger function.\n *\n * @param {Function} fn Calback function.\n * @param {Object} options Properties to introduce on fn.\n * @returns {Function} The passed function\n * @public\n */\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n\n  return fn;\n}\n\n/**\n * Nope, we're not allowed to write messages.\n *\n * @returns {Boolean} false\n * @public\n */\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n\n/**\n * Yep, we're allowed to write debug messages.\n *\n * @param {Object} options The options for the process.\n * @returns {Function} The function that does the logging.\n * @public\n */\nfunction yep(options) {\n  /**\n   * The function that receives the actual debug information.\n   *\n   * @returns {Boolean} indication that we're logging.\n   * @public\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    write.call(write, options, process(args, options));\n    return true;\n  }\n\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(diagnostics, options);\n}\n\n/**\n * Simple helper function to introduce various of helper methods to our given\n * diagnostics function.\n *\n * @param {Function} diagnostics The diagnostics function.\n * @returns {Function} diagnostics\n * @public\n */\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n\n  return diagnostics;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}