{"ast":null,"code":"var _classCallCheck = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _slicedToArray = require(\"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n// Do not edit this file; automatically generated.\n\n/* eslint-disable */\n;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([\"./blockly_compressed.js\"], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require(\"./blockly_compressed.js\"));\n  } else {\n    // Script\n    root.javascript = factory(root.Blockly);\n    root.Blockly.JavaScript = root.javascript.javascriptGenerator;\n  }\n})(this, function (__parent__) {\n  var $ = __parent__.__namespace__;\n  var colour_picker$$module$build$src$generators$javascript$colour = function colour_picker$$module$build$src$generators$javascript$colour(a, b) {\n      return [b.quote_(a.getFieldValue(\"COLOUR\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    colour_random$$module$build$src$generators$javascript$colour = function colour_random$$module$build$src$generators$javascript$colour(a, b) {\n      return [b.provideFunction_(\"colourRandom\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"() {\\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\\n  return '#' + ('00000' + num.toString(16)).substr(-6);\\n}\\n\")) + \"()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    colour_rgb$$module$build$src$generators$javascript$colour = function colour_rgb$$module$build$src$generators$javascript$colour(a, b) {\n      var c = b.valueToCode(a, \"RED\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0,\n        d = b.valueToCode(a, \"GREEN\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0;\n      a = b.valueToCode(a, \"BLUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0;\n      return [b.provideFunction_(\"colourRgb\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(r, g, b) {\\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\\n  return '#' + r + g + b;\\n}\\n\")) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    colour_blend$$module$build$src$generators$javascript$colour = function colour_blend$$module$build$src$generators$javascript$colour(a, b) {\n      var c = b.valueToCode(a, \"COLOUR1\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"'#000000'\",\n        d = b.valueToCode(a, \"COLOUR2\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"'#000000'\";\n      a = b.valueToCode(a, \"RATIO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || .5;\n      return [b.provideFunction_(\"colourBlend\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(c1, c2, ratio) {\\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\\n  var r1 = parseInt(c1.substring(1, 3), 16);\\n  var g1 = parseInt(c1.substring(3, 5), 16);\\n  var b1 = parseInt(c1.substring(5, 7), 16);\\n  var r2 = parseInt(c2.substring(1, 3), 16);\\n  var g2 = parseInt(c2.substring(3, 5), 16);\\n  var b2 = parseInt(c2.substring(5, 7), 16);\\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\\n  r = ('0' + (r || 0).toString(16)).slice(-2);\\n  g = ('0' + (g || 0).toString(16)).slice(-2);\\n  b = ('0' + (b || 0).toString(16)).slice(-2);\\n  return '#' + r + g + b;\\n}\\n\")) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_create_empty$$module$build$src$generators$javascript$lists = function lists_create_empty$$module$build$src$generators$javascript$lists(a, b) {\n      return [\"[]\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    lists_create_with$$module$build$src$generators$javascript$lists = function lists_create_with$$module$build$src$generators$javascript$lists(a, b) {\n      var c = Array(a.itemCount_);\n      for (var d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      return [\"[\" + c.join(\", \") + \"]\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    lists_repeat$$module$build$src$generators$javascript$lists = function lists_repeat$$module$build$src$generators$javascript$lists(a, b) {\n      var c = b.provideFunction_(\"listsRepeat\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(value, n) {\\n  var array = [];\\n  for (var i = 0; i < n; i++) {\\n    array[i] = value;\\n  }\\n  return array;\\n}\\n\")),\n        d = b.valueToCode(a, \"ITEM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [c + \"(\" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_length$$module$build$src$generators$javascript$lists = function lists_length$$module$build$src$generators$javascript$lists(a, b) {\n      return [(b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n    },\n    lists_isEmpty$$module$build$src$generators$javascript$lists = function lists_isEmpty$$module$build$src$generators$javascript$lists(a, b) {\n      return [\"!\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT];\n    },\n    lists_indexOf$$module$build$src$generators$javascript$lists = function lists_indexOf$$module$build$src$generators$javascript$lists(a, b) {\n      var c = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION] : [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_getIndex$$module$build$src$generators$javascript$lists = function lists_getIndex$$module$build$src$generators$javascript$lists(a, b) {\n      var c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      var e = b.valueToCode(a, \"VALUE\", \"RANDOM\" === d ? Order$$module$build$src$generators$javascript$javascript_generator.NONE : Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      switch (d) {\n        case \"FIRST\":\n          if (\"GET\" === c) return [e + \"[0]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".shift()\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"REMOVE\" === c) return e + \".shift();\\n\";\n          break;\n        case \"LAST\":\n          if (\"GET\" === c) return [e + \".slice(-1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop()\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"REMOVE\" === c) return e + \".pop();\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjusted(a, \"AT\");\n          if (\"GET\" === c) return [e + \"[\" + a + \"]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".splice(\" + a + \", 1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".splice(\" + a + \", 1);\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjusted(a, \"AT\", 1, !0);\n          if (\"GET\" === c) return [e + \".slice(\" + a + \")[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"GET_REMOVE\" === c) return [e + \".splice(\" + a + \", 1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".splice(\" + a + \", 1);\";\n          break;\n        case \"RANDOM\":\n          e = b.provideFunction_(\"listsGetRandomItem\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(list, remove) {\\n  var x = Math.floor(Math.random() * list.length);\\n  if (remove) {\\n    return list.splice(x, 1)[0];\\n  } else {\\n    return list[x];\\n  }\\n}\\n\")) + \"(\" + e + \", \" + (\"GET\" !== c) + \")\";\n          if (\"GET\" === c || \"GET_REMOVE\" === c) return [e, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \";\\n\";\n      }\n      throw Error(\"Unhandled combination (lists_getIndex).\");\n    },\n    lists_setIndex$$module$build$src$generators$javascript$lists = function lists_setIndex$$module$build$src$generators$javascript$lists(a, b) {\n      function c() {\n        if (d.match(/^\\w+$/)) return \"\";\n        var h = b.nameDB_.getDistinctName(\"tmpList\", $.NameType$$module$build$src$core$names.VARIABLE),\n          k = \"var \" + h + \" = \" + d + \";\\n\";\n        d = h;\n        return k;\n      }\n      var d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      var e = a.getFieldValue(\"MODE\") || \"GET\";\n      var f = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      var g = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"null\";\n      switch (f) {\n        case \"FIRST\":\n          if (\"SET\" === e) return d + \"[0] = \" + g + \";\\n\";\n          if (\"INSERT\" === e) return d + \".unshift(\" + g + \");\\n\";\n          break;\n        case \"LAST\":\n          if (\"SET\" === e) return c() + (d + \"[\" + d + \".length - 1] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return d + \".push(\" + g + \");\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjusted(a, \"AT\");\n          if (\"SET\" === e) return d + \"[\" + a + \"] = \" + g + \";\\n\";\n          if (\"INSERT\" === e) return d + \".splice(\" + a + \", 0, \" + g + \");\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjusted(a, \"AT\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n          f = c();\n          if (\"SET\" === e) return f + (d + \"[\" + d + \".length - \" + a + \"] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return f + (d + \".splice(\" + d + \".length - \" + a + \", 0, \" + g + \");\\n\");\n          break;\n        case \"RANDOM\":\n          a = c();\n          f = b.nameDB_.getDistinctName(\"tmpX\", $.NameType$$module$build$src$core$names.VARIABLE);\n          a += \"var \" + f + \" = Math.floor(Math.random() * \" + d + \".length);\\n\";\n          if (\"SET\" === e) return a + (d + \"[\" + f + \"] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return a + (d + \".splice(\" + f + \", 0, \" + g + \");\\n\");\n      }\n      throw Error(\"Unhandled combination (lists_setIndex).\");\n    },\n    lists_getSublist$$module$build$src$generators$javascript$lists = function lists_getSublist$$module$build$src$generators$javascript$lists(a, b) {\n      var c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\",\n        d = a.getFieldValue(\"WHERE1\");\n      var e = a.getFieldValue(\"WHERE2\");\n      if (\"FIRST\" === d && \"LAST\" === e) c += \".slice(0)\";else if (c.match(/^\\w+$/) || \"FROM_END\" !== d && \"FROM_START\" === e) {\n        switch (d) {\n          case \"FROM_START\":\n            d = b.getAdjusted(a, \"AT1\");\n            break;\n          case \"FROM_END\":\n            d = b.getAdjusted(a, \"AT1\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            d = c + \".length - \" + d;\n            break;\n          case \"FIRST\":\n            d = \"0\";\n            break;\n          default:\n            throw Error(\"Unhandled option (lists_getSublist).\");\n        }\n        switch (e) {\n          case \"FROM_START\":\n            b = b.getAdjusted(a, \"AT2\", 1);\n            break;\n          case \"FROM_END\":\n            b = b.getAdjusted(a, \"AT2\", 0, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            b = c + \".length - \" + b;\n            break;\n          case \"LAST\":\n            b = c + \".length\";\n            break;\n          default:\n            throw Error(\"Unhandled option (lists_getSublist).\");\n        }\n        c = c + \".slice(\" + d + \", \" + b + \")\";\n      } else {\n        var f = b.getAdjusted(a, \"AT1\");\n        a = b.getAdjusted(a, \"AT2\");\n        var g = {\n          FIRST: \"First\",\n          LAST: \"Last\",\n          FROM_START: \"FromStart\",\n          FROM_END: \"FromEnd\"\n        };\n        c = b.provideFunction_(\"subsequence\" + g[d] + g[e], \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(sequence\").concat(\"FROM_END\" === d || \"FROM_START\" === d ? \", at1\" : \"\").concat(\"FROM_END\" === e || \"FROM_START\" === e ? \", at2\" : \"\", \") {\\n  var start = \").concat(getSubstringIndex$$module$build$src$generators$javascript$lists(\"sequence\", d, \"at1\"), \";\\n  var end = \").concat(getSubstringIndex$$module$build$src$generators$javascript$lists(\"sequence\", e, \"at2\"), \" + 1;\\n  return sequence.slice(start, end);\\n}\\n\")) + \"(\" + c + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + f : \"\") + (\"FROM_END\" === e || \"FROM_START\" === e ? \", \" + a : \"\") + \")\";\n      }\n      return [c, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_sort$$module$build$src$generators$javascript$lists = function lists_sort$$module$build$src$generators$javascript$lists(a, b) {\n      var c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL) || \"[]\",\n        d = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n      a = a.getFieldValue(\"TYPE\");\n      b = b.provideFunction_(\"listsGetSortCompare\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(type, direction) {\\n  var compareFuncs = {\\n    'NUMERIC': function(a, b) {\\n        return Number(a) - Number(b); },\\n    'TEXT': function(a, b) {\\n        return String(a) > String(b) ? 1 : -1; },\\n    'IGNORE_CASE': function(a, b) {\\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\\n  };\\n  var compare = compareFuncs[type];\\n  return function(a, b) { return compare(a, b) * direction; };\\n}\\n      \"));\n      return [c + \".slice().sort(\" + b + '(\"' + a + '\", ' + d + \"))\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_split$$module$build$src$generators$javascript$lists = function lists_split$$module$build$src$generators$javascript$lists(a, b) {\n      var c = b.valueToCode(a, \"INPUT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER);\n      b = b.valueToCode(a, \"DELIM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = a.getFieldValue(\"MODE\");\n      if (\"SPLIT\" === a) c || (c = \"''\"), a = \"split\";else if (\"JOIN\" === a) c || (c = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n      return [c + \".\" + a + \"(\" + b + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_reverse$$module$build$src$generators$javascript$lists = function lists_reverse$$module$build$src$generators$javascript$lists(a, b) {\n      return [(b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL) || \"[]\") + \".slice().reverse()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    controls_if$$module$build$src$generators$javascript$logic = function controls_if$$module$build$src$generators$javascript$logic(a, b) {\n      var c = 0;\n      var d = \"\";\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      do {\n        var e = b.valueToCode(a, \"IF\" + c, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\";\n        var f = b.statementToCode(a, \"DO\" + c);\n        b.STATEMENT_SUFFIX && (f = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + f);\n        d += (0 < c ? \" else \" : \"\") + \"if (\" + e + \") {\\n\" + f + \"}\";\n        c++;\n      } while (a.getInput(\"IF\" + c));\n      if (a.getInput(\"ELSE\") || b.STATEMENT_SUFFIX) c = b.statementToCode(a, \"ELSE\"), b.STATEMENT_SUFFIX && (c = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + c), d += \" else {\\n\" + c + \"}\";\n      return d + \"\\n\";\n    },\n    logic_compare$$module$build$src$generators$javascript$logic = function logic_compare$$module$build$src$generators$javascript$logic(a, b) {\n      var c = {\n          EQ: \"==\",\n          NEQ: \"!=\",\n          LT: \"<\",\n          LTE: \"<=\",\n          GT: \">\",\n          GTE: \">=\"\n        }[a.getFieldValue(\"OP\")],\n        d = \"==\" === c || \"!=\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY : Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL,\n        e = b.valueToCode(a, \"A\", d) || \"0\";\n      a = b.valueToCode(a, \"B\", d) || \"0\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_operation$$module$build$src$generators$javascript$logic = function logic_operation$$module$build$src$generators$javascript$logic(a, b) {\n      var c = \"AND\" === a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        d = \"&&\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND : Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR;\n      var e = b.valueToCode(a, \"A\", d);\n      a = b.valueToCode(a, \"B\", d);\n      e || a ? (b = \"&&\" === c ? \"true\" : \"false\", e || (e = b), a || (a = b)) : a = e = \"false\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_negate$$module$build$src$generators$javascript$logic = function logic_negate$$module$build$src$generators$javascript$logic(a, b) {\n      var c = Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT;\n      return [\"!\" + (b.valueToCode(a, \"BOOL\", c) || \"true\"), c];\n    },\n    logic_boolean$$module$build$src$generators$javascript$logic = function logic_boolean$$module$build$src$generators$javascript$logic(a, b) {\n      return [\"TRUE\" === a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    logic_null$$module$build$src$generators$javascript$logic = function logic_null$$module$build$src$generators$javascript$logic(a, b) {\n      return [\"null\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    logic_ternary$$module$build$src$generators$javascript$logic = function logic_ternary$$module$build$src$generators$javascript$logic(a, b) {\n      var c = b.valueToCode(a, \"IF\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"false\",\n        d = b.valueToCode(a, \"THEN\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"null\";\n      a = b.valueToCode(a, \"ELSE\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"null\";\n      return [c + \" ? \" + d + \" : \" + a, Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL];\n    },\n    controls_repeat_ext$$module$build$src$generators$javascript$loops = function controls_repeat_ext$$module$build$src$generators$javascript$loops(a, b) {\n      var c;\n      c = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : b.valueToCode(a, \"TIMES\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      var d = b.statementToCode(a, \"DO\");\n      d = b.addLoopTrap(d, a);\n      a = \"\";\n      var e = b.nameDB_.getDistinctName(\"count\", $.NameType$$module$build$src$core$names.VARIABLE);\n      var f = c;\n      c.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(c) || (f = b.nameDB_.getDistinctName(\"repeat_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + f + \" = \" + c + \";\\n\");\n      return a + (\"for (var \" + e + \" = 0; \" + e + \" < \" + f + \"; \" + e + \"++) {\\n\" + d + \"}\\n\");\n    },\n    controls_whileUntil$$module$build$src$generators$javascript$loops = function controls_whileUntil$$module$build$src$generators$javascript$loops(a, b) {\n      var c = \"UNTIL\" === a.getFieldValue(\"MODE\");\n      var d = b.valueToCode(a, \"BOOL\", c ? Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\",\n        e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a);\n      c && (d = \"!\" + d);\n      return \"while (\" + d + \") {\\n\" + e + \"}\\n\";\n    },\n    controls_for$$module$build$src$generators$javascript$loops = function controls_for$$module$build$src$generators$javascript$loops(a, b) {\n      var c = b.getVariableName(a.getFieldValue(\"VAR\")),\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\",\n        e = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      var f = b.valueToCode(a, \"BY\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"1\";\n      var g = b.statementToCode(a, \"DO\");\n      g = b.addLoopTrap(g, a);\n      if ($.isNumber$$module$build$src$core$utils$string(d) && $.isNumber$$module$build$src$core$utils$string(e) && $.isNumber$$module$build$src$core$utils$string(f)) b = Number(d) <= Number(e), a = \"for (\" + c + \" = \" + d + \"; \" + c + (b ? \" <= \" : \" >= \") + e + \"; \" + c, c = Math.abs(Number(f)), a = 1 === c ? a + (b ? \"++\" : \"--\") : a + ((b ? \" += \" : \" -= \") + c), a += \") {\\n\" + g + \"}\\n\";else {\n        a = \"\";\n        var h = d;\n        d.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(d) || (h = b.nameDB_.getDistinctName(c + \"_start\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + h + \" = \" + d + \";\\n\");\n        d = e;\n        e.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(e) || (d = b.nameDB_.getDistinctName(c + \"_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + d + \" = \" + e + \";\\n\");\n        e = b.nameDB_.getDistinctName(c + \"_inc\", $.NameType$$module$build$src$core$names.VARIABLE);\n        a += \"var \" + e + \" = \";\n        a = $.isNumber$$module$build$src$core$utils$string(f) ? a + (Math.abs(f) + \";\\n\") : a + (\"Math.abs(\" + f + \");\\n\");\n        a += \"if (\" + h + \" > \" + d + \") {\\n\";\n        a += b.INDENT + e + \" = -\" + e + \";\\n\";\n        a = a + \"}\\nfor (\" + (c + \" = \" + h + \"; \" + e + \" >= 0 ? \" + c + \" <= \" + d + \" : \" + c + \" >= \" + d + \"; \" + c + \" += \" + e + \") {\\n\" + g + \"}\\n\");\n      }\n      return a;\n    },\n    controls_forEach$$module$build$src$generators$javascript$loops = function controls_forEach$$module$build$src$generators$javascript$loops(a, b) {\n      var c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      var d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"[]\";\n      var e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a);\n      a = \"\";\n      var f = d;\n      d.match(/^\\w+$/) || (f = b.nameDB_.getDistinctName(c + \"_list\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + f + \" = \" + d + \";\\n\");\n      d = b.nameDB_.getDistinctName(c + \"_index\", $.NameType$$module$build$src$core$names.VARIABLE);\n      e = b.INDENT + c + \" = \" + f + \"[\" + d + \"];\\n\" + e;\n      return a + (\"for (var \" + d + \" in \" + f + \") {\\n\" + e + \"}\\n\");\n    },\n    controls_flow_statements$$module$build$src$generators$javascript$loops = function controls_flow_statements$$module$build$src$generators$javascript$loops(a, b) {\n      var c = \"\";\n      b.STATEMENT_PREFIX && (c += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (c += b.injectId(b.STATEMENT_SUFFIX, a));\n      if (b.STATEMENT_PREFIX) {\n        var d = a.getSurroundLoop();\n        d && !d.suppressPrefixSuffix && (c += b.injectId(b.STATEMENT_PREFIX, d));\n      }\n      switch (a.getFieldValue(\"FLOW\")) {\n        case \"BREAK\":\n          return c + \"break;\\n\";\n        case \"CONTINUE\":\n          return c + \"continue;\\n\";\n      }\n      throw Error(\"Unknown flow statement.\");\n    },\n    math_number$$module$build$src$generators$javascript$math = function math_number$$module$build$src$generators$javascript$math(a, b) {\n      a = Number(a.getFieldValue(\"NUM\"));\n      return [a, 0 <= a ? Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC : Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION];\n    },\n    math_arithmetic$$module$build$src$generators$javascript$math = function math_arithmetic$$module$build$src$generators$javascript$math(a, b) {\n      var c = {\n        ADD: [\" + \", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION],\n        MINUS: [\" - \", Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION],\n        MULTIPLY: [\" * \", Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION],\n        DIVIDE: [\" / \", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION],\n        POWER: [null, Order$$module$build$src$generators$javascript$javascript_generator.NONE]\n      }[a.getFieldValue(\"OP\")];\n      var d = c[0];\n      c = c[1];\n      var e = b.valueToCode(a, \"A\", c) || \"0\";\n      a = b.valueToCode(a, \"B\", c) || \"0\";\n      return d ? [e + d + a, c] : [\"Math.pow(\" + e + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_single$$module$build$src$generators$javascript$math = function math_single$$module$build$src$generators$javascript$math(a, b) {\n      var c = a.getFieldValue(\"OP\");\n      var d;\n      if (\"NEG\" === c) return a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION) || \"0\", \"-\" === a[0] && (a = \" \" + a), [\"-\" + a, Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION];\n      a = \"SIN\" === c || \"COS\" === c || \"TAN\" === c ? b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION) || \"0\" : b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      switch (c) {\n        case \"ABS\":\n          d = \"Math.abs(\" + a + \")\";\n          break;\n        case \"ROOT\":\n          d = \"Math.sqrt(\" + a + \")\";\n          break;\n        case \"LN\":\n          d = \"Math.log(\" + a + \")\";\n          break;\n        case \"EXP\":\n          d = \"Math.exp(\" + a + \")\";\n          break;\n        case \"POW10\":\n          d = \"Math.pow(10,\" + a + \")\";\n          break;\n        case \"ROUND\":\n          d = \"Math.round(\" + a + \")\";\n          break;\n        case \"ROUNDUP\":\n          d = \"Math.ceil(\" + a + \")\";\n          break;\n        case \"ROUNDDOWN\":\n          d = \"Math.floor(\" + a + \")\";\n          break;\n        case \"SIN\":\n          d = \"Math.sin(\" + a + \" / 180 * Math.PI)\";\n          break;\n        case \"COS\":\n          d = \"Math.cos(\" + a + \" / 180 * Math.PI)\";\n          break;\n        case \"TAN\":\n          d = \"Math.tan(\" + a + \" / 180 * Math.PI)\";\n      }\n      if (d) return [d, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      switch (c) {\n        case \"LOG10\":\n          d = \"Math.log(\" + a + \") / Math.log(10)\";\n          break;\n        case \"ASIN\":\n          d = \"Math.asin(\" + a + \") / Math.PI * 180\";\n          break;\n        case \"ACOS\":\n          d = \"Math.acos(\" + a + \") / Math.PI * 180\";\n          break;\n        case \"ATAN\":\n          d = \"Math.atan(\" + a + \") / Math.PI * 180\";\n          break;\n        default:\n          throw Error(\"Unknown math operator: \" + c);\n      }\n      return [d, Order$$module$build$src$generators$javascript$javascript_generator.DIVISION];\n    },\n    math_constant$$module$build$src$generators$javascript$math = function math_constant$$module$build$src$generators$javascript$math(a, b) {\n      return {\n        PI: [\"Math.PI\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        E: [\"Math.E\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION],\n        SQRT2: [\"Math.SQRT2\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        SQRT1_2: [\"Math.SQRT1_2\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        INFINITY: [\"Infinity\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC]\n      }[a.getFieldValue(\"CONSTANT\")];\n    },\n    math_number_property$$module$build$src$generators$javascript$math = function math_number_property$$module$build$src$generators$javascript$math(a, b) {\n      var c = {\n        EVEN: [\" % 2 === 0\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        ODD: [\" % 2 === 1\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        WHOLE: [\" % 1 === 0\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        POSITIVE: [\" > 0\", Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL, Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL],\n        NEGATIVE: [\" < 0\", Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL, Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL],\n        DIVISIBLE_BY: [null, Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        PRIME: [null, Order$$module$build$src$generators$javascript$javascript_generator.NONE, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL]\n      };\n      var d = a.getFieldValue(\"PROPERTY\"),\n        _c$d = _slicedToArray(c[d], 3),\n        e = _c$d[0],\n        f = _c$d[1],\n        g = _c$d[2];\n      c = b.valueToCode(a, \"NUMBER_TO_CHECK\", f) || \"0\";\n      \"PRIME\" === d ? a = b.provideFunction_(\"mathIsPrime\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(n) {\\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\\n  if (n == 2 || n == 3) {\\n    return true;\\n  }\\n  // False if n is NaN, negative, is 1, or not whole.\\n  // And false if n is divisible by 2 or 3.\\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\\n    return false;\\n  }\\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n\")) + \"(\" + c + \")\" : \"DIVISIBLE_BY\" === d ? (a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\", a = c + \" % \" + a + \" === 0\") : a = c + e;\n      return [a, g];\n    },\n    math_change$$module$build$src$generators$javascript$math = function math_change$$module$build$src$generators$javascript$math(a, b) {\n      var c = b.valueToCode(a, \"DELTA\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION) || \"0\";\n      a = b.getVariableName(a.getFieldValue(\"VAR\"));\n      return a + \" = (typeof \" + a + \" === 'number' ? \" + a + \" : 0) + \" + c + \";\\n\";\n    },\n    math_on_list$$module$build$src$generators$javascript$math = function math_on_list$$module$build$src$generators$javascript$math(a, b) {\n      var c = a.getFieldValue(\"OP\");\n      switch (c) {\n        case \"SUM\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n          a += \".reduce(function(x, y) {return x + y;}, 0)\";\n          break;\n        case \"MIN\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = \"Math.min.apply(null, \" + a + \")\";\n          break;\n        case \"MAX\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = \"Math.max.apply(null, \" + a + \")\";\n          break;\n        case \"AVERAGE\":\n          c = b.provideFunction_(\"mathMean\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(myList) {\\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\\n}\\n\"));\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"MEDIAN\":\n          c = b.provideFunction_(\"mathMedian\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(myList) {\\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\\n  if (!localList.length) return null;\\n  localList.sort(function(a, b) {return b - a;});\\n  if (localList.length % 2 === 0) {\\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\\n  } else {\\n    return localList[(localList.length - 1) / 2];\\n  }\\n}\\n\"));\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"MODE\":\n          c = b.provideFunction_(\"mathModes\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(values) {\\n  var modes = [];\\n  var counts = [];\\n  var maxCount = 0;\\n  for (var i = 0; i < values.length; i++) {\\n    var value = values[i];\\n    var found = false;\\n    var thisCount;\\n    for (var j = 0; j < counts.length; j++) {\\n      if (counts[j][0] === value) {\\n        thisCount = ++counts[j][1];\\n        found = true;\\n        break;\\n      }\\n    }\\n    if (!found) {\\n      counts.push([value, 1]);\\n      thisCount = 1;\\n    }\\n    maxCount = Math.max(thisCount, maxCount);\\n  }\\n  for (var j = 0; j < counts.length; j++) {\\n    if (counts[j][1] === maxCount) {\\n        modes.push(counts[j][0]);\\n    }\\n  }\\n  return modes;\\n}\\n\"));\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"STD_DEV\":\n          c = b.provideFunction_(\"mathStandardDeviation\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(numbers) {\\n  var n = numbers.length;\\n  if (!n) return null;\\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\\n  var variance = 0;\\n  for (var j = 0; j < n; j++) {\\n    variance += Math.pow(numbers[j] - mean, 2);\\n  }\\n  variance = variance / n;\\n  return Math.sqrt(variance);\\n}\\n\"));\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"RANDOM\":\n          c = b.provideFunction_(\"mathRandomList\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(list) {\\n  var x = Math.floor(Math.random() * list.length);\\n  return list[x];\\n}\\n\"));\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        default:\n          throw Error(\"Unknown operator: \" + c);\n      }\n      return [a, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_modulo$$module$build$src$generators$javascript$math = function math_modulo$$module$build$src$generators$javascript$math(a, b) {\n      var c = b.valueToCode(a, \"DIVIDEND\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\";\n      a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\";\n      return [c + \" % \" + a, Order$$module$build$src$generators$javascript$javascript_generator.MODULUS];\n    },\n    math_constrain$$module$build$src$generators$javascript$math = function math_constrain$$module$build$src$generators$javascript$math(a, b) {\n      var c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\",\n        d = b.valueToCode(a, \"LOW\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"HIGH\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"Infinity\";\n      return [\"Math.min(Math.max(\" + c + \", \" + d + \"), \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_random_int$$module$build$src$generators$javascript$math = function math_random_int$$module$build$src$generators$javascript$math(a, b) {\n      var c = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [b.provideFunction_(\"mathRandomInt\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(a, b) {\\n  if (a > b) {\\n    // Swap a and b to ensure a is smaller.\\n    var c = a;\\n    a = b;\\n    b = c;\\n  }\\n  return Math.floor(Math.random() * (b - a + 1) + a);\\n}\\n\")) + \"(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_random_float$$module$build$src$generators$javascript$math = function math_random_float$$module$build$src$generators$javascript$math(a, b) {\n      return [\"Math.random()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_atan2$$module$build$src$generators$javascript$math = function math_atan2$$module$build$src$generators$javascript$math(a, b) {\n      var c = b.valueToCode(a, \"X\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [\"Math.atan2(\" + (b.valueToCode(a, \"Y\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\") + \", \" + c + \") / Math.PI * 180\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION];\n    },\n    procedures_defreturn$$module$build$src$generators$javascript$procedures = function procedures_defreturn$$module$build$src$generators$javascript$procedures(a, b) {\n      var c = b.getProcedureName(a.getFieldValue(\"NAME\"));\n      var d = \"\";\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (d += b.injectId(b.STATEMENT_SUFFIX, a));\n      d && (d = b.prefixLines(d, b.INDENT));\n      var e = \"\";\n      b.INFINITE_LOOP_TRAP && (e = b.prefixLines(b.injectId(b.INFINITE_LOOP_TRAP, a), b.INDENT));\n      var f = b.statementToCode(a, \"STACK\");\n      var g = b.valueToCode(a, \"RETURN\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"\",\n        h = \"\";\n      f && g && (h = d);\n      g && (g = b.INDENT + \"return \" + g + \";\\n\");\n      var k = [],\n        l = a.getVars();\n      for (var m = 0; m < l.length; m++) k[m] = b.getVariableName(l[m]);\n      d = \"function \" + c + \"(\" + k.join(\", \") + \") {\\n\" + d + e + f + h + g + \"}\";\n      d = b.scrub_(a, d);\n      b.definitions_[\"%\" + c] = d;\n      return null;\n    },\n    procedures_callreturn$$module$build$src$generators$javascript$procedures = function procedures_callreturn$$module$build$src$generators$javascript$procedures(a, b) {\n      var c = b.getProcedureName(a.getFieldValue(\"NAME\")),\n        d = [],\n        e = a.getVars();\n      for (var f = 0; f < e.length; f++) d[f] = b.valueToCode(a, \"ARG\" + f, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      return [c + \"(\" + d.join(\", \") + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    procedures_callnoreturn$$module$build$src$generators$javascript$procedures = function procedures_callnoreturn$$module$build$src$generators$javascript$procedures(a, b) {\n      return b.forBlock.procedures_callreturn(a, b)[0] + \";\\n\";\n    },\n    procedures_ifreturn$$module$build$src$generators$javascript$procedures = function procedures_ifreturn$$module$build$src$generators$javascript$procedures(a, b) {\n      var c = \"if (\" + (b.valueToCode(a, \"CONDITION\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\") + \") {\\n\";\n      b.STATEMENT_SUFFIX && (c += b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT));\n      a.hasReturnValue_ ? (a = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\", c += b.INDENT + \"return \" + a + \";\\n\") : c += b.INDENT + \"return;\\n\";\n      return c + \"}\\n\";\n    },\n    text$$module$build$src$generators$javascript$text = function text$$module$build$src$generators$javascript$text(a, b) {\n      return [b.quote_(a.getFieldValue(\"TEXT\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    text_multiline$$module$build$src$generators$javascript$text = function text_multiline$$module$build$src$generators$javascript$text(a, b) {\n      a = b.multiline_quote_(a.getFieldValue(\"TEXT\"));\n      b = -1 !== a.indexOf(\"+\") ? Order$$module$build$src$generators$javascript$javascript_generator.ADDITION : Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC;\n      return [a, b];\n    },\n    text_join$$module$build$src$generators$javascript$text = function text_join$$module$build$src$generators$javascript$text(a, b) {\n      switch (a.itemCount_) {\n        case 0:\n          return [\"''\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n        case 1:\n          return a = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\", forceString$$module$build$src$generators$javascript$text(a);\n        case 2:\n          var c = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          a = b.valueToCode(a, \"ADD1\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          return [forceString$$module$build$src$generators$javascript$text(c)[0] + \" + \" + forceString$$module$build$src$generators$javascript$text(a)[0], Order$$module$build$src$generators$javascript$javascript_generator.ADDITION];\n        default:\n          c = Array(a.itemCount_);\n          for (var d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          return [\"[\" + c.join(\",\") + \"].join('')\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      }\n    },\n    text_append$$module$build$src$generators$javascript$text = function text_append$$module$build$src$generators$javascript$text(a, b) {\n      var c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      a = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return c + \" += \" + forceString$$module$build$src$generators$javascript$text(a)[0] + \";\\n\";\n    },\n    text_length$$module$build$src$generators$javascript$text = function text_length$$module$build$src$generators$javascript$text(a, b) {\n      return [(b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n    },\n    text_isEmpty$$module$build$src$generators$javascript$text = function text_isEmpty$$module$build$src$generators$javascript$text(a, b) {\n      return [\"!\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT];\n    },\n    text_indexOf$$module$build$src$generators$javascript$text = function text_indexOf$$module$build$src$generators$javascript$text(a, b) {\n      var c = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION] : [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_charAt$$module$build$src$generators$javascript$text = function text_charAt$$module$build$src$generators$javascript$text(a, b) {\n      var c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = b.valueToCode(a, \"VALUE\", \"RANDOM\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.NONE : Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\";\n      switch (c) {\n        case \"FIRST\":\n          return [d + \".charAt(0)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"LAST\":\n          return [d + \".slice(-1)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"FROM_START\":\n          return a = b.getAdjusted(a, \"AT\"), [d + \".charAt(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"FROM_END\":\n          return a = b.getAdjusted(a, \"AT\", 1, !0), [d + \".slice(\" + a + \").charAt(0)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"RANDOM\":\n          return [b.provideFunction_(\"textRandomLetter\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(text) {\\n  var x = Math.floor(Math.random() * text.length);\\n  return text[x];\\n}\\n\")) + \"(\" + d + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      }\n      throw Error(\"Unhandled option (text_charAt).\");\n    },\n    text_getSubstring$$module$build$src$generators$javascript$text = function text_getSubstring$$module$build$src$generators$javascript$text(a, b) {\n      var c = a.getFieldValue(\"WHERE1\");\n      var d = a.getFieldValue(\"WHERE2\");\n      var e = \"FROM_END\" !== c && \"LAST\" !== c && \"FROM_END\" !== d && \"LAST\" !== d,\n        f = b.valueToCode(a, \"STRING\", e ? Order$$module$build$src$generators$javascript$javascript_generator.MEMBER : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      if (\"FIRST\" === c && \"LAST\" === d) return [f, Order$$module$build$src$generators$javascript$javascript_generator.NONE];\n      if (f.match(/^'?\\w+'?$/) || e) {\n        switch (c) {\n          case \"FROM_START\":\n            c = b.getAdjusted(a, \"AT1\");\n            break;\n          case \"FROM_END\":\n            c = b.getAdjusted(a, \"AT1\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            c = f + \".length - \" + c;\n            break;\n          case \"FIRST\":\n            c = \"0\";\n            break;\n          default:\n            throw Error(\"Unhandled option (text_getSubstring).\");\n        }\n        switch (d) {\n          case \"FROM_START\":\n            b = b.getAdjusted(a, \"AT2\", 1);\n            break;\n          case \"FROM_END\":\n            b = b.getAdjusted(a, \"AT2\", 0, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            b = f + \".length - \" + b;\n            break;\n          case \"LAST\":\n            b = f + \".length\";\n            break;\n          default:\n            throw Error(\"Unhandled option (text_getSubstring).\");\n        }\n        f = f + \".slice(\" + c + \", \" + b + \")\";\n      } else {\n        e = b.getAdjusted(a, \"AT1\");\n        a = b.getAdjusted(a, \"AT2\");\n        var g = {\n          FIRST: \"First\",\n          LAST: \"Last\",\n          FROM_START: \"FromStart\",\n          FROM_END: \"FromEnd\"\n        };\n        f = b.provideFunction_(\"subsequence\" + g[c] + g[d], \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(sequence\").concat(\"FROM_END\" === c || \"FROM_START\" === c ? \", at1\" : \"\").concat(\"FROM_END\" === d || \"FROM_START\" === d ? \", at2\" : \"\", \") {\\n  var start = \").concat(getSubstringIndex$$module$build$src$generators$javascript$text(\"sequence\", c, \"at1\"), \";\\n  var end = \").concat(getSubstringIndex$$module$build$src$generators$javascript$text(\"sequence\", d, \"at2\"), \" + 1;\\n  return sequence.slice(start, end);\\n}\\n\")) + \"(\" + f + (\"FROM_END\" === c || \"FROM_START\" === c ? \", \" + e : \"\") + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + a : \"\") + \")\";\n      }\n      return [f, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_changeCase$$module$build$src$generators$javascript$text = function text_changeCase$$module$build$src$generators$javascript$text(a, b) {\n      var c = {\n        UPPERCASE: \".toUpperCase()\",\n        LOWERCASE: \".toLowerCase()\",\n        TITLECASE: null\n      }[a.getFieldValue(\"CASE\")];\n      a = b.valueToCode(a, \"TEXT\", c ? Order$$module$build$src$generators$javascript$javascript_generator.MEMBER : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [c ? a + c : b.provideFunction_(\"textToTitleCase\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(str) {\\n  return str.replace(/\\\\S+/g,\\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\\n}\\n\")) + \"(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_trim$$module$build$src$generators$javascript$text = function text_trim$$module$build$src$generators$javascript$text(a, b) {\n      var c = {\n        LEFT: \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n        RIGHT: \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n        BOTH: \".trim()\"\n      }[a.getFieldValue(\"MODE\")];\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + c, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_print$$module$build$src$generators$javascript$text = function text_print$$module$build$src$generators$javascript$text(a, b) {\n      return \"window.alert(\" + (b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\") + \");\\n\";\n    },\n    text_prompt_ext$$module$build$src$generators$javascript$text = function text_prompt_ext$$module$build$src$generators$javascript$text(a, b) {\n      b = \"window.prompt(\" + (a.getField(\"TEXT\") ? b.quote_(a.getFieldValue(\"TEXT\")) : b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\") + \")\";\n      \"NUMBER\" === a.getFieldValue(\"TYPE\") && (b = \"Number(\" + b + \")\");\n      return [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_count$$module$build$src$generators$javascript$text = function text_count$$module$build$src$generators$javascript$text(a, b) {\n      var c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"SUB\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [b.provideFunction_(\"textCount\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(haystack, needle) {\\n  if (needle.length === 0) {\\n    return haystack.length + 1;\\n  } else {\\n    return haystack.split(needle).length - 1;\\n  }\\n}\\n\")) + \"(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_replace$$module$build$src$generators$javascript$text = function text_replace$$module$build$src$generators$javascript$text(a, b) {\n      var c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\",\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [b.provideFunction_(\"textReplace\", \"\\nfunction \".concat(b.FUNCTION_NAME_PLACEHOLDER_, \"(haystack, needle, replacement) {\\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\\n}\\n\")) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_reverse$$module$build$src$generators$javascript$text = function text_reverse$$module$build$src$generators$javascript$text(a, b) {\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".split('').reverse().join('')\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    variables_get$$module$build$src$generators$javascript$variables = function variables_get$$module$build$src$generators$javascript$variables(a, b) {\n      return [b.getVariableName(a.getFieldValue(\"VAR\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    variables_set$$module$build$src$generators$javascript$variables = function variables_set$$module$build$src$generators$javascript$variables(a, b) {\n      var c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      return b.getVariableName(a.getFieldValue(\"VAR\")) + \" = \" + c + \";\\n\";\n    },\n    Order$$module$build$src$generators$javascript$javascript_generator = {\n      ATOMIC: 0,\n      NEW: 1.1,\n      MEMBER: 1.2,\n      FUNCTION_CALL: 2,\n      INCREMENT: 3,\n      DECREMENT: 3,\n      BITWISE_NOT: 4.1,\n      UNARY_PLUS: 4.2,\n      UNARY_NEGATION: 4.3,\n      LOGICAL_NOT: 4.4,\n      TYPEOF: 4.5,\n      VOID: 4.6,\n      DELETE: 4.7,\n      AWAIT: 4.8,\n      EXPONENTIATION: 5,\n      MULTIPLICATION: 5.1,\n      DIVISION: 5.2,\n      MODULUS: 5.3,\n      SUBTRACTION: 6.1,\n      ADDITION: 6.2,\n      BITWISE_SHIFT: 7,\n      RELATIONAL: 8,\n      IN: 8,\n      INSTANCEOF: 8,\n      EQUALITY: 9,\n      BITWISE_AND: 10,\n      BITWISE_XOR: 11,\n      BITWISE_OR: 12,\n      LOGICAL_AND: 13,\n      LOGICAL_OR: 14,\n      CONDITIONAL: 15,\n      ASSIGNMENT: 16,\n      YIELD: 17,\n      COMMA: 18,\n      NONE: 99\n    },\n    JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator = /*#__PURE__*/function (_$$CodeGenerator$$mod) {\n      \"use strict\";\n\n      _inherits(JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator, _$$CodeGenerator$$mod);\n      var _super = _createSuper(JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator);\n      function JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator(a) {\n        var _this;\n        _classCallCheck(this, JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator);\n        _this = _super.call(this, null != a ? a : \"JavaScript\");\n        _this.ORDER_OVERRIDES = [[Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL, Order$$module$build$src$generators$javascript$javascript_generator.MEMBER], [Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL], [Order$$module$build$src$generators$javascript$javascript_generator.MEMBER, Order$$module$build$src$generators$javascript$javascript_generator.MEMBER], [Order$$module$build$src$generators$javascript$javascript_generator.MEMBER, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT], [Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION, Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION], [Order$$module$build$src$generators$javascript$javascript_generator.ADDITION, Order$$module$build$src$generators$javascript$javascript_generator.ADDITION], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR]];\n        _this.isInitialized = !1;\n        for (var b in Order$$module$build$src$generators$javascript$javascript_generator) _this[\"ORDER_\" + b] = Order$$module$build$src$generators$javascript$javascript_generator[b];\n        _this.addReservedWords(\"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments,\" + Object.getOwnPropertyNames(globalThis).join(\",\"));\n        return _this;\n      }\n      _createClass(JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator, [{\n        key: \"init\",\n        value: function init(a) {\n          _get(_getPrototypeOf(JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator.prototype), \"init\", this).call(this, a);\n          this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new $.Names$$module$build$src$core$names(this.RESERVED_WORDS_);\n          this.nameDB_.setVariableMap(a.getVariableMap());\n          this.nameDB_.populateVariables(a);\n          this.nameDB_.populateProcedures(a);\n          var b = [];\n          var c = $.allDeveloperVariables$$module$build$src$core$variables(a);\n          for (var d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], $.NameType$$module$build$src$core$names.DEVELOPER_VARIABLE));\n          a = $.allUsedVarModels$$module$build$src$core$variables(a);\n          for (c = 0; c < a.length; c++) b.push(this.nameDB_.getName(a[c].getId(), $.NameType$$module$build$src$core$names.VARIABLE));\n          b.length && (this.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n          this.isInitialized = !0;\n        }\n      }, {\n        key: \"finish\",\n        value: function finish(a) {\n          var b = Object.values(this.definitions_);\n          _get(_getPrototypeOf(JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator.prototype), \"finish\", this).call(this, a);\n          this.isInitialized = !1;\n          this.nameDB_.reset();\n          return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n        }\n      }, {\n        key: \"scrubNakedValue\",\n        value: function scrubNakedValue(a) {\n          return a + \";\\n\";\n        }\n      }, {\n        key: \"quote_\",\n        value: function quote_(a) {\n          a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n          return \"'\" + a + \"'\";\n        }\n      }, {\n        key: \"multiline_quote_\",\n        value: function multiline_quote_(a) {\n          return a.split(/\\n/g).map(this.quote_).join(\" + '\\\\n' +\\n\");\n        }\n      }, {\n        key: \"scrub_\",\n        value: function scrub_(a, b, c) {\n          var d = \"\";\n          if (!a.outputConnection || !a.outputConnection.targetConnection) {\n            var e = a.getCommentText();\n            e && (e = $.wrap$$module$build$src$core$utils$string(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + \"\\n\", \"// \"));\n            for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type === $.inputTypes$$module$build$src$core$inputs$input_types.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, \"// \"));\n          }\n          a = a.nextConnection && a.nextConnection.targetBlock();\n          c = c ? \"\" : this.blockToCode(a);\n          return d + b + c;\n        }\n      }, {\n        key: \"getAdjusted\",\n        value: function getAdjusted(a, b, c, d, e) {\n          c = c || 0;\n          e = e || this.ORDER_NONE;\n          a.workspace.options.oneBasedIndex && c--;\n          var f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n          var g,\n            h = e;\n          0 < c ? g = h = this.ORDER_ADDITION : 0 > c ? g = h = this.ORDER_SUBTRACTION : d && (g = h = this.ORDER_UNARY_NEGATION);\n          a = this.valueToCode(a, b, h) || f;\n          $.isNumber$$module$build$src$core$utils$string(a) ? (a = Number(a) + c, d && (a = -a)) : (0 < c ? a = a + \" + \" + c : 0 > c && (a = a + \" - \" + -c), d && (a = c ? \"-(\" + a + \")\" : \"-\" + a), g = Math.floor(g), e = Math.floor(e), g && e >= g && (a = \"(\" + a + \")\"));\n          return a;\n        }\n      }]);\n      return JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n    }($.CodeGenerator$$module$build$src$core$generator),\n    module$build$src$generators$javascript$javascript_generator = {};\n  module$build$src$generators$javascript$javascript_generator.JavascriptGenerator = JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript$javascript_generator.Order = Order$$module$build$src$generators$javascript$javascript_generator;\n  var module$build$src$generators$javascript$colour = {};\n  module$build$src$generators$javascript$colour.colour_blend = colour_blend$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_picker = colour_picker$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_random = colour_random$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_rgb = colour_rgb$$module$build$src$generators$javascript$colour;\n  var getSubstringIndex$$module$build$src$generators$javascript$lists = function getSubstringIndex$$module$build$src$generators$javascript$lists(a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    },\n    module$build$src$generators$javascript$lists = {};\n  module$build$src$generators$javascript$lists.lists_create_empty = lists_create_empty$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_create_with = lists_create_with$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_getIndex = lists_getIndex$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_getSublist = lists_getSublist$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_indexOf = lists_indexOf$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_isEmpty = lists_isEmpty$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_length = lists_length$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_repeat = lists_repeat$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_reverse = lists_reverse$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_setIndex = lists_setIndex$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_sort = lists_sort$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_split = lists_split$$module$build$src$generators$javascript$lists;\n  var controls_ifelse$$module$build$src$generators$javascript$logic = controls_if$$module$build$src$generators$javascript$logic,\n    module$build$src$generators$javascript$logic = {};\n  module$build$src$generators$javascript$logic.controls_if = controls_if$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.controls_ifelse = controls_if$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_boolean = logic_boolean$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_compare = logic_compare$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_negate = logic_negate$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_null = logic_null$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_operation = logic_operation$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_ternary = logic_ternary$$module$build$src$generators$javascript$logic;\n  var controls_repeat$$module$build$src$generators$javascript$loops = controls_repeat_ext$$module$build$src$generators$javascript$loops,\n    module$build$src$generators$javascript$loops = {};\n  module$build$src$generators$javascript$loops.controls_flow_statements = controls_flow_statements$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_for = controls_for$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_forEach = controls_forEach$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_repeat = controls_repeat_ext$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_repeat_ext = controls_repeat_ext$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_whileUntil = controls_whileUntil$$module$build$src$generators$javascript$loops;\n  var math_round$$module$build$src$generators$javascript$math = math_single$$module$build$src$generators$javascript$math,\n    math_trig$$module$build$src$generators$javascript$math = math_single$$module$build$src$generators$javascript$math,\n    module$build$src$generators$javascript$math = {};\n  module$build$src$generators$javascript$math.math_arithmetic = math_arithmetic$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_atan2 = math_atan2$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_change = math_change$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_constant = math_constant$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_constrain = math_constrain$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_modulo = math_modulo$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_number = math_number$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_number_property = math_number_property$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_on_list = math_on_list$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_random_float = math_random_float$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_random_int = math_random_int$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_round = math_single$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_single = math_single$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_trig = math_single$$module$build$src$generators$javascript$math;\n  var procedures_defnoreturn$$module$build$src$generators$javascript$procedures = procedures_defreturn$$module$build$src$generators$javascript$procedures,\n    module$build$src$generators$javascript$procedures = {};\n  module$build$src$generators$javascript$procedures.procedures_callnoreturn = procedures_callnoreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_callreturn = procedures_callreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_defnoreturn = procedures_defreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_defreturn = procedures_defreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_ifreturn = procedures_ifreturn$$module$build$src$generators$javascript$procedures;\n  var strRegExp$$module$build$src$generators$javascript$text = /^\\s*'([^']|\\\\')*'\\s*$/,\n    forceString$$module$build$src$generators$javascript$text = function forceString$$module$build$src$generators$javascript$text(a) {\n      return strRegExp$$module$build$src$generators$javascript$text.test(a) ? [a, Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC] : [\"String(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    getSubstringIndex$$module$build$src$generators$javascript$text = function getSubstringIndex$$module$build$src$generators$javascript$text(a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    },\n    text_prompt$$module$build$src$generators$javascript$text = text_prompt_ext$$module$build$src$generators$javascript$text,\n    module$build$src$generators$javascript$text = {};\n  module$build$src$generators$javascript$text.text = text$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_append = text_append$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_changeCase = text_changeCase$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_charAt = text_charAt$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_count = text_count$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_getSubstring = text_getSubstring$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_indexOf = text_indexOf$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_isEmpty = text_isEmpty$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_join = text_join$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_length = text_length$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_multiline = text_multiline$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_print = text_print$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_prompt = text_prompt_ext$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_prompt_ext = text_prompt_ext$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_replace = text_replace$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_reverse = text_reverse$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_trim = text_trim$$module$build$src$generators$javascript$text;\n  var module$build$src$generators$javascript$variables = {};\n  module$build$src$generators$javascript$variables.variables_get = variables_get$$module$build$src$generators$javascript$variables;\n  module$build$src$generators$javascript$variables.variables_set = variables_set$$module$build$src$generators$javascript$variables;\n  var module$build$src$generators$javascript$variables_dynamic = {};\n  module$build$src$generators$javascript$variables_dynamic.variables_get_dynamic = variables_get$$module$build$src$generators$javascript$variables;\n  module$build$src$generators$javascript$variables_dynamic.variables_set_dynamic = variables_set$$module$build$src$generators$javascript$variables;\n  var javascriptGenerator$$module$build$src$generators$javascript = new JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator();\n  Object.assign(javascriptGenerator$$module$build$src$generators$javascript.forBlock, module$build$src$generators$javascript$colour, module$build$src$generators$javascript$lists, module$build$src$generators$javascript$logic, module$build$src$generators$javascript$loops, module$build$src$generators$javascript$math, module$build$src$generators$javascript$procedures, module$build$src$generators$javascript$text, module$build$src$generators$javascript$variables, module$build$src$generators$javascript$variables_dynamic);\n  var module$build$src$generators$javascript = {};\n  module$build$src$generators$javascript.JavascriptGenerator = JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript.Order = Order$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript.javascriptGenerator = javascriptGenerator$$module$build$src$generators$javascript;\n  module$build$src$generators$javascript.__namespace__ = $;\n  return module$build$src$generators$javascript;\n});","map":{"version":3,"names":["colour_picker$$module$build$src$generators$javascript$colour","a","b","quote_","getFieldValue","Order$$module$build$src$generators$javascript$javascript_generator","ATOMIC","colour_random$$module$build$src$generators$javascript$colour","provideFunction_","concat","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb$$module$build$src$generators$javascript$colour","c","valueToCode","NONE","d","colour_blend$$module$build$src$generators$javascript$colour","lists_create_empty$$module$build$src$generators$javascript$lists","lists_create_with$$module$build$src$generators$javascript$lists","Array","itemCount_","join","lists_repeat$$module$build$src$generators$javascript$lists","lists_length$$module$build$src$generators$javascript$lists","MEMBER","lists_isEmpty$$module$build$src$generators$javascript$lists","LOGICAL_NOT","lists_indexOf$$module$build$src$generators$javascript$lists","workspace","options","oneBasedIndex","ADDITION","lists_getIndex$$module$build$src$generators$javascript$lists","e","getAdjusted","Error","lists_setIndex$$module$build$src$generators$javascript$lists","match","h","nameDB_","getDistinctName","$","NameType$$module$build$src$core$names","VARIABLE","k","f","g","ASSIGNMENT","SUBTRACTION","lists_getSublist$$module$build$src$generators$javascript$lists","FIRST","LAST","FROM_START","FROM_END","getSubstringIndex$$module$build$src$generators$javascript$lists","lists_sort$$module$build$src$generators$javascript$lists","lists_split$$module$build$src$generators$javascript$lists","lists_reverse$$module$build$src$generators$javascript$lists","controls_if$$module$build$src$generators$javascript$logic","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare$$module$build$src$generators$javascript$logic","EQ","NEQ","LT","LTE","GT","GTE","EQUALITY","RELATIONAL","logic_operation$$module$build$src$generators$javascript$logic","LOGICAL_AND","LOGICAL_OR","logic_negate$$module$build$src$generators$javascript$logic","logic_boolean$$module$build$src$generators$javascript$logic","logic_null$$module$build$src$generators$javascript$logic","logic_ternary$$module$build$src$generators$javascript$logic","CONDITIONAL","controls_repeat_ext$$module$build$src$generators$javascript$loops","getField","String","Number","addLoopTrap","isNumber$$module$build$src$core$utils$string","controls_whileUntil$$module$build$src$generators$javascript$loops","controls_for$$module$build$src$generators$javascript$loops","getVariableName","Math","abs","controls_forEach$$module$build$src$generators$javascript$loops","controls_flow_statements$$module$build$src$generators$javascript$loops","getSurroundLoop","suppressPrefixSuffix","math_number$$module$build$src$generators$javascript$math","UNARY_NEGATION","math_arithmetic$$module$build$src$generators$javascript$math","ADD","MINUS","MULTIPLY","MULTIPLICATION","DIVIDE","DIVISION","POWER","math_single$$module$build$src$generators$javascript$math","math_constant$$module$build$src$generators$javascript$math","PI","E","GOLDEN_RATIO","SQRT2","SQRT1_2","INFINITY","math_number_property$$module$build$src$generators$javascript$math","EVEN","MODULUS","ODD","WHOLE","POSITIVE","NEGATIVE","DIVISIBLE_BY","PRIME","_c$d","_slicedToArray","math_change$$module$build$src$generators$javascript$math","math_on_list$$module$build$src$generators$javascript$math","math_modulo$$module$build$src$generators$javascript$math","math_constrain$$module$build$src$generators$javascript$math","math_random_int$$module$build$src$generators$javascript$math","math_random_float$$module$build$src$generators$javascript$math","math_atan2$$module$build$src$generators$javascript$math","procedures_defreturn$$module$build$src$generators$javascript$procedures","getProcedureName","INFINITE_LOOP_TRAP","l","getVars","m","length","scrub_","definitions_","procedures_callreturn$$module$build$src$generators$javascript$procedures","procedures_callnoreturn$$module$build$src$generators$javascript$procedures","forBlock","procedures_callreturn","procedures_ifreturn$$module$build$src$generators$javascript$procedures","hasReturnValue_","text$$module$build$src$generators$javascript$text","text_multiline$$module$build$src$generators$javascript$text","multiline_quote_","indexOf","text_join$$module$build$src$generators$javascript$text","forceString$$module$build$src$generators$javascript$text","text_append$$module$build$src$generators$javascript$text","text_length$$module$build$src$generators$javascript$text","text_isEmpty$$module$build$src$generators$javascript$text","text_indexOf$$module$build$src$generators$javascript$text","text_charAt$$module$build$src$generators$javascript$text","text_getSubstring$$module$build$src$generators$javascript$text","getSubstringIndex$$module$build$src$generators$javascript$text","text_changeCase$$module$build$src$generators$javascript$text","UPPERCASE","LOWERCASE","TITLECASE","text_trim$$module$build$src$generators$javascript$text","LEFT","RIGHT","BOTH","text_print$$module$build$src$generators$javascript$text","text_prompt_ext$$module$build$src$generators$javascript$text","text_count$$module$build$src$generators$javascript$text","text_replace$$module$build$src$generators$javascript$text","text_reverse$$module$build$src$generators$javascript$text","variables_get$$module$build$src$generators$javascript$variables","variables_set$$module$build$src$generators$javascript$variables","NEW","INCREMENT","DECREMENT","BITWISE_NOT","UNARY_PLUS","TYPEOF","VOID","DELETE","AWAIT","EXPONENTIATION","BITWISE_SHIFT","IN","INSTANCEOF","BITWISE_AND","BITWISE_XOR","BITWISE_OR","YIELD","COMMA","JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator","_$$CodeGenerator$$mod","_inherits","_super","_createSuper","_this","_classCallCheck","call","ORDER_OVERRIDES","isInitialized","addReservedWords","Object","getOwnPropertyNames","globalThis","_createClass","key","value","init","_get","_getPrototypeOf","prototype","reset","Names$$module$build$src$core$names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","allDeveloperVariables$$module$build$src$core$variables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels$$module$build$src$core$variables","getId","variables","finish","values","scrubNakedValue","replace","split","map","outputConnection","targetConnection","getCommentText","wrap$$module$build$src$core$utils$string","COMMENT_WRAP","inputList","type","inputTypes$$module$build$src$core$inputs$input_types","VALUE","connection","targetBlock","allNestedComments","nextConnection","blockToCode","ORDER_NONE","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_UNARY_NEGATION","floor","CodeGenerator$$module$build$src$core$generator","module$build$src$generators$javascript$javascript_generator","JavascriptGenerator","Order","module$build$src$generators$javascript$colour","colour_blend","colour_picker","colour_random","colour_rgb","module$build$src$generators$javascript$lists","lists_create_empty","lists_create_with","lists_getIndex","lists_getSublist","lists_indexOf","lists_isEmpty","lists_length","lists_repeat","lists_reverse","lists_setIndex","lists_sort","lists_split","controls_ifelse$$module$build$src$generators$javascript$logic","module$build$src$generators$javascript$logic","controls_if","controls_ifelse","logic_boolean","logic_compare","logic_negate","logic_null","logic_operation","logic_ternary","controls_repeat$$module$build$src$generators$javascript$loops","module$build$src$generators$javascript$loops","controls_flow_statements","controls_for","controls_forEach","controls_repeat","controls_repeat_ext","controls_whileUntil","math_round$$module$build$src$generators$javascript$math","math_trig$$module$build$src$generators$javascript$math","module$build$src$generators$javascript$math","math_arithmetic","math_atan2","math_change","math_constant","math_constrain","math_modulo","math_number","math_number_property","math_on_list","math_random_float","math_random_int","math_round","math_single","math_trig","procedures_defnoreturn$$module$build$src$generators$javascript$procedures","module$build$src$generators$javascript$procedures","procedures_callnoreturn","procedures_defnoreturn","procedures_defreturn","procedures_ifreturn","strRegExp$$module$build$src$generators$javascript$text","test","text_prompt$$module$build$src$generators$javascript$text","module$build$src$generators$javascript$text","text","text_append","text_changeCase","text_charAt","text_count","text_getSubstring","text_indexOf","text_isEmpty","text_join","text_length","text_multiline","text_print","text_prompt","text_prompt_ext","text_replace","text_reverse","text_trim","module$build$src$generators$javascript$variables","variables_get","variables_set","module$build$src$generators$javascript$variables_dynamic","variables_get_dynamic","variables_set_dynamic","javascriptGenerator$$module$build$src$generators$javascript","assign","module$build$src$generators$javascript","javascriptGenerator"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/colour.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/lists.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/logic.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/loops.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/math.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/procedures.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/text.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/variables.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/javascript_generator.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript/variables_dynamic.js","/Users/michaelbryant/Desktop/Littlearn/littlearn-web/node_modules/blockly/generators/javascript.js"],"sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for colour blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.colour\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_('colourRandom', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green =\n      generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue =\n      generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_('colourRgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) ||\n      \"'#000000'\";\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) ||\n      \"'#000000'\";\n  const ratio =\n      generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_('colourBlend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for list blocks.\n * @suppress {missingRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.lists\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) ||\n        'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('listsRepeat', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`);\n  const element =\n      generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount =\n      generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return [list + '.length', Order.MEMBER];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return ['!' + list + '.length', Order.LOGICAL_NOT];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const list =\n      generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      const functionName =\n          generator.provideFunction_('listsGetRandomItem', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`);\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list =\n      generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) ||\n      'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName(\n          'tmpList', NameType.VARIABLE);\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = generator.getAdjusted(\n          block, 'AT', 1, false, Order.SUBTRACTION);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName(\n            'tmpX', NameType.VARIABLE);\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n      list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(\n            block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(\n            block, 'AT2', 0, false, Order.SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const wherePascalCase = {\n      'FIRST': 'First',\n      'LAST': 'Last',\n      'FROM_START': 'FromStart',\n      'FROM_END': 'FromEnd',\n    };\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) ||\n      '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName =\n      generator.provideFunction_('listsGetSortCompare', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n  return [\n    list + '.slice().sort(' + getCompareFunctionName + '(\"' + type + '\", ' +\n        direction + '))',\n    Order.FUNCTION_CALL\n  ];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) ||\n      '[]';\n  const code = list + '.slice().reverse()';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for logic blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.logic\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) ||\n        'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(\n            generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(\n            generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      Order.EQUALITY :\n      Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order = (operator === '&&') ? Order.LOGICAL_AND :\n                                      Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const order = Order.LOGICAL_NOT;\n  const argument0 =\n      generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) ||\n      'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) ||\n      'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) ||\n      'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\n\nexport function controls_repeat_ext(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) ||\n        '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName(\n          'repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL',\n          until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.getVariableName(\n        block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n      generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = generator.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = generator.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = generator.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) ||\n      '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = generator.nameDB_.getDistinctName(\n        variable0 + '_list', NameType.VARIABLE);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = generator.nameDB_.getDistinctName(\n      variable0 + '_index', NameType.VARIABLE);\n  branch = generator.INDENT + variable0 + ' = ' + listVar +\n      '[' + indexVar + '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(\n        generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(\n          generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @suppress {missingRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.math\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? Order.ATOMIC :\n              Order.UNARY_NEGATION;\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.SUBTRACTION],\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.DIVISION],\n    'POWER': [null, Order.NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM',\n        Order.UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM',\n        Order.DIVISION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM',\n        Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.DIVISION];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.PI', Order.MEMBER],\n    'E': ['Math.E', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.DIVISION],\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\n    'INFINITY': ['Infinity', Order.ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nexport function math_number_property(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 === 0', Order.MODULUS, Order.EQUALITY],\n    'ODD': [' % 2 === 1', Order.MODULUS, Order.EQUALITY],\n    'WHOLE': [' % 1 === 0', Order.MODULUS,\n        Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL,\n        Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL,\n        Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MODULUS, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n      generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) ||\n      '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('mathIsPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MODULUS) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  const argument0 = generator.valueToCode(block, 'DELTA',\n      Order.ADDITION) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = (typeof ' + varName + ' === \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = generator.valueToCode(block, 'LIST',\n          Order.MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_('mathMean', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_('mathMedian', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_('mathModes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName =\n          generator.provideFunction_('mathStandardDeviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName =\n          generator.provideFunction_('mathRandomList', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 = generator.valueToCode(block, 'DIVIDEND',\n      Order.MODULUS) || '0';\n  const argument1 = generator.valueToCode(block, 'DIVISOR',\n      Order.MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MODULUS];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW',\n      Order.NONE) || '0';\n  const argument2 = generator.valueToCode(block, 'HIGH',\n      Order.NONE) || 'Infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO',\n      Order.NONE) || '0';\n  const functionName = generator.provideFunction_('mathRandomInt', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Order.FUNCTION_CALL];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y',\n      Order.NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      Order.DIVISION];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.procedures\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(\n        generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(\n          generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] =\n        generator.getVariableName(variables[i]);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) ||\n        'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) ||\n      'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block),\n        generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for text blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.texts\n\nimport {Order} from './javascript_generator.js';\n\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['String(' + value + ')', Order.FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(stringName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code =\n      generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? Order.ADDITION :\n      Order.ATOMIC;\n  return [code, order];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element = generator.valueToCode(block, 'ADD0',\n          Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = generator.valueToCode(block, 'ADD0',\n          Order.NONE) || \"''\";\n      const element1 = generator.valueToCode(block, 'ADD1',\n          Order.NONE) || \"''\";\n      const code = forceString(element0)[0] +\n          ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITION];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] = generator.valueToCode(block, 'ADD' + i,\n            Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const code = varName + ' += ' +\n      forceString(value)[0] + ';\\n';\n  return code;\n};\n\nexport function text_length(block, generator) {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  return [text + '.length', Order.MEMBER];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  return ['!' + text + '.length', Order.LOGICAL_NOT];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  const operator = block.getFieldValue('END') === 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  const substring = generator.valueToCode(block, 'FIND',\n      Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? Order.NONE :\n      Order.MEMBER;\n  const text =\n      generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName =\n          generator.provideFunction_('textRandomLetter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where1 !== 'LAST' &&\n      where2 !== 'FROM_END' && where2 !== 'LAST');\n  const textOrder = requiresLengthCall ? Order.MEMBER :\n      Order.NONE;\n  const text =\n      generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false,\n            Order.SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false,\n            Order.SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\n  const text =\n      generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName =\n        generator.provideFunction_('textToTitleCase', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.MEMBER) || \"''\";\n  return [text + operator, Order.FUNCTION_CALL];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  return 'window.alert(' + msg + ');\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB',\n      Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('textCount', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_replace(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM',\n      Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = generator.provideFunction_('textReplace', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_reverse(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variables\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(\n                        block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\n// Former goog.module ID: Blockly.JavaScript\n\nimport * as Variables from '../../core/variables.js';\nimport * as stringUtils from '../../core/utils/string.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names, NameType} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,            // 0 \"\" ...\n  NEW: 1.1,             // new\n  MEMBER: 1.2,          // . []\n  FUNCTION_CALL: 2,     // ()\n  INCREMENT: 3,         // ++\n  DECREMENT: 3,         // --\n  BITWISE_NOT: 4.1,     // ~\n  UNARY_PLUS: 4.2,      // +\n  UNARY_NEGATION: 4.3,  // -\n  LOGICAL_NOT: 4.4,     // !\n  TYPEOF: 4.5,          // typeof\n  VOID: 4.6,            // void\n  DELETE: 4.7,          // delete\n  AWAIT: 4.8,           // await\n  EXPONENTIATION: 5.0,  // **\n  MULTIPLICATION: 5.1,  // *\n  DIVISION: 5.2,        // /\n  MODULUS: 5.3,         // %\n  SUBTRACTION: 6.1,     // -\n  ADDITION: 6.2,        // +\n  BITWISE_SHIFT: 7,     // << >> >>>\n  RELATIONAL: 8,        // < <= > >=\n  IN: 8,                // in\n  INSTANCEOF: 8,        // instanceof\n  EQUALITY: 9,          // == != === !==\n  BITWISE_AND: 10,      // &\n  BITWISE_XOR: 11,      // ^\n  BITWISE_OR: 12,       // |\n  LOGICAL_AND: 13,      // &&\n  LOGICAL_OR: 14,       // ||\n  CONDITIONAL: 15,      // ?:\n  ASSIGNMENT: 16,       //: += -= **= *= /= %= <<= >>= ...\n  YIELD: 17,            // yield\n  COMMA: 18,            // ,\n  NONE: 99,             // (...)\n};\n\n/**\n * JavaScript code generator class.\n */\nexport class JavascriptGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // !(!foo) -> !!foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a * (b * c) -> a * b * c\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\n    // a + (b + c) -> a + b + c\n    [Order.ADDITION, Order.ADDITION],\n    // a && (b && c) -> a && b && c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a || (b || c) -> a || b || c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n\n  constructor(name) {\n    super(name ?? 'JavaScript');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n        'break,case,catch,class,const,continue,debugger,default,delete,do,' +\n        'else,export,extends,finally,for,function,if,import,in,instanceof,' +\n        'new,return,super,switch,this,throw,try,typeof,var,void,' +\n        'while,with,yield,' +\n        'enum,' +\n        'implements,interface,let,package,private,protected,public,static,' +\n        'await,' +\n        'null,true,false,' +\n        // Magic variable.\n        'arguments,' +\n        // Everything in the current environment (835 items in Chrome,\n        // 104 in Node).\n        Object.getOwnPropertyNames(globalThis).join(',')\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE));\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE));\n    }\n\n    // Declare all of the variables.\n    if (defvars.length) {\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped JavaScript string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} JavaScript string.\n   */\n  quote_(string) {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline JavaScript string, complete\n   * with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} JavaScript string.\n   */\n  multiline_quote_(string) {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    const lines = string.split(/\\n/g).map(this.quote_);\n    return lines.join(' + \\'\\\\n\\' +\\n');\n  }\n\n  /**\n   * Common tasks for generating JavaScript from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The JavaScript code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} JavaScript code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '// ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n    let innerOrder;\n    let outerOrder = order;\n    if (delta > 0) {\n      outerOrder = this.ORDER_ADDITION;\n      innerOrder = this.ORDER_ADDITION;\n    } else if (delta < 0) {\n      outerOrder = this.ORDER_SUBTRACTION;\n      innerOrder = this.ORDER_SUBTRACTION;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_NEGATION;\n      innerOrder = this.ORDER_UNARY_NEGATION;\n    }\n\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = Number(at) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\n\n\n// JavaScript is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating JavaScript for\n *     blocks.  This is the entrypoint for javascript_compressed.js.\n * @suppress {extraRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.all\n\nimport {JavascriptGenerator} from './javascript/javascript_generator.js';\nimport * as colour from './javascript/colour.js';\nimport * as lists from './javascript/lists.js';\nimport * as logic from './javascript/logic.js';\nimport * as loops from './javascript/loops.js';\nimport * as math from './javascript/math.js';\nimport * as procedures from './javascript/procedures.js';\nimport * as text from './javascript/text.js';\nimport * as variables from './javascript/variables.js';\nimport * as variablesDynamic from './javascript/variables_dynamic.js';\n\nexport * from './javascript/javascript_generator.js';\n\n/**\n * JavaScript code generator instance.\n * @type {!JavascriptGenerator}\n */\nexport const javascriptGenerator = new JavascriptGenerator();\n\n// Install per-block-type generator functions:\nObject.assign(\n  javascriptGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}